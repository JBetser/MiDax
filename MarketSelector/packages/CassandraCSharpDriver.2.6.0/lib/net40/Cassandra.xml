<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Cassandra</name>
    </assembly>
    <members>
        <member name="T:Cassandra.AggregateMetadata">
            <summary>
            Describes a CQL aggregate.
            </summary>
        </member>
        <member name="M:Cassandra.AggregateMetadata.Build(System.Int32,Cassandra.Row)">
            <summary>
            Creates a new instance of function metadata based on a schema_function row.
            </summary>
        </member>
        <member name="P:Cassandra.AggregateMetadata.Name">
            <summary>
            Name of the CQL aggregate.
            </summary>
        </member>
        <member name="P:Cassandra.AggregateMetadata.KeyspaceName">
            <summary>
            Name of the keyspace where the cql aggregate is declared.
            </summary>
        </member>
        <member name="P:Cassandra.AggregateMetadata.Signature">
            <summary>
            Signature of the function.
            </summary>
        </member>
        <member name="P:Cassandra.AggregateMetadata.ArgumentTypes">
            <summary>
            List of the function argument types.
            </summary>
        </member>
        <member name="P:Cassandra.AggregateMetadata.StateFunction">
            <summary>
            State Function.
            </summary>
        </member>
        <member name="P:Cassandra.AggregateMetadata.StateType">
            <summary>
            State type.
            </summary>
        </member>
        <member name="P:Cassandra.AggregateMetadata.FinalFunction">
            <summary>
            Final function.
            </summary>
        </member>
        <member name="P:Cassandra.AggregateMetadata.InitialCondition">
            <summary>
            Initial state value of this aggregate.
            </summary>
        </member>
        <member name="P:Cassandra.AggregateMetadata.ReturnType">
            <summary>
            Type of the return value.
            </summary>
        </member>
        <member name="M:Snappy.SnappyDecompressor.DecompressTagSlow(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
             This is a second copy of the inner loop of decompressTags used when near the
             end of the input. The key difference is the reading of the trailer bytes. The
             fast code does a blind read of the next 4 bytes as an int, and this code
             assembles the int byte-by-byte to assure that the array is not over run. The
             reason this code path is separate is the if condition to choose between these
             two seemingly small differences costs like 10-20% of the throughput. I'm
             hoping in future' versions of hot-spot this code can be integrated into the
             main loop but for now it is worth the extra maintenance pain to get the extra
             10-20%.
            </summary>
        </member>
        <member name="M:Snappy.SnappyDecompressor.IncrementalCopy(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
             Copy "len" bytes from "src" to "op", one byte at a time. Used for handling
             COPY operations where the input and output regions may overlap. For example,
             suppose: src == "ab" op == src + 2 len == 20 After incrementalCopy, the
             result will have eleven copies of "ab" ababababababababababab Note that this
             does not match the semantics of either memcpy() or memmove().
            </summary>
        </member>
        <member name="M:Snappy.SnappyDecompressor.ReadUncompressedLength(System.Byte[],System.Int32)">
            <summary>
             Reads the variable length integer encoded a the specified offset, and returns
             this length with the number of bytes read.
            </summary>
        </member>
        <member name="T:Cassandra.Data.CqlCommand">
            <summary>
            Represents an CQL statement to execute against Cassandra
            </summary>
        </member>
        <member name="P:Cassandra.Data.CqlCommand.CommandText">
            <inheritdoc />
        </member>
        <member name="P:Cassandra.Data.CqlCommand.ConsistencyLevel">
            <summary>
            Gets or sets the ConsistencyLevel when executing the current <see cref="T:Cassandra.Data.CqlCommand"/>.
            </summary>
        </member>
        <member name="P:Cassandra.Data.CqlCommand.IsPrepared">
            <summary>
            Gets whether this command has been prepared.
            </summary>
        </member>
        <member name="P:Cassandra.Data.CqlCommand.Parameters">
            <summary>
            Gets the <see cref="T:Cassandra.Data.CqlParameter"/>s.
            </summary>
        </member>
        <member name="T:Cassandra.Data.CqlConnection">
            <summary>
            Represents a CQL connection.
            </summary>
            <inheritdoc />
        </member>
        <member name="M:Cassandra.Data.CqlConnection.#ctor">
            <summary>
            Initializes a <see cref="T:Cassandra.Data.CqlConnection"/>.
            </summary>
        </member>
        <member name="M:Cassandra.Data.CqlConnection.#ctor(System.String)">
            <summary>
            Initializes a <see cref="T:Cassandra.Data.CqlConnection"/>.
            </summary>
            <param name="connectionString">The connection string.</param>
        </member>
        <member name="M:Cassandra.Data.CqlConnection.BeginDbTransaction(System.Data.IsolationLevel)">
            <inheritdoc />
        </member>
        <member name="M:Cassandra.Data.CqlConnection.ChangeDatabase(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Cassandra.Data.CqlConnection.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Cassandra.Data.CqlConnection.Close">
            <inheritdoc />
        </member>
        <member name="M:Cassandra.Data.CqlConnection.CreateDbCommand">
            <inheritdoc />
        </member>
        <member name="M:Cassandra.Data.CqlConnection.Open">
            <inheritdoc />
        </member>
        <member name="M:Cassandra.Data.CqlConnection.OnBuildingCluster(Cassandra.Builder)">
            <summary>
            To be overridden in child classes to change the default <see cref="T:Cassandra.Builder"/> settings
            for building a <see cref="T:Cassandra.Cluster"/>.
            
            For example, some clients might want to specify the <see cref="T:Cassandra.DCAwareRoundRobinPolicy"/>
            when building the <see cref="T:Cassandra.Cluster"/> so that the clients could talk to only the hosts
            in specified datacenter for better performance.
            </summary>
            <param name="builder">The <see cref="T:Cassandra.Builder"/> for building a <see cref="T:Cassandra.Cluster"/>.</param>
        </member>
        <member name="M:Cassandra.Data.CqlConnection.CreateCluster(Cassandra.CassandraConnectionStringBuilder)">
            <summary>
            Creates a <see cref="T:Cassandra.Cluster"/>. By default <see cref="T:Cassandra.Cluster"/>s are created and cached
            by cluster name specified in connection string.
            
            To be overridden in child classes to change the default creation and caching behavior.
            </summary>
            <param name="connectionStringBuilder">The <see cref="T:Cassandra.CassandraConnectionStringBuilder"/>.</param>
            <returns></returns>
        </member>
        <member name="M:Cassandra.Data.CqlConnection.CreatedSession(System.String)">
            <summary>
            Creates a <see cref="T:Cassandra.ISession"/>.
            
            To be overridden in child classes if want to cache the <see cref="T:Cassandra.ISession"/> created.
            </summary>
            <param name="keyspace">The keyspace.</param>
            <returns>Returns the created <see cref="T:Cassandra.ISession"/>.</returns>
        </member>
        <member name="M:Cassandra.Data.CqlConnection.CreatePreparedStatement(System.String)">
            <summary>
            To be called by CqlCommand to creates a <see cref="T:Cassandra.PreparedStatement"/>
            from <see cref="F:Cassandra.Data.CqlConnection.ManagedConnection"/>.
            
            To be overridden in child classes if want to cache the <see cref="T:Cassandra.PreparedStatement"/> created.
            </summary>
            <param name="cqlQuery">The CQL query string.</param>
            <returns>Returns the created <see cref="T:Cassandra.PreparedStatement"/>.</returns>
        </member>
        <member name="P:Cassandra.Data.CqlConnection.ConnectionString">
            <inheritdoc />
        </member>
        <member name="P:Cassandra.Data.CqlConnection.DataSource">
            <inheritdoc />
        </member>
        <member name="P:Cassandra.Data.CqlConnection.Database">
            <summary>
            Returns the Keyspace
            </summary>
        </member>
        <member name="P:Cassandra.Data.CqlConnection.ServerVersion">
            <inheritdoc />
        </member>
        <member name="P:Cassandra.Data.CqlConnection.State">
            <inheritdoc />
        </member>
        <member name="T:Cassandra.Data.CqlDataAdapter">
            <summary>
            Implementation of the <see cref="T:System.Data.IDbDataAdapter"/> interface. Provides
            strong typing, but inherit most of the functionality needed to fully implement a DataAdapter.
            </summary>
            <inheritdoc/>
        </member>
        <member name="T:Cassandra.Data.CqlParameter">
            <summary>
            Represents a Cql parameter.
            </summary>
        </member>
        <member name="M:Cassandra.Data.CqlParameter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cassandra.Data.CqlParameter"/> class.
            </summary>
        </member>
        <member name="M:Cassandra.Data.CqlParameter.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cassandra.Data.CqlParameter"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Cassandra.Data.CqlParameter.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Cassandra.Data.CqlParameter"/> class.
            The type of the parameter will be guessed from the value.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Cassandra.Data.CqlParameter.ResetDbType">
            <summary>
            Resets the DbType property to its original settings.
            </summary>
        </member>
        <member name="P:Cassandra.Data.CqlParameter.DbType">
            <summary>
            Gets or sets the <see cref="T:System.Data.DbType" /> of the parameter.
            </summary>
        </member>
        <member name="P:Cassandra.Data.CqlParameter.Direction">
            <summary>
            Gets or sets a value indicating whether the parameter is 
            input-only, output-only, bidirectional, or a stored procedure return value parameter.
            </summary>
            <returns>
            One of the <see cref="T:System.Data.ParameterDirection"/> values.
            The default is Input.
            </returns>
            <exception cref="T:System.NotSupportedException">Cql only supports input parameters</exception>
        </member>
        <member name="P:Cassandra.Data.CqlParameter.IsNullable">
            <summary>
            Gets a value indicating whether the parameter accepts null values.
            </summary>
            <returns>true if null values are accepted; otherwise, false. The default is false. </returns>
        </member>
        <member name="P:Cassandra.Data.CqlParameter.ParameterName">
            <summary>
            Gets or sets the name of the <see cref="T:System.Data.IDataParameter" />.
            </summary>
            <returns>
            The name of the <see cref="T:System.Data.IDataParameter" />.
            The default is an empty string.
            </returns>
        </member>
        <member name="P:Cassandra.Data.CqlParameter.SourceColumn">
            <summary>
            Gets or sets the name of the source column that is mapped
            to the <see cref="T:System.Data.DataSet" /> and used for loading or 
            returning the <see cref="P:System.Data.IDataParameter.Value" />.
            </summary>
            <returns>
            The name of the source column that is mapped to the <see cref="T:System.Data.DataSet" />.
            The default is an empty string.
            </returns>
        </member>
        <member name="P:Cassandra.Data.CqlParameter.SourceVersion">
            <summary>
            Gets or sets the <see cref="T:System.Data.DataRowVersion" />
            to use when loading <see cref="P:System.Data.IDataParameter.Value" />.
            </summary>
            <returns>
            One of the <see cref="T:System.Data.DataRowVersion" /> values.
            The default is Current.
            </returns>
        </member>
        <member name="P:Cassandra.Data.CqlParameter.Value">
            <summary>
            Gets or sets the value of the parameter. 
            If no type information was provided earlier, the type of the parameter will be
            guessed from the value's type.
            </summary>
            <returns>
            An <see cref="T:System.Object" /> that is the value of the parameter.
            The default value is null.
            </returns>
        </member>
        <member name="P:Cassandra.Data.CqlParameter.Size">
            <summary>
            The size of the parameter.
            </summary>
            <returns>Always returns 0.</returns>
        </member>
        <member name="P:Cassandra.Data.CqlParameter.SourceColumnNullMapping">
            <summary>
            Sets or gets a value which indicates whether the source column is nullable.
            This allows <see cref="T:System.Data.Common.DbCommandBuilder" /> 
            to correctly generate Update statements for nullable columns.
            </summary>
            <returns>true if the source column is nullable; false if it is not. </returns>
        </member>
        <member name="T:Cassandra.Data.CqlParameterCollection">
            <summary>
            Represents a collection of <see cref="T:Cassandra.Data.CqlParameter"/>s.
            </summary>
        </member>
        <member name="M:Cassandra.Data.CqlParameterCollection.Add(System.Object)">
            <summary>
            Adds the specified <see cref="T:System.Data.Common.DbParameter" /> object
            to the <see cref="T:System.Data.Common.DbParameterCollection" />.
            </summary>
            <param name="value">
            The <see cref="P:System.Data.Common.DbParameter.Value" />
            of the <see cref="T:System.Data.Common.DbParameter" /> to add to the collection.
            </param>
            <returns>
            The index of the <see cref="T:System.Data.Common.DbParameter" /> object in the collection. 
            </returns>
        </member>
        <member name="M:Cassandra.Data.CqlParameterCollection.Add(Cassandra.Data.CqlParameter)">
            <summary>
            Adds the specified parameter.
            </summary>
            <param name="parameter">The parameter.</param>
            <returns> </returns>
        </member>
        <member name="M:Cassandra.Data.CqlParameterCollection.Add(System.String,System.Object)">
            <summary>
            Adds a new parameter with the specified name and value. The name will be
            parsed to extract table and keyspace information (if any). The parameter type
            will be guessed from the object value.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <returns>The created <see cref="T:Cassandra.Data.CqlParameter"/>.</returns>
        </member>
        <member name="M:Cassandra.Data.CqlParameterCollection.Contains(System.Object)">
            <summary>
            Indicates whether a <see cref="T:System.Data.Common.DbParameter" /> 
            with the specified <see cref="P:System.Data.Common.DbParameter.Value" /> 
            is contained in the collection.
            </summary>
            <param name="value">
            The <see cref="P:System.Data.Common.DbParameter.Value" /> 
            of the <see cref="T:System.Data.Common.DbParameter" /> to look for in the collection.
            </param>
            <returns>
            true if the <see cref="T:System.Data.Common.DbParameter" /> is in the collection; otherwise false.
            </returns>
        </member>
        <member name="M:Cassandra.Data.CqlParameterCollection.Clear">
            <summary>
            Removes all <see cref="T:System.Data.Common.DbParameter" /> values
            from the <see cref="T:System.Data.Common.DbParameterCollection" />.
            </summary>
        </member>
        <member name="M:Cassandra.Data.CqlParameterCollection.IndexOf(System.Object)">
            <summary>
            Returns the index of the specified <see cref="T:System.Data.Common.DbParameter" /> object.
            </summary>
            <param name="value">The <see cref="T:System.Data.Common.DbParameter" /> object in the collection.</param>
            <returns>The index of the specified <see cref="T:System.Data.Common.DbParameter" /> object.</returns>
        </member>
        <member name="M:Cassandra.Data.CqlParameterCollection.Insert(System.Int32,System.Object)">
            <summary>
            Inserts the specified index of the <see cref="T:System.Data.Common.DbParameter" /> object
            with the specified name into the collection at the specified index.
            </summary>
            <param name="index">The index at which to insert the <see cref="T:System.Data.Common.DbParameter" /> object.</param>
            <param name="value">The <see cref="T:System.Data.Common.DbParameter" /> object to insert into the collection.</param>
        </member>
        <member name="M:Cassandra.Data.CqlParameterCollection.Remove(System.Object)">
            <summary>
            Removes the specified <see cref="T:System.Data.Common.DbParameter" /> object from the collection.
            </summary>
            <param name="value">The <see cref="T:System.Data.Common.DbParameter" /> object to remove.</param>
        </member>
        <member name="M:Cassandra.Data.CqlParameterCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Data.Common.DbParameter" /> object at the specified from the collection.
            </summary>
            <param name="index">
            The index where the <see cref="T:System.Data.Common.DbParameter" /> object is located.
            </param>
        </member>
        <member name="M:Cassandra.Data.CqlParameterCollection.RemoveAt(System.String)">
            <summary>
            Removes the <see cref="T:System.Data.Common.DbParameter" /> object 
            with the specified name from the collection.
            </summary>
            <param name="parameterName">
            The name of the <see cref="T:System.Data.Common.DbParameter" /> object to remove.
            </param>
        </member>
        <member name="M:Cassandra.Data.CqlParameterCollection.SetParameter(System.Int32,System.Data.Common.DbParameter)">
            <summary>
            Sets the <see cref="T:System.Data.Common.DbParameter" /> object 
            at the specified index to a new value.
            </summary>
            <param name="index">
            The index where the <see cref="T:System.Data.Common.DbParameter" /> objectis located. 
            </param>
            <param name="value">The new <see cref="T:System.Data.Common.DbParameter" /> value.</param>
        </member>
        <member name="M:Cassandra.Data.CqlParameterCollection.SetParameter(System.String,System.Data.Common.DbParameter)">
            <summary>
            Sets the <see cref="T:System.Data.Common.DbParameter" /> object
            with the specified name to a new value.
            </summary>
            <param name="parameterName">
            The name of the <see cref="T:System.Data.Common.DbParameter" /> object in the collection.
            </param>
            <param name="value">The new <see cref="T:System.Data.Common.DbParameter" /> value.</param>
        </member>
        <member name="M:Cassandra.Data.CqlParameterCollection.IndexOf(System.String)">
            <summary>
            Returns the index of the <see cref="T:System.Data.Common.DbParameter" /> object with the specified name.
            </summary>
            <returns>
            <param name="parameterName">
            The name of the <see cref="T:System.Data.Common.DbParameter" /> object in the collection.
            </param>
            The index of the <see cref="T:System.Data.Common.DbParameter" /> object with the specified name.
            </returns>
        </member>
        <member name="M:Cassandra.Data.CqlParameterCollection.GetEnumerator">
            <summary>
            Exposes the <see cref="M:System.Collections.IEnumerable.GetEnumerator" /> method, 
            which supports a simple iteration over a collection by a .NET Framework data provider.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> that can be used 
            to iterate through the collection.
            </returns>
        </member>
        <member name="M:Cassandra.Data.CqlParameterCollection.GetParameter(System.Int32)">
            <summary>
            Returns the <see cref="T:System.Data.Common.DbParameter" /> object at the specified index in the collection.
            </summary>
            <param name="index">
            The index of the <see cref="T:System.Data.Common.DbParameter" />in the collection.
            </param>
            <returns>
            The <see cref="T:System.Data.Common.DbParameter" /> object 
            at the specified index in the collection.
            </returns>
        </member>
        <member name="M:Cassandra.Data.CqlParameterCollection.GetParameter(System.String)">
            <summary>
            Returns <see cref="T:System.Data.Common.DbParameter" /> the object with the specified name.
            </summary>
            <param name="parameterName">
            The name of the <see cref="T:System.Data.Common.DbParameter" /> in the collection.
            </param>
            <returns>The <see cref="T:System.Data.Common.DbParameter" /> the object with the specified name. </returns>
        </member>
        <member name="M:Cassandra.Data.CqlParameterCollection.Contains(System.String)">
            <summary>
            Indicates whether a <see cref="T:System.Data.Common.DbParameter" />
            with the specified name exists in the collection.
            </summary>
            <param name="value">
            The name of the <see cref="T:System.Data.Common.DbParameter" /> 
            to look for in the collection.
            </param>
            <returns>
            true if the <see cref="T:System.Data.Common.DbParameter" /> is
            in the collection; otherwise false.
            </returns>
        </member>
        <member name="M:Cassandra.Data.CqlParameterCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies an array of items to the collection starting at the specified index.
            </summary>
            <param name="array">The array of items to copy to the collection.</param>
            <param name="index">The index in the collection to copy the items.</param>
        </member>
        <member name="M:Cassandra.Data.CqlParameterCollection.AddRange(System.Array)">
            <summary>
            Adds an array of items with the specified values 
            to the <see cref="T:System.Data.Common.DbParameterCollection" />.
            </summary>
            <param name="values">
            An array of values of type <see cref="T:System.Data.Common.DbParameter" /> 
            to add to the collection. 
            </param>
        </member>
        <member name="P:Cassandra.Data.CqlParameterCollection.Count">
            <summary>
            Specifies the number of items in the collection.
            </summary>
            <returns>The number of items in the collection.</returns>
        </member>
        <member name="P:Cassandra.Data.CqlParameterCollection.SyncRoot">
            <summary>
            Specifies the <see cref="T:System.Object" /> to be used to synchronize access to the collection.
            </summary>
            <returns>
            A <see cref="T:System.Object" /> to be used to synchronize access 
            to the <see cref="T:System.Data.Common.DbParameterCollection" />.
            </returns>
        </member>
        <member name="P:Cassandra.Data.CqlParameterCollection.IsFixedSize">
            <summary>
            Specifies whether the collection is a fixed size.
            </summary>
            <returns>true if the collection is a fixed size; otherwise false.</returns>
        </member>
        <member name="P:Cassandra.Data.CqlParameterCollection.IsReadOnly">
            <summary>
            Specifies whether the collection is read-only.
            </summary>
            <returns>true if the collection is read-only; otherwise false.</returns>
        </member>
        <member name="P:Cassandra.Data.CqlParameterCollection.IsSynchronized">
            <summary>
            Specifies whether the collection is synchronized.
            </summary>
            <returns>true if the collection is synchronized; otherwise false.</returns>
        </member>
        <member name="T:Cassandra.Data.CqlProviderFactory">
            <summary>
            Represents a set of methods for creating instances of a CQL ADO.NET implementation
            of the data source classes.
            </summary>
        </member>
        <member name="T:Cassandra.Data.CqlReader">
            <summary>
            Reads a forward-only stream of rows from Cassandra.
            </summary>
            <inheritdoc />
        </member>
        <member name="M:Cassandra.Data.CqlReader.GetBoolean(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Cassandra.Data.CqlReader.GetByte(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Cassandra.Data.CqlReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Cassandra.Data.CqlReader.GetChar(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Cassandra.Data.CqlReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Cassandra.Data.CqlReader.GetDataTypeName(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Cassandra.Data.CqlReader.GetDateTime(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Cassandra.Data.CqlReader.GetDecimal(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Cassandra.Data.CqlReader.GetDouble(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Cassandra.Data.CqlReader.GetFieldType(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Cassandra.Data.CqlReader.GetFloat(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Cassandra.Data.CqlReader.GetGuid(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Cassandra.Data.CqlReader.GetInt16(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Cassandra.Data.CqlReader.GetInt32(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Cassandra.Data.CqlReader.GetInt64(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Cassandra.Data.CqlReader.GetName(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Cassandra.Data.CqlReader.GetOrdinal(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Cassandra.Data.CqlReader.GetValue(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Cassandra.Data.CqlReader.GetValues(System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:Cassandra.Data.CqlReader.IsDBNull(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Cassandra.Data.CqlReader.NextResult">
            <inheritdoc />
        </member>
        <member name="M:Cassandra.Data.CqlReader.Read">
            <inheritdoc />
        </member>
        <member name="P:Cassandra.Data.CqlReader.FieldCount">
            <inheritdoc />
        </member>
        <member name="T:Cassandra.Data.Linq.AllowFilteringAttribute">
            <summary>
            The ALLOW FILTERING option allows to explicitly allow queries that require filtering. 
            Please note that a query using ALLOW FILTERING may thus have unpredictable performance (for the definition above), i.e. even a query that selects a handful of records may exhibit performance that depends on the total amount of data stored in the cluster.
            </summary>
        </member>
        <member name="T:Cassandra.Statement">
            <summary>
            Base class for statements that contains the options.
            </summary>
        </member>
        <member name="T:Cassandra.IStatement">
            <summary>
             An executable query.
             This represents either a <see cref="T:Cassandra.SimpleStatement"/>, a <see cref="T:Cassandra.BoundStatement"/> or a
             <see cref="T:Cassandra.BoundStatement"/> along with the query options (consistency level,
             whether to trace the query, ...).
            </summary>
        </member>
        <member name="M:Cassandra.IStatement.DisableTracing">
            <summary>
             Disable tracing for the statement.
            </summary>
        </member>
        <member name="M:Cassandra.IStatement.EnableTracing(System.Boolean)">
            <summary>
             Enables tracing for the statement
            </summary>
        </member>
        <member name="M:Cassandra.IStatement.SetAutoPage(System.Boolean)">
            <summary>
            Sets the paging behavior.
            When set to true (default), the <see cref="T:Cassandra.RowSet"/> returned when executing this <c>IStatement</c> will automatically fetch the following result pages.
            When false, the <see cref="T:Cassandra.RowSet"/> returned will only contain the rows contained in the result page and will not fetch additional pages.
            </summary>
            <returns>this <c>IStatement</c> object.</returns>
        </member>
        <member name="M:Cassandra.IStatement.SetConsistencyLevel(System.Nullable{Cassandra.ConsistencyLevel})">
            <summary>
             Sets the consistency level for the query. <p> The default consistency level,
             if this method is not called, is ConsistencyLevel.ONE.</p>
            </summary>
            <param name="consistency"> the consistency level to set. </param>
            <returns>this <c>IStatement</c> object.</returns>
        </member>
        <member name="M:Cassandra.IStatement.SetPageSize(System.Int32)">
            <summary>
            Sets the page size for this query.
            The page size controls how much resulting rows will be retrieved
            simultaneously (the goal being to avoid loading too much results
            in memory for queries yielding large results). Please note that
            while value as low as 1 can be used, it is highly discouraged to
            use such a low value in practice as it will yield very poor
            performance. If in doubt, leaving the default is probably a good
            idea.
            <p>
            Also note that only <c>SELECT</c> queries ever make use of that
            setting.
            </p>
            <param name="pageSize">the page size to use. If set to 0 or less, the default value will be used.
            To disable paging of the result set, use int.MaxValue</param>
            <returns>this <c>Query</c> object.</returns>
            </summary>
        </member>
        <member name="M:Cassandra.IStatement.SetPagingState(System.Byte[])">
            <summary>
            Sets the paging state, a token representing the current page state of query used to continue paging by retrieving the following result page.
            Setting the paging state will disable automatic paging.
            </summary>
            <param name="pagingState">The page state token</param>
            <returns>this <c>IStatement</c> object.</returns>
        </member>
        <member name="M:Cassandra.IStatement.SetRetryPolicy(Cassandra.IRetryPolicy)">
            <summary>
             Sets the retry policy to use for this query. <p> The default retry policy, if
             this method is not called, is the one returned by
             <link>Policies#RetryPolicy</link> in the
             cluster configuration. This method is thus only useful in case you want to
             punctually override the default policy for this request.</p>
            </summary>
            <param name="policy"> the retry policy to use for this query. </param>
            <returns>this <c>IStatement</c> object.</returns>
        </member>
        <member name="M:Cassandra.IStatement.SetSerialConsistencyLevel(Cassandra.ConsistencyLevel)">
            <summary>
            Sets the serial consistency level for the query.
            The serial consistency level is only used by conditional updates (so INSERT, UPDATE
            and DELETE with an IF condition). For those, the serial consistency level defines
            the consistency level of the serial phase (or "paxos" phase) while the
            normal consistency level defines the consistency for the "learn" phase, i.e. what
            type of reads will be guaranteed to see the update right away. For instance, if
            a conditional write has a regular consistency of QUORUM (and is successful), then a
            QUORUM read is guaranteed to see that write. But if the regular consistency of that
            write is ANY, then only a read with a consistency of SERIAL is guaranteed to see it
            (even a read with consistency ALL is not guaranteed to be enough).
            </summary>
            <param name="serialConsistency">Can be set only to ConsistencyLevel.Serial or 
            ConsistencyLevel.LocalSerial. Setting it to ConsistencyLevel.Serial guarantees full 
            linearizability while ConsistencyLevel.LocalSerial guarantees it only in the local datacenter. </param>
            <returns>this <c>IStatement</c> object.</returns>
        </member>
        <member name="M:Cassandra.IStatement.SetTimestamp(System.DateTimeOffset)">
            <summary>
            Sets the timestamp associated with this statement execution.
            If provided, this will replace the server side assigned 
            timestamp as default timestamp. Note that a timestamp in the query itself will still override this timestamp.
            </summary>
        </member>
        <member name="M:Cassandra.IStatement.SetOutgoingPayload(System.Collections.Generic.IDictionary{System.String,System.Byte[]})">
            <summary>
            Sets a custom outgoing payload for this statement.
            Each time this statement is executed, this payload will be included in the request.
            Once it is set using this method, the payload should not be modified.
            </summary>
        </member>
        <member name="P:Cassandra.IStatement.AutoPage">
            <summary>
            Determines if the <see cref="T:Cassandra.RowSet"/> returned when executing this <c>IStatement</c> will automatically fetch the following result pages. Defaults to true.
            </summary>
        </member>
        <member name="P:Cassandra.IStatement.ConsistencyLevel">
            <summary>
            Gets the consistency level for this query.
            </summary>
        </member>
        <member name="P:Cassandra.IStatement.IsTracing">
            <summary>
             Gets whether tracing is enabled for this query or not.
            </summary>
        </member>
        <member name="P:Cassandra.IStatement.PageSize">
            <summary>
            Gets query's page size.
            </summary>
        </member>
        <member name="P:Cassandra.IStatement.Timestamp">
            <summary>
            Gets the timestamp associated with this statement execution.
            </summary>
        </member>
        <member name="P:Cassandra.IStatement.RetryPolicy">
            <summary>
             Gets the retry policy sets for this query, if any.
            </summary>
        </member>
        <member name="P:Cassandra.IStatement.RoutingKey">
            <summary>
             The routing key (in binary raw form) to use for token aware routing of this
             query. <p> The routing key is optional in the sense that implementers are
             free to return <c>null</c>. The routing key is an hint used for token
             aware routing (see
             <link>TokenAwarePolicy</link>), and if
             provided should correspond to the binary value for the query partition key.
             However, not providing a routing key never causes a query to fail and if the
             load balancing policy used is not token aware, then the routing key can be
             safely ignored.</p>
            </summary>
        </member>
        <member name="P:Cassandra.IStatement.SerialConsistencyLevel">
            <summary>
            Gets the serial consistency level for the query.
            <para>
            The serial consistency level is only used by conditional updates (INSERT, UPDATE
            and DELETE with an IF condition).
            </para>
            </summary>
        </member>
        <member name="P:Cassandra.IStatement.OutgoingPayload">
            <summary>
            Gets custom payload for that will be included when executing this Statement.
            </summary>
        </member>
        <member name="M:Cassandra.Statement.#ctor(Cassandra.QueryProtocolOptions)">
            <inheritdoc />
        </member>
        <member name="M:Cassandra.Statement.SetSkipMetadata(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Cassandra.Statement.SetValues(System.Object[])">
            <summary>
             Bound values to the variables of this statement. This method provides a
             convenience to bound all the variables of the <c>BoundStatement</c> in
             one call.
            </summary>
            <param name="values"> the values to bind to the variables of the newly
             created BoundStatement. The first element of <c>values</c> will 
             be bound to the first bind variable,
             etc.. It is legal to provide less values than the statement has bound
             variables. In that case, the remaining variable need to be bound before
             execution. If more values than variables are provided however, an
             IllegalArgumentException will be raised. </param>
            <returns>this bound statement. </returns>
        </member>
        <member name="M:Cassandra.Statement.SetAutoPage(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Cassandra.Statement.SetPagingState(System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:Cassandra.Statement.SetConsistencyLevel(System.Nullable{Cassandra.ConsistencyLevel})">
            <inheritdoc />
        </member>
        <member name="M:Cassandra.Statement.SetSerialConsistencyLevel(Cassandra.ConsistencyLevel)">
            <inheritdoc />
        </member>
        <member name="M:Cassandra.Statement.SetTimestamp(System.DateTimeOffset)">
            <inheritdoc />
        </member>
        <member name="M:Cassandra.Statement.EnableTracing(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Cassandra.Statement.DisableTracing">
            <inheritdoc />
        </member>
        <member name="M:Cassandra.Statement.SetRetryPolicy(Cassandra.IRetryPolicy)">
            <inheritdoc />
        </member>
        <member name="M:Cassandra.Statement.SetPageSize(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Cassandra.Statement.SetOutgoingPayload(System.Collections.Generic.IDictionary{System.String,System.Byte[]})">
            <inheritdoc />
        </member>
        <member name="P:Cassandra.Statement.SkipMetadata">
            <inheritdoc />
        </member>
        <member name="P:Cassandra.Statement.ConsistencyLevel">
            <inheritdoc />
        </member>
        <member name="P:Cassandra.Statement.SerialConsistencyLevel">
            <summary>
            Gets the serial consistency level for this query.
            </summary>        
        </member>
        <member name="P:Cassandra.Statement.PageSize">
            <inheritdoc />
        </member>
        <member name="P:Cassandra.Statement.IsTracing">
            <inheritdoc />
        </member>
        <member name="P:Cassandra.Statement.RetryPolicy">
            <inheritdoc />
        </member>
        <member name="P:Cassandra.Statement.PagingState">
            <inheritdoc />
        </member>
        <member name="P:Cassandra.Statement.Timestamp">
            <inheritdoc />
        </member>
        <member name="P:Cassandra.Statement.AutoPage">
            <inheritdoc />
        </member>
        <member name="P:Cassandra.Statement.OutgoingPayload">
            <inheritdoc />
        </member>
        <member name="P:Cassandra.Statement.RoutingKey">
            <inheritdoc />
        </member>
        <member name="P:Cassandra.Statement.ProtocolVersion">
            <summary>
            Gets or sets the protocol version used for Routing Key parts encoding
            </summary>
        </member>
        <member name="T:Cassandra.Data.Linq.ClusteringKeyAttribute">
            <summary>
            Indicates that the property or field is part of the Clustering Key
            </summary>
        </member>
        <member name="M:Cassandra.Data.Linq.ClusteringKeyAttribute.#ctor(System.Int32,System.String)">
            <summary>
            Sets the clustering key and optionally a clustering order for it.
            </summary>
            <param name="index">Index of the clustering key, relative to the other clustering keys</param>
            <param name="order">Use "DESC" for descending order and "ASC" for ascending order.</param>
        </member>
        <member name="P:Cassandra.Data.Linq.ClusteringKeyAttribute.ClusteringOrder">
            <summary>
            Gets or sets the string representation of the clustering order
            </summary>
        </member>
        <member name="P:Cassandra.Data.Linq.ClusteringKeyAttribute.ClusteringSortOrder">
            <summary>
            Gets or sets the clustering order
            </summary>
        </member>
        <member name="P:Cassandra.Data.Linq.ClusteringKeyAttribute.Index">
            <summary>
            Index of the clustering key, relative to the other clustering keys
            </summary>
        </member>
        <member name="P:Cassandra.Data.Linq.ClusteringKeyAttribute.Name">
            <summary>
            Name of the column
            </summary>
        </member>
        <member name="T:Cassandra.Data.Linq.CqlConditionalCommand`1">
            <summary>
            Represents an INSERT/UPDATE/DELETE command with support for Lightweight transactions.
            </summary>
        </member>
        <member name="T:Cassandra.SimpleStatement">
            <summary>
             A simple <c>Statement</c> implementation built directly from a query
             string.
            </summary>
        </member>
        <member name="T:Cassandra.RegularStatement">
            <summary>
             A non-prepared CQL statement.
             This class represents a query string along with query options. This class can be extended but
             <see cref="T:Cassandra.SimpleStatement"/> is provided to build a <see cref="T:Cassandra.IStatement"/>
             directly from its query string.
            </summary>
        </member>
        <member name="P:Cassandra.RegularStatement.QueryValueNames">
            <summary>
            Names of the parameters
            </summary>
        </member>
        <member name="P:Cassandra.RegularStatement.QueryString">
            <summary>
             Gets the query string for this statement.
            </summary>
        </member>
        <member name="M:Cassandra.SimpleStatement.#ctor(System.String)">
            <summary>
             Creates a new instance of <c>SimpleStatement</c> with the provided CQL query.
            </summary>
            <param name="query">The cql query string.</param>
        </member>
        <member name="M:Cassandra.SimpleStatement.#ctor(System.String,System.Object[])">
            <summary>
             Creates a new instance of <c>SimpleStatement</c> with the provided CQL query and values provided.
            </summary>
            <param name="query">The cql query string</param>
            <param name="values">Parameter values required for the execution of <c>query</c></param>
        </member>
        <member name="M:Cassandra.SimpleStatement.SetRoutingKey(Cassandra.RoutingKey[])">
            <summary>
             Set the routing key for this query. <p> This method allows to manually
             provide a routing key for this query. It is thus optional since the routing
             key is only an hint for token aware load balancing policy but is never
             mandatory. </p><p> If the partition key for the query is composite, use the
             <link>#setRoutingKey(ByteBuffer...)</link> method instead to build the
             routing key.</p>
            </summary>
            <param name="routingKeyComponents"> the raw (binary) values to compose to
             obtain the routing key.
             </param>
            <returns>this <c>SimpleStatement</c> object.  <see>Query#getRoutingKey</see></returns>
        </member>
        <member name="M:Cassandra.SimpleStatement.SetRoutingValues(System.Object[])">
            <summary>
            Sets the partition key values in order to route the query to the correct replicas.
            <para>For simple partition keys, set the partition key value.</para>
            <para>For composite partition keys, set the multiple the partition key values in correct order.</para>
            </summary>
        </member>
        <member name="M:Cassandra.SimpleStatement.Bind(System.Object[])">
            <summary>
            Sets the parameter values for the query.
            <para>
            The same amount of values must be provided as parameter markers in the query.
            </para>
            <para>
            Specify the parameter values by the position of the markers in the query or by name, 
            using a single instance of an anonymous type, with property names as parameter names.
            </para>
            </summary>
        </member>
        <member name="P:Cassandra.SimpleStatement.QueryString">
            <summary>
             Gets the query string.
            </summary>
        </member>
        <member name="P:Cassandra.SimpleStatement.RoutingKey">
            <summary>
            Gets the routing key for the query.
            <para>
            Routing key can be provided using the <see cref="M:Cassandra.SimpleStatement.SetRoutingValues(System.Object[])"/> method.
            </para>
            </summary>
        </member>
        <member name="M:Cassandra.Data.Linq.CqlCommand.BeginExecute(System.AsyncCallback,System.Object)">
            <summary>
            Starts executing the statement async
            </summary>
        </member>
        <member name="M:Cassandra.Data.Linq.CqlCommand.EndExecute(System.IAsyncResult)">
            <summary>
            Starts the async executing of the statement
            </summary>
        </member>
        <member name="P:Cassandra.Data.Linq.CqlCommand.QueryString">
            <inheritdoc />
        </member>
        <member name="P:Cassandra.Data.Linq.CqlCommand.QueryValues">
            <inheritdoc />
        </member>
        <member name="M:Cassandra.Data.Linq.CqlConditionalCommand`1.ExecuteAsync">
            <summary>
            Asynchronously executes a conditional query and returns information whether it was applied.
            </summary>
        </member>
        <member name="M:Cassandra.Data.Linq.CqlConditionalCommand`1.Execute">
            <summary>
            Executes a conditional query and returns information whether it was applied.
            </summary>
            <returns>An instance of AppliedInfo{TEntity}</returns>
        </member>
        <member name="M:Cassandra.Data.Linq.CqlConditionalCommand`1.ToString">
            <summary>
            Generates and returns the Cql query
            </summary>
        </member>
        <member name="T:Cassandra.Data.Linq.CounterAttribute">
            <summary>
            Indicates that the property or field is a counter column
            </summary>
        </member>
        <member name="F:Cassandra.Data.Linq.CqlExpressionVisitor._currentCondition">
            <summary>
            The active condition (WHERE or UPDATE IF conditions)
            </summary>
        </member>
        <member name="F:Cassandra.Data.Linq.CqlExpressionVisitor._whereClause">
            <summary>
            Represents a pair composed by cql string and the parameters for the WHERE clause
            </summary>
        </member>
        <member name="F:Cassandra.Data.Linq.CqlExpressionVisitor._updateIfClause">
            <summary>
            Represents a pair composed by cql string and the parameters for the WHERE clause
            </summary>
        </member>
        <member name="M:Cassandra.Data.Linq.CqlExpressionVisitor.GetSelect(System.Object[]@)">
            <summary>
            Gets a cql SELECT statement based on the current state
            </summary>
        </member>
        <member name="M:Cassandra.Data.Linq.CqlExpressionVisitor.Escape(System.String)">
            <summary>
            Escapes an identifier if necessary
            </summary>
        </member>
        <member name="M:Cassandra.Data.Linq.CqlExpressionVisitor.GetDelete(System.Object[]@,System.Nullable{System.DateTimeOffset},System.Boolean)">
            <summary>
            Gets a cql DELETE statement based on the current state
            </summary>
        </member>
        <member name="M:Cassandra.Data.Linq.CqlExpressionVisitor.GetUpdate(System.Object[]@,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset})">
            <summary>
            Gets a cql UPDATE statement based on the current state
            </summary>
        </member>
        <member name="M:Cassandra.Data.Linq.CqlExpressionVisitor.AddProjection(System.Linq.Expressions.Expression,System.String)">
            <summary>
            Tries to evaluate the current expression and add it as a projection
            </summary>
        </member>
        <member name="T:Cassandra.Data.Linq.CqlFunction">
            <summary>
            Represents a set of functions that are defined at CQL level
            </summary>
        </member>
        <member name="M:Cassandra.Data.Linq.CqlFunction.#ctor">
            <summary>
            Only suitable for Linq Expression generations
            </summary>
        </member>
        <member name="M:Cassandra.Data.Linq.CqlFunction.MaxTimeUuid(System.DateTimeOffset)">
            <summary>
            CQL function maxTimeuuid() that returns biggest timeuuid value having the provided timestamp
            </summary>
        </member>
        <member name="M:Cassandra.Data.Linq.CqlFunction.MinTimeUuid(System.DateTimeOffset)">
            <summary>
            CQL function maxTimeuuid() that returns smallest timeuuid value having the provided timestamp
            </summary>
        </member>
        <member name="M:Cassandra.Data.Linq.CqlFunction.Token(System.Object)">
            <summary>
            CQL function token
            </summary>
        </member>
        <member name="M:Cassandra.Data.Linq.CqlFunction.Token(System.Object,System.Object)">
            <summary>
            CQL function token
            </summary>
        </member>
        <member name="M:Cassandra.Data.Linq.CqlFunction.Token(System.Object,System.Object,System.Object)">
            <summary>
            CQL function token
            </summary>
        </member>
        <member name="M:Cassandra.Data.Linq.CqlFunction.Token(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            CQL function token
            </summary>
        </member>
        <member name="M:Cassandra.Data.Linq.CqlOperator.Append``1(``0)">
            <summary>
            Represents the CQL add assign (+=) operator for collections
            </summary>
        </member>
        <member name="M:Cassandra.Data.Linq.CqlOperator.Prepend``1(``0)">
            <summary>
            Represents the CQL prepend operator for collections (col1 = ? + col1)
            </summary>
        </member>
        <member name="M:Cassandra.Data.Linq.CqlOperator.SubstractAssign``1(``0)">
            <summary>
            Represents the CQL remove item operator for collections (col1 = col1 - ?)
            </summary>
        </member>
        <member name="T:Cassandra.Data.Linq.CqlQuery`1">
            <summary>
            Represents a Linq query that gets evaluated as a CQL statement.
            </summary>
        </member>
        <member name="M:Cassandra.Data.Linq.CqlQueryBase`1.ExecuteAsync">
            <summary>
            Evaluates the Linq query, executes asynchronously the cql statement and adapts the results.
            </summary>
        </member>
        <member name="M:Cassandra.Data.Linq.CqlQueryBase`1.Execute">
            <summary>
            Evaluates the Linq query, executes the cql statement and adapts the results.
            </summary>
        </member>
        <member name="P:Cassandra.Data.Linq.CqlQueryBase`1.PocoData">
            <summary>
            The information associated with the TEntity
            </summary>
        </member>
        <member name="M:Cassandra.Data.Linq.CqlQuery`1.SetPageSize(System.Int32)">
            <summary>
            Sets the page size for this query.
            The page size controls how much resulting rows will be retrieved
            simultaneously (the goal being to avoid loading too much results
            in memory for queries yielding large results). Please note that
            while value as low as 1 can be used, it is highly discouraged to
            use such a low value in practice as it will yield very poor
            performance. If in doubt, leaving the default is probably a good
            idea.
            </summary>
            <returns>This instance</returns>
        </member>
        <member name="M:Cassandra.Data.Linq.CqlQuery`1.SetPagingState(System.Byte[])">
            <summary>
            Sets the paging state, a token representing the current page state of query used to continue paging by retrieving the following result page.
            Setting the paging state will disable automatic paging.
            </summary>
            <returns>This instance</returns>
        </member>
        <member name="M:Cassandra.Data.Linq.CqlQuery`1.ExecutePagedAsync">
            <summary>
            Asynchronously executes the query and returns a task of a page of results
            </summary>
        </member>
        <member name="M:Cassandra.Data.Linq.CqlQuery`1.ExecutePaged">
            <summary>
            Executes the query and returns a page of results
            </summary>
        </member>
        <member name="M:Cassandra.Data.Linq.CqlQuery`1.ToString">
            <summary>
            Generates and returns cql query for this instance 
            </summary>
        </member>
        <member name="P:Cassandra.Data.Linq.CqlQuery`1.Provider">
            <summary>
            IQueryable.Provider implementation
            </summary>
        </member>
        <member name="M:Cassandra.Data.Linq.CqlQueryExtensions.Select``2(Cassandra.Data.Linq.CqlQuery{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Projects each element of a sequence into a new form.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <typeparam name="TResult">The type of the value returned by selector.</typeparam>
            <param name="source">A CqlQuery&lt;TSource&gt; which after execution returns a sequence of values to invoke a transform function on.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>a CqlQuery&lt;TSource&gt; which after execution will return an IEnumerable&lt;TSource&gt; whose elements
            are the result of invoking the transform function on each element of source.
            To execute this CqlQuery use <c>Execute()</c> method.</returns>
        </member>
        <member name="M:Cassandra.Data.Linq.CqlQueryExtensions.Where``1(Cassandra.Data.Linq.CqlQuery{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
             Returns a CqlQuery which after execution returns filtered sequence of values based on a predicate.
             To execute this CqlQuery use <c>Execute()</c> method.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The CqlQuery&lt;TSource&gt; to filter.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <returns>a CqlQuery&lt;TSource&gt; which after execution will return an IEnumerable&lt;TSource&gt;
            that contains elements from the input sequence that satisfy the condition.</returns>
        </member>
        <member name="M:Cassandra.Data.Linq.CqlQueryExtensions.Count``1(Cassandra.Data.Linq.CqlQuery{``0})">
            <summary>
            Returns the number of rows matching the query.
            To execute this CqlScalar use <c>Execute()</c> method.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The CqlQuery&lt;TSource&gt; to return the first element of.</param>
            <returns>A single result: the number of rows matching the query.</returns>
        </member>
        <member name="M:Cassandra.Data.Linq.CqlQueryExtensions.First``1(Cassandra.Data.Linq.Table{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Returns a CqlQuery which after execution returns the first element in a sequence that satisfies a specified condition.
            To execute this CqlQuery use <c>Execute()</c> method.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The Table&lt;TSource&gt; to return the first element of.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <returns>a CqlQuery&lt;TSource&gt; which after execution will return first element in the sequence
            that passes the test in the specified predicate function.</returns>
        </member>
        <member name="M:Cassandra.Data.Linq.CqlQueryExtensions.FirstOrDefault``1(Cassandra.Data.Linq.Table{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Returns a CqlQuery which after execution will return the first element of the sequence that satisfies a condition
            or a default value if no such element is found.
            To execute this CqlQuery use <c>Execute()</c> method.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The Table&lt;TSource&gt;  to return the first element of.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <returns>a CqlQuery&lt;TSource&gt; which after execution will return <c>default(TSource)</c> if source is empty
            or if no element passes the test specified by predicate,
            otherwise the first element in source that passes the test specified by predicate.</returns>
        </member>
        <member name="M:Cassandra.Data.Linq.CqlQueryExtensions.First``1(Cassandra.Data.Linq.CqlQuery{``0})">
            <summary>
            Returns a CqlQuery which after execution will return the first element in a sequence.
            To execute this CqlQuery use <c>Execute()</c> method.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The CqlQuery&lt;TSource&gt; to return the first element of.</param>        
            <returns>a CqlQuery&lt;TSource&gt; which after execution will return first element in the sequence.</returns>
        </member>
        <member name="M:Cassandra.Data.Linq.CqlQueryExtensions.FirstOrDefault``1(Cassandra.Data.Linq.CqlQuery{``0})">
            <summary>
            Returns a CqlQuery which after execution will return the first element of a sequence,
            or a default value if the sequence contains no elements.
            To execute this CqlQuery use <c>Execute()</c> method.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The CqlQuery&lt;TSource&gt; to return the first element of.</param>        
            <returns><c>a CqlQuery&lt;TSource&gt; which after execution will return default(TSource)</c> if source is empty,
            otherwise the first element in source.</returns>
        </member>
        <member name="M:Cassandra.Data.Linq.CqlQueryExtensions.Delete``1(Cassandra.Data.Linq.CqlQuery{``0})">
            <summary>
            Returns a representation of a DELETE cql statement
            </summary>
        </member>
        <member name="M:Cassandra.Data.Linq.CqlQueryExtensions.DeleteIf``1(Cassandra.Data.Linq.CqlQuery{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Returns a representation of a DELETE ... IF ... cql statement, for Lightweight Transactions support
            </summary>
        </member>
        <member name="M:Cassandra.Data.Linq.CqlQueryExtensions.Update``1(Cassandra.Data.Linq.CqlQuery{``0})">
            <summary>
            Returns a representation of a UPDATE cql statement
            </summary>
        </member>
        <member name="M:Cassandra.Data.Linq.CqlQueryExtensions.UpdateIf``1(Cassandra.Data.Linq.CqlQuery{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Returns a representation of a UPDATE ... IF ... cql statement, for Lightweight Transactions support
            </summary>
        </member>
        <member name="M:Cassandra.Data.Linq.CqlQueryExtensions.Take``1(Cassandra.Data.Linq.CqlQuery{``0},System.Int32)">
            <summary>
            Returns a CqlQuery which after execution will return IEnumerable&lt;TSource&gt;
            with specified number of contiguous elements from the start of a sequence.
            To execute this CqlQuery use <c>Execute()</c> method.
            </summary>        
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The CqlQuery&lt;TSource&gt; to return the first element of.</param>
            <param name="count">The number of elements to return.</param>
            <returns>a CqlQuery&lt;TSource&gt; which after execution will return IEnumerable&lt;TSource&gt;
            with specified number of contiguous elements from the start of a sequence.</returns>
        </member>
        <member name="M:Cassandra.Data.Linq.CqlQueryExtensions.AllowFiltering``1(Cassandra.Data.Linq.CqlQuery{``0})">
            <summary>
            The ALLOW FILTERING option allows to explicitly allow queries that require filtering. 
            Please note that a query using ALLOW FILTERING may thus have unpredictable performance (for the definition above), i.e. even a query that selects a handful of records may exhibit performance that depends on the total amount of data stored in the cluster.
            </summary>
        </member>
        <member name="M:Cassandra.Data.Linq.CqlQueryExtensions.OrderBy``2(Cassandra.Data.Linq.CqlQuery{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Sorts the elements, which are returned from CqlQuery, in ascending order according to a key.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <typeparam name="TKey">The type of the key returned by keySelector.</typeparam>
            <param name="source">A sequence of values to order, returned from CqlQuery&lt;TSource&gt;.</param>
            <param name="keySelector">A function to extract a key from an element.</param>
            <returns>a CqlQuery&lt;TSource&gt; which after execution returns an IEnumerable&lt;TSource&gt; sorted in ascending manner according to a key.</returns>
        </member>
        <member name="M:Cassandra.Data.Linq.CqlQueryExtensions.OrderByDescending``2(Cassandra.Data.Linq.CqlQuery{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Sorts the elements, which are returned from CqlQuery, in ascending order according to a key.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <typeparam name="TKey">The type of the key returned by keySelector.</typeparam>
            <param name="source">A sequence of values to order, returned from CqlQuery&lt;TSource&gt;.</param>
            <param name="func">A function to extract a key from an element.</param>
            <returns>a CqlQuery&lt;TSource&gt; which after execution returns an IEnumerable&lt;TSource&gt; sorted in descending manner according to a key.</returns>
        </member>
        <member name="M:Cassandra.Data.Linq.CqlQueryExtensions.ThenBy``2(Cassandra.Data.Linq.CqlQuery{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Sorts the elements, which are returned from CqlQuery, in ascending order according to a key.
            </summary>
        </member>
        <member name="M:Cassandra.Data.Linq.CqlQueryExtensions.ThenByDescending``2(Cassandra.Data.Linq.CqlQuery{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Sorts the elements, which are returned from CqlQuery, in descending order according to a key.
            </summary>
        </member>
        <member name="M:Cassandra.Data.Linq.CqlQuerySingleElement`1.Execute">
            <summary>
            Evaluates the Linq query, executes the cql statement and returns the first result.
            </summary>
        </member>
        <member name="F:Cassandra.Data.Linq.CqlQueryTools.HexStringTable">
            <summary>
            Hex string lookup table.
            </summary>
        </member>
        <member name="M:Cassandra.Data.Linq.CqlQueryTools.ToHex(System.Byte[])">
            <summary>
            Returns a hex string representation of an array of bytes.
            http://blogs.msdn.com/b/blambert/archive/2009/02/22/blambert-codesnip-fast-byte-array-to-hex-string-conversion.aspx
            </summary>
            <param name="value">The array of bytes.</param>
            <returns>A hex string representation of the array of bytes.</returns>
        </member>
        <member name="T:Cassandra.Data.Linq.CqlScalar`1">
            <summary>
            Represents an IQueryable that returns the first column of the first rows
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="T:Cassandra.Data.Linq.IgnoreAttribute">
            <summary>
            Specifies that the field or property should be ignored by Linq
            </summary>
        </member>
        <member name="P:Cassandra.Data.Linq.ITable.Name">
            <summary>
            Gets the table name in Cassandra
            </summary>
        </member>
        <member name="P:Cassandra.Data.Linq.ITable.KeyspaceName">
            <summary>
            Gets the name of the keyspace used. If null, it uses the active session keyspace.
            </summary>
        </member>
        <member name="T:Cassandra.Mapping.IColumnDefinition">
            <summary>
            A definition for how a property/field maps to a POCO.
            </summary>
        </member>
        <member name="P:Cassandra.Mapping.IColumnDefinition.MemberInfo">
            <summary>
            The MemberInfo for the property or field.
            </summary>
        </member>
        <member name="P:Cassandra.Mapping.IColumnDefinition.MemberInfoType">
            <summary>
            The Type of the property or field (i.e. FieldInfo.FieldType or PropertyInfo.PropertyType).
            </summary>
        </member>
        <member name="P:Cassandra.Mapping.IColumnDefinition.ColumnName">
            <summary>
            The name of the column in the database that this property/field maps to.
            </summary>
        </member>
        <member name="P:Cassandra.Mapping.IColumnDefinition.ColumnType">
            <summary>
            The data type of the column in C* for inserting/updating data.
            </summary>
        </member>
        <member name="P:Cassandra.Mapping.IColumnDefinition.Ignore">
            <summary>
            Whether the property/field should be ignored when mapping.
            </summary>
        </member>
        <member name="P:Cassandra.Mapping.IColumnDefinition.IsExplicitlyDefined">
            <summary>
            Whether or not this column has been explicitly defined (for use when TypeDefinition.ExplicitColumns is true).
            </summary>
        </member>
        <member name="P:Cassandra.Mapping.IColumnDefinition.SecondaryIndex">
            <summary>
            Determines if there is a secondary index defined for this column
            </summary>
        </member>
        <member name="P:Cassandra.Mapping.IColumnDefinition.IsCounter">
            <summary>
            Determines if this column is a counter column
            </summary>
        </member>
        <member name="P:Cassandra.Mapping.IColumnDefinition.IsStatic">
            <summary>
            Determines if this column is a static column
            </summary>
        </member>
        <member name="M:Cassandra.Data.Linq.LinqAttributeBasedColumnDefinition.#ctor(System.Reflection.FieldInfo)">
            <summary>
            Creates a new column definition for the field specified using any attributes on the field to determine mapping configuration.
            </summary>
        </member>
        <member name="M:Cassandra.Data.Linq.LinqAttributeBasedColumnDefinition.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            Creates a new column definition for the property specified using any attributes on the property to determine mapping configuration.
            </summary>
        </member>
        <member name="M:Cassandra.Data.Linq.LinqAttributeBasedColumnDefinition.HasAttribute(System.Reflection.MemberInfo,System.Type)">
            <summary>
            Determines if the member has an attribute applied
            </summary>
        </member>
        <member name="T:Cassandra.Data.Linq.LinqAttributeBasedTypeDefinition">
            <summary>
            A type definition that uses Linq attributes on the class to determine its settings.
            It uses Linq default backward-compatible settings (like case sensitivity)
            </summary>
        </member>
        <member name="T:Cassandra.Mapping.ITypeDefinition">
            <summary>
            A definition for how to map a POCO.
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.ITypeDefinition.GetColumnDefinition(System.Reflection.FieldInfo)">
            <summary>
            Gets a column definition for the given field on the POCO.
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.ITypeDefinition.GetColumnDefinition(System.Reflection.PropertyInfo)">
            <summary>
            Gets a column definition for the given property on the POCO.
            </summary>
        </member>
        <member name="P:Cassandra.Mapping.ITypeDefinition.PocoType">
            <summary>
            The Type of the POCO.
            </summary>
        </member>
        <member name="P:Cassandra.Mapping.ITypeDefinition.TableName">
            <summary>
            The name of the table to map the POCO to.
            </summary>
        </member>
        <member name="P:Cassandra.Mapping.ITypeDefinition.KeyspaceName">
            <summary>
            The name of the keyspace where the table is defined.
            When the keyspace name is not null, the table name for the query generated will be fully qualified (ie: keyspace.tablename)
            </summary>
        </member>
        <member name="P:Cassandra.Mapping.ITypeDefinition.ExplicitColumns">
            <summary>
            Whether or not this POCO should only have columns explicitly defined mapped.
            </summary>
        </member>
        <member name="P:Cassandra.Mapping.ITypeDefinition.PartitionKeys">
            <summary>
            Gets the partition key columns of the table.
            </summary>
        </member>
        <member name="P:Cassandra.Mapping.ITypeDefinition.ClusteringKeys">
            <summary>
            Gets the clustering key columns of the table.
            </summary>
        </member>
        <member name="P:Cassandra.Mapping.ITypeDefinition.CaseSensitive">
            <summary>
            Determines if the queries generated using this definition should be case-sensitive
            </summary>
        </member>
        <member name="P:Cassandra.Mapping.ITypeDefinition.CompactStorage">
            <summary>
            Determines if the table is declared with COMPACT STORAGE
            </summary>
        </member>
        <member name="P:Cassandra.Mapping.ITypeDefinition.AllowFiltering">
            <summary>
            Determines that all queries generated for this table can be made allowing server side filtering
            </summary>
        </member>
        <member name="T:Cassandra.Data.Linq.PartitionKeyAttribute">
            <summary>
            Indicates that the property or field is part of the Partition Key
            </summary>
        </member>
        <member name="T:Cassandra.Data.Linq.SecondaryIndexAttribute">
            <summary>
            Determines that there is a secondary index defined for the column
            </summary>
        </member>
        <member name="M:Cassandra.Data.Linq.SessionExtensions.GetTable``1(Cassandra.ISession,System.String,System.String)">
            <summary>
            <para>Extension method used for backward-compatibility, use <see cref="M:Cassandra.Data.Linq.Table`1.#ctor(Cassandra.ISession)"/> constructor instead.</para>
            <para>Creates a new instance of the Linq IQueryProvider that represents a table in Cassandra using the mapping configuration provided.</para>
            <para>Fluent configuration or attributes can be used to define mapping information.</para>
            </summary>
            <remarks>
            In case no mapping information is defined, <strong>case-sensitive</strong> class and method names will be used.
            </remarks>
            <typeparam name="TEntity">The object type</typeparam>
            <param name="session">The session to be used to execute the statements</param>
            <param name="tableName">The table name in Cassandra. If null, it will be retrieved from the TEntity information.</param>
            <param name="keyspaceName">The keyspace in which the table exists. If null, the current session keyspace will be used.</param>
            <returns></returns>
        </member>
        <member name="T:Cassandra.Data.Linq.StaticColumnAttribute">
            <summary>
            Indicates that the property or field is a static column
            </summary>
        </member>
        <member name="T:Cassandra.Data.Linq.Table`1">
            <summary>
            A Linq IQueryProvider that represents a table in Cassandra
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="M:Cassandra.Data.Linq.Table`1.#ctor(Cassandra.ISession,Cassandra.Mapping.MappingConfiguration,System.String,System.String)">
            <summary>
            <para>Creates a new instance of the Linq IQueryProvider that represents a table in Cassandra using the mapping configuration provided.</para>
            <para>Use this constructor if you want to use a different table and keyspace names than the ones defined in the mapping configuration.</para>
            <para>Fluent configuration or attributes can be used to define mapping information.</para>
            </summary>
            <remarks>
            In case no mapping information is defined, case-insensitive class and method names will be used.
            </remarks>
            <param name="session">Session instance to be used to execute the statements</param>
            <param name="config">Mapping configuration</param>
            <param name="tableName">Name of the table</param>
            <param name="keyspaceName">Name of the keyspace were the table was created.</param>
        </member>
        <member name="M:Cassandra.Data.Linq.Table`1.#ctor(Cassandra.ISession,Cassandra.Mapping.MappingConfiguration,System.String)">
            <summary>
            <para>Creates a new instance of the Linq IQueryProvider that represents a table in Cassandra using the mapping configuration provided.</para>
            <para>Use this constructor if you want to use a different table name than the one defined in the mapping configuration.</para>
            <para>Fluent configuration or attributes can be used to define mapping information.</para>
            </summary>
            <remarks>
            In case no mapping information is defined, case-insensitive class and method names will be used.
            </remarks>
            <param name="session">Session instance to be used to execute the statements</param>
            <param name="config">Mapping configuration</param>
            <param name="tableName">Name of the table</param>
        </member>
        <member name="M:Cassandra.Data.Linq.Table`1.#ctor(Cassandra.ISession,Cassandra.Mapping.MappingConfiguration)">
            <summary>
            <para>Creates a new instance of the Linq IQueryProvider that represents a table in Cassandra using the mapping configuration provided.</para>
            <para>Fluent configuration or attributes can be used to define mapping information.</para>
            </summary>
            <remarks>
            In case no mapping information is defined, case-insensitive class and method names will be used.
            </remarks>
            <param name="session">Session instance to be used to execute the statements</param>
            <param name="config">Mapping configuration</param>
        </member>
        <member name="M:Cassandra.Data.Linq.Table`1.#ctor(Cassandra.ISession)">
            <summary>
            Creates a new instance of the Linq IQueryProvider that represents a table in Cassandra using <see cref="P:Cassandra.Mapping.MappingConfiguration.Global"/> configuration.
            </summary>
            <param name="session">Session instance to be used to execute the statements</param>
        </member>
        <member name="M:Cassandra.Data.Linq.Table`1.CreateQuery``1(System.Linq.Expressions.Expression)">
            <summary>
            Creates a <see cref="T:Cassandra.Data.Linq.CqlQuery`1"/>
            </summary>
        </member>
        <member name="M:Cassandra.Data.Linq.Table`1.Insert(`0)">
            <summary>
            Returns a CqlInsert command to be executed against a table. To execute this command, use Execute() method.
            </summary>
        </member>
        <member name="P:Cassandra.Data.Linq.Table`1.Name">
            <summary>
            Gets the name of the Table in Cassandra
            </summary>
        </member>
        <member name="P:Cassandra.Data.Linq.Table`1.KeyspaceName">
            <summary>
            Gets the name of the keyspace used. If null, it uses the active session keyspace.
            </summary>
        </member>
        <member name="T:Cassandra.Data.Linq.TableAttribute">
            <summary>
            Specifies table information for a given class
            </summary>
        </member>
        <member name="M:Cassandra.Data.Linq.TableAttribute.#ctor">
            <summary>
            Specifies table information for a given class
            </summary>
        </member>
        <member name="M:Cassandra.Data.Linq.TableAttribute.#ctor(System.String,System.Boolean)">
            <summary>
            Specifies table information for a given class
            </summary>
            <param name="name">Name of the table</param>
            <param name="caseSensitive">Determines if the table and column names are defined as case sensitive</param>
        </member>
        <member name="P:Cassandra.Data.Linq.TableAttribute.Name">
            <summary>
            Gets or sets the table name in Cassandra
            </summary>
        </member>
        <member name="P:Cassandra.Data.Linq.TableAttribute.CaseSensitive">
            <summary>
            Determines if the table and column names are defined as case sensitive (default to true).
            </summary>
        </member>
        <member name="T:Cassandra.Data.Linq.VisitingParam`1">
            <summary>
            Represents nested states
            </summary>
        </member>
        <member name="T:Cassandra.DseAuthProvider">
            <summary>
             AuthProvider which supplies authenticator instances for clients to connect to
             DSE clusters secured with Kerberos. See <link>KerberosAuthenticator</link>
             for how to configure client side Kerberos options. To connect to clusters
             using internal authentication, use the standard method for setting
             credentials. eg: <pre> Cluster cluster = Cluster.builder()
             .addContactPoint(hostname) .withCredentials("username", "password") .build();
             </pre>
            </summary>
        </member>
        <member name="T:Cassandra.IAuthProvider">
            <summary>
             Provides <link>Authenticator</link> instances for use when connecting to
             Cassandra nodes. See <link>PlainTextAuthProvider</link> and
             <link>SimpleAuthenticator</link> for an implementation which uses SASL PLAIN
             mechanism to authenticate using username/password strings
            </summary>
        </member>
        <member name="M:Cassandra.IAuthProvider.NewAuthenticator(System.Net.IPEndPoint)">
            <summary>
             The <c>Authenticator</c> to use when connecting to <c>host</c>
            </summary>
            <param name="host"> the Cassandra host to connect to. </param>
            <returns>The authentication implmentation to use.</returns>
        </member>
        <member name="T:Cassandra.KerberosAuthenticator">
            <summary>
             Responsible for authenticating with secured DSE services using Kerberos over
             SSPI
            </summary>
        </member>
        <member name="T:Cassandra.IAuthenticator">
            <summary>
             Handles SASL authentication with Cassandra servers. A server which requires
             authentication responds to a startup message with an challenge in the form of
             an <c>AuthenticateMessage</c>. Authenticator implementations should be
             able to respond to that challenge and perform whatever authentication
             negotiation is required by the server. The exact nature of that negotiation
             is specific to the configuration of the server.
            </summary>
        </member>
        <member name="M:Cassandra.IAuthenticator.InitialResponse">
            <summary>
             Obtain an initial response token for initializing the SASL handshake
            </summary>
            
            <returns>the initial response to send to the server, may be null</returns>
        </member>
        <member name="M:Cassandra.IAuthenticator.EvaluateChallenge(System.Byte[])">
            <summary>
             Evaluate a challenge received from the Server. Generally, this method should
             return null when authentication is complete from the client perspective
            </summary>
            <param name="challenge"> the server's SASL challenge' </param>
            
            <returns>updated SASL token, may be null to indicate the client requires no
             further action</returns>
        </member>
        <member name="T:Cassandra.FunctionFailureException">
            <summary>
            Specifies a User defined function execution failure.
            </summary>
        </member>
        <member name="T:Cassandra.DriverException">
            <summary>
            Top level class for exceptions thrown by the driver.
            </summary>
        </member>
        <member name="P:Cassandra.FunctionFailureException.Keyspace">
            <summary>
            Keyspace where the function is defined
            </summary>
        </member>
        <member name="P:Cassandra.FunctionFailureException.Name">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="P:Cassandra.FunctionFailureException.ArgumentTypes">
            <summary>
            Name types of the arguments
            </summary>
        </member>
        <member name="T:Cassandra.ReadFailureException">
            <summary>
             A Cassandra failure (non-timeout) during a read query.
            </summary>
        </member>
        <member name="T:Cassandra.QueryExecutionException">
            <summary>
             Exception related to the execution of a query. This correspond to the
             exception that Cassandra throw when a (valid) query cannot be executed
             (TimeoutException, UnavailableException, ...).
            </summary>
        </member>
        <member name="T:Cassandra.QueryValidationException">
            <summary>
             An exception indicating that a query cannot be executed because it is
             incorrect syntactically, invalid, unauthorized or any other reason.
            </summary>
        </member>
        <member name="P:Cassandra.ReadFailureException.ConsistencyLevel">
            <summary>
             Gets the consistency level of the operation
            </summary>
        </member>
        <member name="P:Cassandra.ReadFailureException.ReceivedAcknowledgements">
            <summary>
            Gets the number of replica that had acknowledged/responded to the operation
            </summary>
        </member>
        <member name="P:Cassandra.ReadFailureException.RequiredAcknowledgements">
            <summary>
             Gets the minimum number of replica acknowledgements/responses that were required to fulfill the operation. 
            </summary>
        </member>
        <member name="P:Cassandra.ReadFailureException.Failures">
            <summary>
            Gets the number of nodes that experienced a failure while executing the request.
            </summary>
        </member>
        <member name="T:Cassandra.RequestInvalidException">
            <summary>
            Exception that indicates that the request is not valid.
            </summary>
        </member>
        <member name="T:Cassandra.WriteFailureException">
            <summary>
             A Cassandra failure (non-timeout) during a write query.
            </summary>
        </member>
        <member name="P:Cassandra.WriteFailureException.WriteType">
            <summary>
            Gets the type of the write (SIMPLE / BATCH / ...)
            </summary>
        </member>
        <member name="P:Cassandra.WriteFailureException.ConsistencyLevel">
            <summary>
             Gets the consistency level of the operation
            </summary>
        </member>
        <member name="P:Cassandra.WriteFailureException.ReceivedAcknowledgements">
            <summary>
            Gets the number of replica that had acknowledged/responded to the operation
            </summary>
        </member>
        <member name="P:Cassandra.WriteFailureException.RequiredAcknowledgements">
            <summary>
             Gets the minimum number of replica acknowledgements/responses that were required to fulfill the operation. 
            </summary>
        </member>
        <member name="P:Cassandra.WriteFailureException.Failures">
            <summary>
            Gets the number of nodes that experienced a failure while executing the request.
            </summary>
        </member>
        <member name="T:Cassandra.FunctionMetadata">
            <summary>
            Describes a CQL function.
            </summary>
        </member>
        <member name="M:Cassandra.FunctionMetadata.#ctor">
            <summary>
            Creates a new instance of Function metadata.
            </summary>
        </member>
        <member name="M:Cassandra.FunctionMetadata.#ctor(System.String,System.String,System.String[],System.String[],Cassandra.ColumnDesc[],System.String,System.Boolean,System.String,Cassandra.ColumnDesc)">
            <summary>
            Creates a new instance of Function metadata.
            </summary>
        </member>
        <member name="M:Cassandra.FunctionMetadata.Build(Cassandra.Row)">
            <summary>
            Creates a new instance of function metadata based on a schema_function row.
            </summary>
        </member>
        <member name="P:Cassandra.FunctionMetadata.Name">
            <summary>
            Name of the CQL function.
            </summary>
        </member>
        <member name="P:Cassandra.FunctionMetadata.KeyspaceName">
            <summary>
            Name of the keyspace where the CQL function is declared.
            </summary>
        </member>
        <member name="P:Cassandra.FunctionMetadata.Signature">
            <summary>
            Signature of the function.
            </summary>
        </member>
        <member name="P:Cassandra.FunctionMetadata.ArgumentNames">
            <summary>
            List of the function argument names.
            </summary>
        </member>
        <member name="P:Cassandra.FunctionMetadata.ArgumentTypes">
            <summary>
            List of the function argument types.
            </summary>
        </member>
        <member name="P:Cassandra.FunctionMetadata.Body">
            <summary>
            Body of the function.
            </summary>
        </member>
        <member name="P:Cassandra.FunctionMetadata.CalledOnNullInput">
            <summary>
            Determines if the function is called when the input is null.
            </summary>
        </member>
        <member name="P:Cassandra.FunctionMetadata.Language">
            <summary>
            Name of the programming language, for example: java, javascript, ...
            </summary>
        </member>
        <member name="P:Cassandra.FunctionMetadata.ReturnType">
            <summary>
            Type of the return value.
            </summary>
        </member>
        <member name="T:Cassandra.HostConnectionPool">
            <summary>
            Represents a pool of connections to a host
            </summary>
        </member>
        <member name="M:Cassandra.HostConnectionPool.BorrowConnection">
            <summary>
            Gets an open connection from the host pool (creating if necessary).
            It returns null if the load balancing policy didn't allow connections to this host.
            </summary>
        </member>
        <member name="M:Cassandra.HostConnectionPool.CreateConnection">
            <exception cref="T:System.Net.Sockets.SocketException">Throws a SocketException when the connection could not be established with the host</exception>
            <exception cref="T:Cassandra.AuthenticationException"/>
            <exception cref="T:Cassandra.UnsupportedProtocolVersionException"></exception>
        </member>
        <member name="M:Cassandra.HostConnectionPool.OnIdleRequestException(System.Exception)">
            <summary>
            Handler that gets invoked when if there is a socket exception when making a heartbeat/idle request
            </summary>
        </member>
        <member name="M:Cassandra.HostConnectionPool.MaybeCreateCorePool">
            <summary>
            Create the min amount of connections, if the pool is empty
            </summary>
        </member>
        <member name="M:Cassandra.HostConnectionPool.MaybeSpawnNewConnection(System.Int32)">
            <summary>
            Creates a new connection, if the conditions apply
            </summary>
        </member>
        <member name="P:Cassandra.HostConnectionPool.OpenConnections">
            <summary>
            Gets a list of connections already opened to the host
            </summary>
        </member>
        <member name="T:Cassandra.DefaultAddressTranslator">
            <summary>
            The default <c>AddressTranslater</c> used by the driver that performs no translation, returning the same IPEndPoint as the one provided.
            </summary>
        </member>
        <member name="T:Cassandra.IAddressTranslator">
            <summary>
                Translates IP addresses received from Cassandra nodes into locally queriable addresses.
            </summary>
            <remarks>
                The driver auto-detect new Cassandra nodes added to the cluster through server side
                pushed notifications and through checking the system tables. For each node, the address
                the driver will receive will correspond to the address set as rpc_address in the node
                yaml file. In most case, this is the correct address to use by the driver and that is
                what is used by default. However, sometimes the addresses received through this
                mechanism will either not be reachable directly by the driver or should not be the
                preferred address to use to reach the node (for instance, the rpc_address set on
                Cassandra nodes might be a private IP, but some clients may have to use a public IP,
                or pass by a router to reach that node). This interface allows to deal with such cases,
                by allowing to translate an address as sent by a Cassandra node to another address
                to be used by the driver for connection.
                Please note that the contact points addresses provided while creating the
                <c>Cluster</c> instance are not "translated", only IP address retrieve from or sent
                by Cassandra nodes to the driver are.
            </remarks>
        </member>
        <member name="M:Cassandra.IAddressTranslator.Translate(System.Net.IPEndPoint)">
            <summary>
                Translates a Cassandra rpc_address to another address if necessary.
            </summary>
            <param name="address">
                the address of a node as returned by Cassandra. Note that if the rpc_address of
                a node has been configured to 0.0.0.0 server side, then the provided address will
                be the node listen_address, <b>not</b> 0.0.0.0. Also note that the port for
                <c>IPEndPoint</c> will always be the one set at Cluster construction time
                (9042 by default).
            </param>
            <returns>
                the address the driver should actually use to connect to the node. If the return is
                <c>null</c>, then address will be used by the driver (it is thus equivalent to
                returing address directly).
            </returns>
        </member>
        <member name="M:Cassandra.DefaultAddressTranslator.Translate(System.Net.IPEndPoint)">
            <inheritdoc />
        </member>
        <member name="T:Cassandra.ICqlRequest">
            <summary>
            Represents an CQL Request (BATCH, EXECUTE or QUERY)
            </summary>
        </member>
        <member name="M:Cassandra.IRequest.GetFrame(System.Int16)">
            <summary>
            Constructs the frame for this request
            </summary>
        </member>
        <member name="P:Cassandra.IRequest.ProtocolVersion">
            <summary>
            Gets the version of the protocol that the request is built for
            </summary>
        </member>
        <member name="P:Cassandra.ICqlRequest.Consistency">
            <summary>
            Gets or sets the Consistency for the Request.
            It defaults to the one provided by the Statement but it can be changed by the retry policy.
            </summary>
        </member>
        <member name="P:Cassandra.ICqlRequest.Payload">
            <summary>
            Gets or sets the custom payload to be set with this request
            </summary>
        </member>
        <member name="T:Cassandra.LocalDate">
            <summary>
            A date without a time-zone in the ISO-8601 calendar system.
            LocalDate is an immutable date-time object that represents a date, often viewed as year-month-day.
            This class is implemented to match the Date representation CQL string literals.
            </summary>
        </member>
        <member name="F:Cassandra.LocalDate.DaysToMonth">
            <summary>
            Day number relatively to the year based on the month index
            </summary>
        </member>
        <member name="M:Cassandra.LocalDate.#ctor(System.UInt32)">
            <summary>
            Creates a new instance based on the days since unix epoch.
            </summary>
            <param name="days">An unsigned integer representing days with epoch centered at 2^31.</param>
        </member>
        <member name="M:Cassandra.LocalDate.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of LocalDate
            </summary>
            <param name="year">Year according to ISO-8601. Year 0 represents 1 BC.</param>
            <param name="month">The month number from 1 to 12</param>
            <param name="day">A day of the month from 1 to 31.</param>
        </member>
        <member name="M:Cassandra.LocalDate.DaysSinceYearZero(System.Int32)">
            <summary>
            Returns the value in days since year zero (1 BC).
            </summary>
            <param name="year"></param>
        </member>
        <member name="M:Cassandra.LocalDate.DaysSinceJan1(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the amount of days since Jan 1, for a given month/day
            </summary>
        </member>
        <member name="M:Cassandra.LocalDate.LeapDays(System.Int64)">
            <param name="year">0-based year number: 0 equals to 1 AD</param>
        </member>
        <member name="M:Cassandra.LocalDate.CompareTo(Cassandra.LocalDate)">
            <summary>
            Compares this instance value to another and returns an indication of their relative values.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Cassandra.LocalDate.Equals(Cassandra.LocalDate)">
            <summary>
            Determines if the value is equal to this instance.
            </summary>
        </member>
        <member name="M:Cassandra.LocalDate.ToDateTimeOffset">
            <summary>
            Returns the DateTimeOffset representation of the LocalDate for dates between 0001-01-01 and 9999-12-31
            </summary>
        </member>
        <member name="M:Cassandra.LocalDate.ToString">
            <summary>
            Returns the string representation of the LocalDate in yyyy-MM-dd format
            </summary>
        </member>
        <member name="P:Cassandra.LocalDate.DaysSinceEpochCentered">
            <summary>
            An unsigned integer representing days with epoch centered at 2^31 (unix epoch January 1st, 1970).
            </summary>
        </member>
        <member name="T:Cassandra.LocalTime">
            <summary>
            A time without a time-zone in the ISO-8601 calendar system, such as 10:30:05.
            LocalTime is an immutable date-time object that represents a time, often viewed as hour-minute-second. 
            Time is represented to nanosecond precision. For example, the value "13:45.30.123456789" can be stored in a LocalTime.
            </summary>
        </member>
        <member name="M:Cassandra.LocalTime.#ctor(System.Int64)">
            <summary>
            Creates a new instance based on nanoseconds since midnight.
            </summary>
            <param name="totalNanoseconds">Nanoseconds since midnight. Valid values are in the range 0 to 86399999999999.</param>
        </member>
        <member name="M:Cassandra.LocalTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new instance based on the specified hour, minutes, seconds, millis and nanoseconds.
            </summary>
            <param name="hour">A number between 0 and 23 representing the hour portion of the time</param>
            <param name="minute">A number between 0 and 59 representing the minutes portion of the time</param>
            <param name="second">A number between 0 and 59 representing the seconds portion of the time</param>
            <param name="nanosecond">A number between 0 and 999,999,999  representing the seconds portion of the time</param>
        </member>
        <member name="P:Cassandra.LocalTime.TotalNanoseconds">
            <summary>
            Gets the number of nanoseconds since midnight.
            </summary>
        </member>
        <member name="P:Cassandra.LocalTime.Hour">
            <summary>
            Gets the hour component of the time represented by the current instance, a number from 0 to 23.
            </summary>
        </member>
        <member name="P:Cassandra.LocalTime.Minute">
            <summary>
            Gets the minute component of the time represented by the current instance, a number from 0 to 59.
            </summary>
        </member>
        <member name="P:Cassandra.LocalTime.Second">
            <summary>
            Gets the second component of the time represented by the current instance, a number from 0 to 59.
            </summary>
        </member>
        <member name="P:Cassandra.LocalTime.Nanoseconds">
            <summary>
            Gets the nanoseconds component of the time represented by the current instance, a number from 0 to 999,999,999.
            </summary>
        </member>
        <member name="T:Cassandra.Mapping.AppliedInfo`1">
            <summary>
            When using Lightweight transactions, it provides information whether the change was applied or not.
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.AppliedInfo`1.#ctor(System.Boolean)">
            <summary>
            Creates a new instance marking the change as applied 
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.AppliedInfo`1.#ctor(`0)">
            <summary>
            Creates a new instance marking the change as not applied and provides information about the existing data.
            </summary>
            <param name="existing"></param>
        </member>
        <member name="M:Cassandra.Mapping.AppliedInfo`1.FromRowSet(Cassandra.Mapping.MapperFactory,System.String,Cassandra.RowSet)">
            <summary>
            Adapts a LWT RowSet and returns a new AppliedInfo
            </summary>
        </member>
        <member name="P:Cassandra.Mapping.AppliedInfo`1.Applied">
            <summary>
            Determines if the change was applied.
            </summary>
        </member>
        <member name="P:Cassandra.Mapping.AppliedInfo`1.Existing">
            <summary>
            Gets or sets the existing data that prevented
            </summary>
        </member>
        <member name="T:Cassandra.Mapping.IPage`1">
            <summary>
            Represents the result of a paged query, returned by manually paged query executions.
            </summary>
        </member>
        <member name="P:Cassandra.Mapping.IPage`1.CurrentPagingState">
            <summary>
            Returns a token representing the state used to retrieve this results.
            </summary>
        </member>
        <member name="P:Cassandra.Mapping.IPage`1.PagingState">
            <summary>
            Returns a token representing the state to retrieve the next page of results.
            </summary>
        </member>
        <member name="T:Cassandra.ListBackedStream">
            <summary>
            Represents a readable stream that instead of being backed by a series of array of arrays of bytes.
            It prevents .NET to request an allocation in the Large Object Heap that can result in a OOO exception.
            It maintains the original sizes of the internal streams when writing
            </summary>
        </member>
        <member name="P:Cassandra.ListBackedStream.KeepReferences">
            <summary>
            Determines that when writing, the buffer is kept by reference. 
            </summary>
        </member>
        <member name="P:Cassandra.ListBackedStream.TotalLength">
            <summary>
            Returns the length of the sum of the inner byte[] list
            </summary>
        </member>
        <member name="T:Cassandra.ITypeAdapter">
            <summary>
            Represents a adapter to convert a Cassandra type to a CLR type
            </summary>
        </member>
        <member name="T:Cassandra.BoundStatement">
            <summary>
             A prepared statement with values bound to the bind variables. <p> Once a
             BoundStatement has values for all the variables of the
             <see cref="P:Cassandra.BoundStatement.PreparedStatement"/> it has been created from, it can executed
             (through <see cref="M:Cassandra.ISession.Execute(Cassandra.IStatement)"/>). </p><p> The values of a BoundStatement
             can be set by either index or name. When setting them by name, names follow
             the case insensitivity rules explained in <link>ColumnDefinitions</link>.
             Note-worthily, if multiple bind variables correspond to the same column (as
             would be the case if you prepare <c>SELECT * FROM t WHERE x &gt; ? AND x &lt; ?</c>), 
             you will have to set values by indexes (or the <c>PreparedStatement.Bind(object[])</c>
             method) as the methods to set by name only allows to set the first prepared
             occurrence of the column.</p>
            <seealso cref="T:Cassandra.PreparedStatement"/>
            </summary>
        </member>
        <member name="M:Cassandra.BoundStatement.#ctor(Cassandra.PreparedStatement)">
            <summary>
             Creates a new <c>BoundStatement</c> from the provided prepared
             statement.
            </summary>
            <param name="statement"> the prepared statement from which to create a <c>BoundStatement</c>.</param>
        </member>
        <member name="M:Cassandra.BoundStatement.SetRoutingKey(Cassandra.RoutingKey[])">
            <summary>
             Set the routing key for this query. This method allows to manually
             provide a routing key for this BoundStatement. It is thus optional since the routing
             key is only an hint for token aware load balancing policy but is never
             mandatory.
            </summary>
            <param name="routingKeyComponents"> the raw (binary) values to compose the routing key.</param>
        </member>
        <member name="M:Cassandra.BoundStatement.ValidateValues(System.Object[])">
            <summary>
            Validate values using prepared statement metadata
            </summary>
        </member>
        <member name="P:Cassandra.BoundStatement.PreparedStatement">
            <summary>
             Gets the prepared statement on which this BoundStatement is based.
            </summary>
        </member>
        <member name="P:Cassandra.BoundStatement.RoutingKey">
            <summary>
             Gets the routing key for this bound query. <p> This method will return a
             non-<c>null</c> value if: <ul> <li>either all the TableColumns composing the
             partition key are bound variables of this <c>BoundStatement</c>. The
             routing key will then be built using the values provided for these partition
             key TableColumns.</li> <li>or the routing key has been set through
             <c>PreparedStatement.SetRoutingKey</c> for the
             <see cref="P:Cassandra.BoundStatement.PreparedStatement"/> this statement has been built from.</li> </ul>
             Otherwise, <c>null</c> is returned.</p> <p> Note that if the routing key
             has been set through <link>PreparedStatement.SetRoutingKey</link>, that value
             takes precedence even if the partition key is part of the bound variables.</p>
            </summary>
        </member>
        <member name="T:Cassandra.Builder">
            <summary>
             Helper class to build <link>Cluster</link> instances.
            </summary>
        </member>
        <member name="T:Cassandra.IInitializer">
            <summary>
             Initializer for <link>Cluster</link> instances. <p> If you want to create a
             new <c>Cluster</c> instance programmatically, then it is advised to use
             <link>Cluster.Builder</link> (obtained through the
             <link>Cluster#builder</link> method).</p> <p> But it is also possible to
             implement a custom <c>Initializer</c> that retrieve initialization from
             a web-service or from a configuration file for instance.</p>
            </summary>
        </member>
        <member name="M:Cassandra.IInitializer.GetConfiguration">
            <summary>
             The configuration to use for the new cluster. <p> Note that some
             configuration can be modified after the cluster initialization but some other
             cannot. In particular, the ones that cannot be change afterwards includes:
             <ul> <li>the port use to connect to Cassandra nodes (see
             <link>ProtocolOptions</link>).</li> <li>the policies used (see
             <link>Policies</link>).</li> <li>the authentication info provided (see
             <link>Configuration</link>).</li> <li>whether metrics are enabled (see
             <link>Configuration</link>).</li> </ul></p>
            </summary>
        </member>
        <member name="P:Cassandra.IInitializer.ContactPoints">
            <summary>
             Gets the initial Cassandra hosts to connect to.See
             <link>Builder.AddContactPoint</link> for more details on contact
            </summary>
        </member>
        <member name="M:Cassandra.Builder.GetConfiguration">
            <summary>
             The configuration that will be used for the new cluster. <p> You <b>should
             not</b> modify this object directly as change made to the returned object may
             not be used by the cluster build. Instead, you should use the other methods
             of this <c>Builder</c></p>.
            </summary>
            
            <returns>the configuration to use for the new cluster.</returns>
        </member>
        <member name="M:Cassandra.Builder.WithPort(System.Int32)">
            <summary>
             The port to use to connect to all Cassandra hosts. If not set through this
             method, the default port (9042) will be used instead.
            </summary>
            <param name="port"> the port to set. </param>
            <returns>this Builder</returns>
        </member>
        <member name="M:Cassandra.Builder.WithQueryOptions(Cassandra.QueryOptions)">
            <summary>
            Sets the QueryOptions to use for the newly created Cluster.
            
            If no query options are set through this method, default query
            options will be used.
            </summary>
            <param name="options">the QueryOptions to use.</param>
            <returns>this Builder.</returns>
        </member>
        <member name="M:Cassandra.Builder.WithCompression(Cassandra.CompressionType)">
            <summary>
             Sets the compression to use for the transport.
            </summary>
            <param name="compression"> the compression to set </param>
            <returns>this Builder <see>ProtocolOptions.Compression</see></returns>
        </member>
        <member name="M:Cassandra.Builder.WithCustomCompressor(Cassandra.IFrameCompressor)">
            <summary>
            Sets a custom compressor to be used for the compression type.
            If specified, the compression type is mandatory.
            If not specified the driver default compressor will be use for the compression type.
            </summary>
            <param name="compressor">Implementation of IFrameCompressor</param>
        </member>
        <member name="M:Cassandra.Builder.AddContactPoint(System.String)">
            <summary>
             Adds a contact point. Contact points are addresses of Cassandra nodes that
             the driver uses to discover the cluster topology. Only one contact point is
             required (the driver will retrieve the address of the other nodes
             automatically), but it is usually a good idea to provide more than one
             contact point, as if that unique contact point is not available, the driver
             won't be able to initialize itself correctly.
            </summary>
            <remarks>
             However, this can be useful if the Cassandra nodes are behind a router and 
             are not accessed directly. Note that if you are in this situation 
             (Cassandra nodes are behind a router, not directly accessible), you almost 
             surely want to provide a specific <c>IAddressTranslator</c> 
             (through <link>Builder.WithAddressTranslater</link>) to translate actual 
             Cassandra node addresses to the addresses the driver should use, otherwise 
             the driver will not be able to auto-detect new nodes (and will generally not 
             function optimally).
            </remarks>
            <param name="address">the address of the node to connect to</param> 
            <returns>this Builder</returns>
        </member>
        <member name="M:Cassandra.Builder.AddContactPoint(System.Net.IPAddress)">
            <summary>
             Add contact point. See <see cref="M:Cassandra.Builder.AddContactPoint(System.String)"/> for more details
             on contact points.
            </summary>
            <param name="address"> address of the node to add as contact point</param> 
            <returns>this Builder</returns>
        </member>
        <member name="M:Cassandra.Builder.AddContactPoint(System.Net.IPEndPoint)">
            <summary>
             Add contact point. See <see cref="M:Cassandra.Builder.AddContactPoint(System.String)"/> for more details
             on contact points.
            </summary>
            <param name="address"> address of the node to add as contact point</param> 
            <returns>this Builder</returns>
        </member>
        <member name="M:Cassandra.Builder.AddContactPoints(System.String[])">
            <summary>
             Add contact points. See <see cref="M:Cassandra.Builder.AddContactPoint(System.String)"/> for more details
             on contact points.
            </summary>
            <param name="addresses"> addresses of the nodes to add as contact point</param> 
            <returns>this Builder </returns>
        </member>
        <member name="M:Cassandra.Builder.AddContactPoints(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
             Add contact points. See <link>Builder.AddContactPoint</link> for more details
             on contact points.
            </summary>
            <param name="addresses"> addresses of the nodes to add as contact point</param>
            <returns>this Builder</returns>
        </member>
        <member name="M:Cassandra.Builder.AddContactPoints(System.Net.IPAddress[])">
            <summary>
             Add contact points. See <link>Builder.AddContactPoint</link> for more details
             on contact points.
            </summary>
            <param name="addresses"> addresses of the nodes to add as contact point</param>
            <returns>this Builder</returns>
        </member>
        <member name="M:Cassandra.Builder.AddContactPoints(System.Collections.Generic.IEnumerable{System.Net.IPAddress})">
            <summary>
             Add contact points. See <link>Builder.AddContactPoint</link> for more details
             on contact points.
            </summary>
            <param name="addresses"> addresses of the nodes to add as contact point</param>
            <returns>this Builder</returns>
        </member>
        <member name="M:Cassandra.Builder.AddContactPoints(System.Net.IPEndPoint[])">
            <summary>
             Add contact points. See <link>Builder.AddContactPoint</link> for more details
             on contact points.
            </summary>
            <param name="addresses"> addresses of the nodes to add as contact point
             </param>
            
            <returns>this Builder</returns>
        </member>
        <member name="M:Cassandra.Builder.AddContactPoints(System.Collections.Generic.IEnumerable{System.Net.IPEndPoint})">
            <summary>
             Add contact points. See <link>Builder.AddContactPoint</link> for more details
             on contact points.
            </summary>
            <param name="addresses"> addresses of the nodes to add as contact point
             </param>
            
            <returns>this Builder</returns>
        </member>
        <member name="M:Cassandra.Builder.WithLoadBalancingPolicy(Cassandra.ILoadBalancingPolicy)">
            <summary>
             Configure the load balancing policy to use for the new cluster. <p> If no
             load balancing policy is set through this method,
             <link>Policies.DefaultLoadBalancingPolicy</link> will be used instead.</p>
            </summary>
            <param name="policy"> the load balancing policy to use </param>
            
            <returns>this Builder</returns>
        </member>
        <member name="M:Cassandra.Builder.WithReconnectionPolicy(Cassandra.IReconnectionPolicy)">
            <summary>
             Configure the reconnection policy to use for the new cluster. <p> If no
             reconnection policy is set through this method,
             <link>Policies.DefaultReconnectionPolicy</link> will be used instead.</p>
            </summary>
            <param name="policy"> the reconnection policy to use </param>
            
            <returns>this Builder</returns>
        </member>
        <member name="M:Cassandra.Builder.WithRetryPolicy(Cassandra.IRetryPolicy)">
            <summary>
             Configure the retry policy to use for the new cluster. <p> If no retry policy
             is set through this method, <link>Policies.DefaultRetryPolicy</link> will
             be used instead.</p>
            </summary>
            <param name="policy"> the retry policy to use </param>
            
            <returns>this Builder</returns>
        </member>
        <member name="M:Cassandra.Builder.WithConnectionString(System.String)">
            <summary>
             Configure the cluster by applying settings from ConnectionString. 
            </summary>
            <param name="connectionString"> the ConnectionString to use </param>
            
            <returns>this Builder</returns>
        </member>
        <member name="M:Cassandra.Builder.WithCredentials(System.String,System.String)">
            <summary>
             Uses the provided credentials when connecting to Cassandra hosts. <p> This
             should be used if the Cassandra cluster has been configured to use the
             <c>PasswordAuthenticator</c>. If the the default <c>*
             AllowAllAuthenticator</c> is used instead, using this method has no effect.</p>
            </summary>
            <param name="username"> the user name to use to login to Cassandra hosts.</param>
            <param name="password"> the password corresponding to </param>
            <returns>this Builder</returns>
        </member>
        <member name="M:Cassandra.Builder.WithAuthProvider(Cassandra.IAuthProvider)">
            <summary>
             Use the specified AuthProvider when connecting to Cassandra hosts. <p> Use
             this method when a custom authentication scheme is in place. You shouldn't
             call both this method and {@code withCredentials}' on the same
             <c>Builder</c> instance as one will supersede the other</p>
            </summary>
            <param name="authProvider"> the <link>AuthProvider"></link> to use to login to Cassandra hosts.</param>
            <returns>this Builder</returns>
        </member>
        <member name="M:Cassandra.Builder.WithoutRowSetBuffering">
            <summary>
             Disables row set buffering for the created cluster (row set buffering is enabled by
             default otherwise).
            </summary>
            
            <returns>this builder</returns>
        </member>
        <member name="M:Cassandra.Builder.WithQueryTimeout(System.Int32)">
            <summary>
             Sets the timeout for a single query within created cluster.
             After the expiry of the timeout, query will be aborted.
             Default timeout value is set to <c>Infinity</c>
            </summary>
            <param name="queryAbortTimeout">Timeout specified in milliseconds.</param>
            <returns>this builder</returns>
        </member>
        <member name="M:Cassandra.Builder.WithDefaultKeyspace(System.String)">
            <summary>
             Sets default keyspace name for the created cluster.
            </summary>
            <param name="defaultKeyspace">Default keyspace name.</param>
            <returns>this builder</returns>
        </member>
        <member name="M:Cassandra.Builder.WithSocketOptions(Cassandra.SocketOptions)">
            <summary>
            Configures the socket options that are going to be used to create the connections to the hosts.
            </summary>
        </member>
        <member name="M:Cassandra.Builder.WithSSL">
            <summary>
             Enables the use of SSL for the created Cluster. Calling this method will use default SSL options. 
            </summary>
            <remarks>
            If SSL is enabled, the driver will not connect to any
            Cassandra nodes that doesn't have SSL enabled and it is strongly
            advised to enable SSL on every Cassandra node if you plan on using
            SSL in the driver. Note that SSL certificate common name(CN) on Cassandra node must match Cassandra node hostname.
            </remarks>
            <returns>this builder</returns>
        </member>
        <member name="M:Cassandra.Builder.WithSSL(Cassandra.SSLOptions)">
            <summary>
             Enables the use of SSL for the created Cluster using the provided options. 
            </summary>
            <remarks>
            If SSL is enabled, the driver will not connect to any
            Cassandra nodes that doesn't have SSL enabled and it is strongly
            advised to enable SSL on every Cassandra node if you plan on using
            SSL in the driver. Note that SSL certificate common name(CN) on Cassandra node must match Cassandra node hostname.
            </remarks>
            <param name="sslOptions">SSL options to use.</param>
            <returns>this builder</returns>        
        </member>
        <member name="M:Cassandra.Builder.WithAddressTranslator(Cassandra.IAddressTranslator)">
            <summary>
             Configures the address translater to use for the new cluster.
            </summary>
            <remarks>
            See <c>IAddressTranslater</c> for more detail on address translation,
            but the default tanslater, <c>DefaultAddressTranslator</c>, should be
            correct in most cases. If unsure, stick to the default.
            </remarks>
            <param name="addressTranslator">the translater to use.</param>
            <returns>this Builder</returns>
        </member>
        <member name="M:Cassandra.Builder.Build">
            <summary>
             Build the cluster with the configured set of initial contact points and
             policies. This is a shorthand for <c>Cluster.buildFrom(this)</c>.
            </summary>
            
            <returns>the newly build Cluster instance. </returns>
        </member>
        <member name="P:Cassandra.Builder.PoolingOptions">
            <summary>
             The pooling options used by this builder.
            </summary>
            
            <returns>the pooling options that will be used by this builder. You can use
             the returned object to define the initial pooling options for the built
             cluster.</returns>
        </member>
        <member name="P:Cassandra.Builder.SocketOptions">
            <summary>
             The socket options used by this builder.
            </summary>
            
            <returns>the socket options that will be used by this builder. You can use
             the returned object to define the initial socket options for the built
             cluster.</returns>
        </member>
        <member name="T:Cassandra.Cluster">
            <summary>
            Implementation of <see cref="T:Cassandra.ICluster"/>
            </summary>
            <inheritdoc/>
        </member>
        <member name="T:Cassandra.ICluster">
            <summary>
             Informations and known state of a Cassandra cluster. <p> This is the main
             entry point of the driver. A simple example of access to a Cassandra cluster
             would be: 
            <pre> Cluster cluster = Cluster.Builder.AddContactPoint("192.168.0.1").Build(); 
             Session session = Cluster.Connect("db1"); 
             foreach (var row in session.execute("SELECT * FROM table1")) 
               //do something ... </pre> 
             </p><p> A cluster object maintains a
             permanent connection to one of the cluster node that it uses solely to
             maintain informations on the state and current topology of the cluster. Using
             the connection, the driver will discover all the nodes composing the cluster
             as well as new nodes joining the cluster.</p>
            </summary>
        </member>
        <member name="M:Cassandra.ICluster.AllHosts">
            <summary>
             Returns all known hosts of this cluster.
            </summary>
        </member>
        <member name="M:Cassandra.ICluster.Connect">
            <summary>
             Creates a new session on this cluster.
            </summary>
            <returns>a new session on this cluster set to no keyspace.</returns>
        </member>
        <member name="M:Cassandra.ICluster.Connect(System.String)">
            <summary>
             Creates a new session on this cluster and sets a keyspace to use.
            </summary>
            <param name="keyspace">Case-sensitive keyspace name to use.</param>
            <returns>a new session on this cluster set to keyspace: <c>keyspaceName</c>. </returns>
        </member>
        <member name="M:Cassandra.ICluster.GetHost(System.Net.IPEndPoint)">
            <summary>
            Get the host instance for a given Ip address.
            </summary>
            <param name="address">Ip address of the host</param>
            <returns>The host or null if not found</returns>
        </member>
        <member name="M:Cassandra.ICluster.GetReplicas(System.Byte[])">
            <summary>
            Gets a collection of replicas for a given partitionKey. Backward-compatibility only, use GetReplicas(keyspace, partitionKey) instead.
            </summary>
            <param name="partitionKey">Byte array representing the partition key</param>
            <returns></returns>
        </member>
        <member name="M:Cassandra.ICluster.GetReplicas(System.String,System.Byte[])">
            <summary>
            Gets a collection of replicas for a given partitionKey on a given keyspace
            </summary>
            <param name="keyspace">Byte array representing the partition key</param>
            <param name="partitionKey">Byte array representing the partition key</param>
            <returns></returns>
        </member>
        <member name="M:Cassandra.ICluster.Shutdown(System.Int32)">
            <summary>
             Shutdown this cluster instance. This closes all connections from all the
             sessions of this <c>* Cluster</c> instance and reclaim all resources
             used by it. <p> This method has no effect if the cluster was already shutdown.</p>
            </summary>
        </member>
        <member name="P:Cassandra.ICluster.Metadata">
            <summary>
             Gets read-only metadata on the connected cluster. 
            <para>This includes the
             know nodes (with their status as seen by the driver) as well as the schema
             definitions.
            </para>
            <para>This method may trigger the creation of a connection if none has been established yet.
            </para>
            </summary>
        </member>
        <member name="P:Cassandra.ICluster.Configuration">
            <summary>
            Cluster client configuration
            </summary>
        </member>
        <member name="E:Cassandra.ICluster.HostAdded">
            <summary>
            Event that gets triggered when a new host is added to the cluster
            </summary>
        </member>
        <member name="E:Cassandra.ICluster.HostRemoved">
            <summary>
            Event that gets triggered when a host has been removed from the cluster
            </summary>
        </member>
        <member name="M:Cassandra.Cluster.BuildFrom(Cassandra.IInitializer)">
            <summary>
             Build a new cluster based on the provided initializer. <p> Note that for
             building a cluster programmatically, Cluster.NewBuilder provides a slightly less
             verbose shortcut with <link>NewBuilder#Build</link>. </p><p> Also note that that all
             the contact points provided by <c>initializer</c> must share the same
             port.</p>
            </summary>
            <param name="initializer">the Cluster.Initializer to use</param>
            <returns>the newly created Cluster instance </returns>
        </member>
        <member name="M:Cassandra.Cluster.Builder">
            <summary>
             Creates a new <link>Cluster.NewBuilder</link> instance. <p> This is a shortcut
             for <c>new Cluster.NewBuilder()</c></p>.
            </summary>
            <returns>the new cluster builder.</returns>
        </member>
        <member name="M:Cassandra.Cluster.Init">
            <summary>
            Initializes once (Thread-safe) the control connection and metadata associated with the Cluster instance
            </summary>
        </member>
        <member name="M:Cassandra.Cluster.AllHosts">
            <inheritdoc />
        </member>
        <member name="M:Cassandra.Cluster.Connect">
            <summary>
            Creates a new session on this cluster.
            </summary>
        </member>
        <member name="M:Cassandra.Cluster.Connect(System.String)">
            <summary>
            Creates a new session on this cluster and using a keyspace an existing keyspace.
            </summary>
            <param name="keyspace">Case-sensitive keyspace name to use</param>
        </member>
        <member name="M:Cassandra.Cluster.ConnectAndCreateDefaultKeyspaceIfNotExists(System.Collections.Generic.Dictionary{System.String,System.String},System.Boolean)">
            <summary>
            Creates new session on this cluster, and sets it to default keyspace. 
            If default keyspace does not exist then it will be created and session will be set to it.
            Name of default keyspace can be specified during creation of cluster object with <c>Cluster.Builder().WithDefaultKeyspace("keyspace_name")</c> method.
            </summary>
            <param name="replication">Replication property for this keyspace. To set it, refer to the <see cref="T:Cassandra.ReplicationStrategies"/> class methods. 
            It is a dictionary of replication property sub-options where key is a sub-option name and value is a value for that sub-option. 
            <p>Default value is <c>SimpleStrategy</c> with <c>'replication_factor' = 2</c></p></param>
            <param name="durableWrites">Whether to use the commit log for updates on this keyspace. Default is set to <c>true</c>.</param>
            <returns>a new session on this cluster set to default keyspace.</returns>
        </member>
        <member name="M:Cassandra.Cluster.GetHost(System.Net.IPEndPoint)">
            <inheritdoc />
        </member>
        <member name="M:Cassandra.Cluster.GetReplicas(System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:Cassandra.Cluster.GetReplicas(System.String,System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:Cassandra.Cluster.RefreshSchema(System.String,System.String)">
            <summary>
            Updates cluster metadata for a given keyspace or keyspace table
            </summary>
        </member>
        <member name="M:Cassandra.Cluster.Shutdown(System.Int32)">
            <inheritdoc />
        </member>
        <member name="E:Cassandra.Cluster.HostAdded">
            <inheritdoc />
        </member>
        <member name="E:Cassandra.Cluster.HostRemoved">
            <inheritdoc />
        </member>
        <member name="P:Cassandra.Cluster.MaxProtocolVersion">
            <summary>
            Gets or sets the maximum protocol version used by this driver.
            <para>
            While property value is maintained for backward-compatibility, 
            use <see cref="M:Cassandra.ProtocolOptions.SetMaxProtocolVersion(System.Byte)"/> to set the maximum protocol version used by the driver.
            </para>
            </summary>
        </member>
        <member name="P:Cassandra.Cluster.Configuration">
            <summary>
             Gets the cluster configuration.
            </summary>
        </member>
        <member name="P:Cassandra.Cluster.Metadata">
            <inheritdoc />
        </member>
        <member name="T:Cassandra.CompressionType">
            <summary>
             Compression supported by the Cassandra binary protocol.
            </summary>
        </member>
        <member name="T:Cassandra.Connection">
            <summary>
            Represents a TCP connection to a Cassandra Node
            </summary>
        </member>
        <member name="F:Cassandra.Connection._isCanceled">
            <summary>
            Determines that the connection canceled pending operations.
            It could be because its being closed or there was a socket error.
            </summary>
        </member>
        <member name="F:Cassandra.Connection._freeOperations">
            <summary>
            Stores the available stream ids.
            </summary>
        </member>
        <member name="F:Cassandra.Connection._pendingOperations">
            <summary> Contains the requests that were sent through the wire and that hasn't been received yet.</summary>
        </member>
        <member name="F:Cassandra.Connection._writeQueue">
            <summary> It contains the requests that could not be written due to streamIds not available</summary>
        </member>
        <member name="F:Cassandra.Connection._minimalBuffer">
            <summary>
            Small buffer (less than 8 bytes) that is used when the next received message is smaller than 8 bytes, 
            and it is not possible to read the header.
            </summary>
        </member>
        <member name="F:Cassandra.Connection._writeScheduler">
            <summary> TaskScheduler used to handle write tasks</summary>
        </member>
        <member name="M:Cassandra.Connection.Authenticate">
            <summary>
            Starts the authentication flow
            </summary>
            <exception cref="T:Cassandra.AuthenticationException"/>
        </member>
        <member name="M:Cassandra.Connection.Authenticate(System.Byte[],Cassandra.IAuthenticator)">
            <exception cref="T:Cassandra.AuthenticationException"/>
        </member>
        <member name="M:Cassandra.Connection.CancelPending(System.Exception,System.Nullable{System.Net.Sockets.SocketError})">
            <summary>
            It callbacks all operations already sent / or to be written, that do not have a response.
            </summary>
        </member>
        <member name="M:Cassandra.Connection.IdleTimeoutHandler(System.Object)">
            <summary>
            Gets executed once the idle timeout has passed
            </summary>
        </member>
        <member name="M:Cassandra.Connection.Init">
            <summary>
            Initializes the connection. Thread safe.
            </summary>
            <exception cref="T:System.Net.Sockets.SocketException">Throws a SocketException when the connection could not be established with the host</exception>
            <exception cref="T:Cassandra.AuthenticationException"/>
            <exception cref="T:Cassandra.UnsupportedProtocolVersionException"></exception>
        </member>
        <member name="M:Cassandra.Connection.Kill">
            <summary>
            Silently kill the connection, for testing purposes only
            </summary>
        </member>
        <member name="M:Cassandra.Connection.ReadParse(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Parses the bytes received into a frame. Uses the internal operation state to do the callbacks.
            Returns true if a full operation (streamId) has been processed and there is one available.
            </summary>
            <param name="buffer">Byte buffer to read</param>
            <param name="offset">Offset within the buffer</param>
            <param name="count">Length of bytes to be read from the buffer</param>
            <returns>True if a full operation (streamId) has been processed.</returns>
        </member>
        <member name="M:Cassandra.Connection.Startup">
            <summary>
            Sends a protocol STARTUP message
            </summary>
        </member>
        <member name="M:Cassandra.Connection.Send(Cassandra.IRequest)">
            <summary>
            Sends a new request if possible. If it is not possible it queues it up.
            </summary>
        </member>
        <member name="M:Cassandra.Connection.Send(Cassandra.IRequest,System.Action{System.Exception,Cassandra.AbstractResponse})">
            <summary>
            Sends a new request if possible and executes the callback when the response is parsed. If it is not possible it queues it up.
            </summary>
        </member>
        <member name="M:Cassandra.Connection.SendQueueProcess(Cassandra.OperationState,System.Boolean)">
            <summary>
            Try to write the item provided. Thread safe.
            </summary>
            <param name="state">The request and callback</param>
            <param name="useInlining">Determines if the current thread can be used to start sending the request</param>
        </member>
        <member name="M:Cassandra.Connection.SendQueueNext">
            <summary>
            Try to write the next item in the write queue. Thread safe.
            </summary>
        </member>
        <member name="M:Cassandra.Connection.WriteCompletedHandler">
            <summary>
            Method that gets executed when a write request has been completed.
            </summary>
        </member>
        <member name="E:Cassandra.Connection.CassandraEventResponse">
            <summary>
            The event that represents a event RESPONSE from a Cassandra node
            </summary>
        </member>
        <member name="E:Cassandra.Connection.OnIdleRequestException">
            <summary>
            Event raised when there is an error when executing the request to prevent idle disconnects
            </summary>
        </member>
        <member name="E:Cassandra.Connection.WriteCompleted">
            <summary>
            Event that gets raised when a write has been completed. Testing purposes only.
            </summary>
        </member>
        <member name="P:Cassandra.Connection.InFlight">
            <summary>
            Determines the amount of operations that are not finished.
            </summary>
        </member>
        <member name="P:Cassandra.Connection.IsClosed">
            <summary>
            Determine if the Connection is closed
            </summary>
        </member>
        <member name="P:Cassandra.Connection.IsDisposed">
            <summary>
            Determine if the Connection has been explicitly disposed
            </summary>
        </member>
        <member name="P:Cassandra.Connection.Keyspace">
            <summary>
            Gets or sets the keyspace.
            When setting the keyspace, it will issue a Query Request and wait to complete.
            </summary>
        </member>
        <member name="P:Cassandra.Connection.MaxConcurrentRequests">
            <summary>
            Gets the amount of concurrent requests depending on the protocol version
            </summary>
        </member>
        <member name="T:Cassandra.ConsistencyLevel">
            <summary>
            Consistency refers to how up-to-date and synchronized a row of Cassandra data is on all of its replicas.
            When selecting, the consistency level specifies how many replicas must respond to a read request before returning data to the client application.
            When updating, inserting or deleting the consistency level specifies the number of replicas on which the write must succeed before returning an acknowledgment to the client application.
            </summary>
        </member>
        <member name="F:Cassandra.ConsistencyLevel.Any">
            <summary>
            Writing: A write must be written to at least one node. If all replica nodes for the given row key are down, the write can still succeed after a hinted handoff has been written. If all replica nodes are down at write time, an ANY write is not readable until the replica nodes for that row have recovered.
            </summary>
        </member>
        <member name="F:Cassandra.ConsistencyLevel.One">
            <summary>
            Returns a response from the closest replica, as determined by the snitch.
            </summary>
        </member>
        <member name="F:Cassandra.ConsistencyLevel.Two">
            <summary>
            Returns the most recent data from two of the closest replicas.
            </summary>
        </member>
        <member name="F:Cassandra.ConsistencyLevel.Three">
            <summary>
            Returns the most recent data from three of the closest replicas.
            </summary>
        </member>
        <member name="F:Cassandra.ConsistencyLevel.Quorum">
            <summary>
            Reading: Returns the record with the most recent timestamp after a quorum of replicas has responded regardless of data center.
            Writing: A write must be written to the commit log and memory table on a quorum of replica nodes.
            </summary>
        </member>
        <member name="F:Cassandra.ConsistencyLevel.All">
            <summary>
            Reading: Returns the record with the most recent timestamp after all replicas have responded. The read operation will fail if a replica does not respond.
            Writing: A write must be written to the commit log and memory table on all replica nodes in the cluster for that row.
            </summary>
        </member>
        <member name="F:Cassandra.ConsistencyLevel.LocalQuorum">
            <summary>
            Reading: Returns the record with the most recent timestamp once a quorum of replicas in the current data center as the coordinator node has reported.
            Writing: A write must be written to the commit log and memory table on a quorum of replica nodes in the same data center as the coordinator node. Avoids latency of inter-data center communication.
            </summary>
        </member>
        <member name="F:Cassandra.ConsistencyLevel.EachQuorum">
            <summary>
            Reading: Returns the record once a quorum of replicas in each data center of the cluster has responded.
            Writing: Strong consistency. A write must be written to the commit log and memtable on a quorum of replica nodes in all data centers.
            </summary>
        </member>
        <member name="F:Cassandra.ConsistencyLevel.Serial">
            <summary>
            Allows reading the current (and possibly uncommitted) state of data without proposing a new addition or update. If a SERIAL read finds an uncommitted transaction in progress, it will commit the transaction as part of the read.
            </summary>
        </member>
        <member name="F:Cassandra.ConsistencyLevel.LocalSerial">
            <summary>
            Same as <c>Serial</c>, but confined to the data center.
            </summary>
        </member>
        <member name="F:Cassandra.ConsistencyLevel.LocalOne">
            <summary>
            Similar to <c>One</c> but only within the DC the coordinator is in.
            </summary>
        </member>
        <member name="T:Cassandra.BatchStatement">
            <summary>
            A statement that groups a number of <see cref="T:Cassandra.BoundStatement"/> and / or <see cref="T:Cassandra.SimpleStatement"/> so they get executed as a batch.
            </summary>
        </member>
        <member name="M:Cassandra.BatchStatement.SetRoutingKey(Cassandra.RoutingKey[])">
            <summary>
             Set the routing key for this query. <p> This method allows to manually
             provide a routing key for this query. It is thus optional since the routing
             key is only an hint for token aware load balancing policy but is never
             mandatory. </p><p> If the partition key for the query is composite, use the
             <link>#setRoutingKey(ByteBuffer...)</link> method instead to build the
             routing key.</p>
            </summary>
            <param name="routingKeyComponents"> the raw (binary) values to compose to obtain the routing key.</param>
            <returns>this <c>BatchStatement</c> object.</returns>
        </member>
        <member name="M:Cassandra.BatchStatement.SetRoutingValues(System.Object[])">
            <summary>
            Sets the partition key values in order to route the query to the correct replicas.
            <para>For simple partition keys, set the partition key value.</para>
            <para>For composite partition keys, set the multiple the partition key values in correct order.</para>
            </summary>
        </member>
        <member name="M:Cassandra.BatchStatement.Add(Cassandra.Statement)">
            <summary>
            Adds a new statement to this batch.
            Note that statement can be any <c>Statement</c>. It is allowed to mix <see cref="T:Cassandra.SimpleStatement"/> and <see cref="T:Cassandra.BoundStatement"/> in the same <c>BatchStatement</c> in particular.
            Please note that the options of the added <c>Statement</c> (all those defined directly by the Statement class: consistency level, fetch size, tracing, ...) will be ignored for the purpose of the execution of the Batch. Instead, the options used are the one of this <c>BatchStatement</c> object.
            </summary>
            <param name="statement">Statement to add to the batch</param>
            <returns>The Batch statement</returns>
        </member>
        <member name="M:Cassandra.BatchStatement.SetBatchType(Cassandra.BatchType)">
            <summary>
            Sets the <see cref="P:Cassandra.BatchStatement.BatchType"/>
            </summary>
            <returns></returns>
        </member>
        <member name="P:Cassandra.BatchStatement.BatchType">
            <summary>
            Gets the batch type
            </summary>
        </member>
        <member name="P:Cassandra.BatchStatement.IsEmpty">
            <summary>
            Determines if the batch does not contain any query
            </summary>
        </member>
        <member name="P:Cassandra.BatchStatement.RoutingKey">
            <summary>
            Gets the routing key for the query.
            <para>
            Routing key can be provided using the <see cref="M:Cassandra.BatchStatement.SetRoutingValues(System.Object[])"/> method.
            </para>
            </summary>
        </member>
        <member name="F:Cassandra.CqlQueryTools.SelectSchemaPeers">
            <summary>
            The cql query to select the peers
            </summary>
        </member>
        <member name="F:Cassandra.CqlQueryTools.SelectSchemaLocal">
            <summary>
            The cql query to get the local schema version information
            </summary>
        </member>
        <member name="F:Cassandra.Diagnostics.CassandraTraceSwitch">
            <summary>
            Specifies what messages should be passed to the output log. 
            <para></para>   
            <para><value>TraceLevel.Off</value> - Output no tracing messages.</para>   
            <para><value>TraceLevel.Error</value>  - Output error-handling messages.</para> 
            <para><value>TraceLevel.Warning</value> - Output warnings and error-handling messages.</para>
            <para><value>TraceLevel.Info</value> - Output informational messages, warnings, and error-handling messages.</para>
            <para><value>TraceLevel.Verbose</value> - Output all debugging and tracing messages.</para>                
            </summary>
        </member>
        <member name="P:Cassandra.Diagnostics.CassandraStackTraceIncluded">
            <summary>
            Defines if exception StackTrace information should be printed by trace logger.
            <para>Default value is <value>false</value>.</para>
            </summary>
        </member>
        <member name="P:Cassandra.Diagnostics.CassandraPerformanceCountersEnabled">
            <summary>
            Defines if performance counters should be enabled.
            <para>Default value is <value>false</value>.</para>
            </summary>
        </member>
        <member name="T:Cassandra.InvalidTypeException">
            <summary>
            Exception that is thrown when the driver expected a type and other was provided
            </summary>
        </member>
        <member name="T:Cassandra.TraceRetrievalException">
            <summary>
             Exception thrown if a query trace cannot be retrieved.
            </summary>
        </member>
        <member name="T:Cassandra.Host">
            <summary>
             A Cassandra node. This class keeps the informations the driver maintain on a
             given Cassandra node.
            </summary>
        </member>
        <member name="M:Cassandra.Host.SetDown">
            <summary>
            Sets the Host as Down
            </summary>
        </member>
        <member name="M:Cassandra.Host.BringUpIfDown">
            <summary>
            Returns true if the host was DOWN and it was set as UP
            </summary>
        </member>
        <member name="M:Cassandra.Host.GetHashCode">
            <summary>
            The hash value of the address of the host
            </summary>
        </member>
        <member name="E:Cassandra.Host.Down">
            <summary>
            Event that gets raised when the host is considered as DOWN (not available) by the driver.
            It will provide the time were reconnection will be attempted
            </summary>
        </member>
        <member name="E:Cassandra.Host.Up">
            <summary>
            Event that gets raised when the host is considered back UP (available for queries) by the driver.
            </summary>
        </member>
        <member name="P:Cassandra.Host.IsUp">
            <summary>
            Determines if the host is UP for the driver
            </summary>
        </member>
        <member name="P:Cassandra.Host.IsConsiderablyUp">
            <summary>
            Determines if the host can be considered as UP
            </summary>
        </member>
        <member name="P:Cassandra.Host.Address">
            <summary>
             Gets the node address.
            </summary>
        </member>
        <member name="P:Cassandra.Host.Tokens">
            <summary>
            Tokens assigned to the host
            </summary>
        </member>
        <member name="P:Cassandra.Host.Datacenter">
            <summary>
             Gets the name of the datacenter this host is part of. The returned
             datacenter name is the one as known by Cassandra. Also note that it is
             possible for this information to not be available. In that case this method
             returns <c>null</c> and caller should always expect that possibility.
            </summary>
        </member>
        <member name="P:Cassandra.Host.Rack">
            <summary>
             Gets the name of the rack this host is part of. The returned rack name is
             the one as known by Cassandra. Also note that it is possible for this
             information to not be available. In that case this method returns
             <c>null</c> and caller should always expect that possibility.
            </summary>
        </member>
        <member name="T:Cassandra.HostDistance">
            <summary>
             The distance to a Cassandra node as assigned by a
             <link>com.datastax.driver.core.policies.LoadBalancingPolicy</link> (through
             its <c>* distance</c> method). The distance assigned to an host
             influence how many connections the driver maintains towards this host. If for
             a given host the assigned <c>HostDistance</c> is <c>Local</c> or
             <c>Remote</c>, some connections will be maintained by the driver to
             this host. More active connections will be kept to <c>Local</c> host
             than to a <c>Remote</c> one (and thus well behaving
             <c>LoadBalancingPolicy</c> should assign a <c>Remote</c> distance
             only to hosts that are the less often queried). <p> However, if an host is
             assigned the distance <c>Ignored</c>, no connection to that host will
             maintained active. In other words, <c>Ignored</c> should be assigned to
             hosts that should not be used by this driver (because they are in a remote
             datacenter for instance).</p>
            </summary>
        </member>
        <member name="M:Cassandra.Hosts.Add(System.Net.IPEndPoint)">
            <summary>
            Adds the host if not exists
            </summary>
        </member>
        <member name="E:Cassandra.Hosts.Down">
            <summary>
            Event that gets triggered when a host is considered as DOWN (not available)
            </summary>
        </member>
        <member name="E:Cassandra.Hosts.Up">
            <summary>
            Event that gets triggered when a host is considered back UP (available for queries)
            </summary>
        </member>
        <member name="E:Cassandra.Hosts.Added">
            <summary>
            Event that gets triggered when a new host has been added to the pool
            </summary>
        </member>
        <member name="E:Cassandra.Hosts.Removed">
            <summary>
            Event that gets triggered when a host has been removed
            </summary>
        </member>
        <member name="P:Cassandra.Hosts.Count">
            <summary>
            Gets the total amount of hosts in the cluster
            </summary>
        </member>
        <member name="T:Cassandra.IAuthInfoProvider">
            <summary>
             Authentication informations provider to connect to Cassandra nodes. <p> The
             authentication information themselves are just a key-value pairs. Which exact
             key-value pairs are required depends on the authenticator set for the
             Cassandra nodes.</p>
            </summary>
            
        </member>
        <member name="M:Cassandra.IAuthInfoProvider.GetAuthInfos(System.Net.IPEndPoint)">
            <summary>
             The authentication informations to use to connect to <c>host</c>.
             Please note that if authentication is required, this method will be called to
             initialize each new connection created by the driver. It is thus a good idea
             to make sure this method returns relatively quickly.
            </summary>
            <param name="host"> the Cassandra host for which authentication information
             are requested. </param>
            
            <returns>The authentication informations to use.</returns>
        </member>
        <member name="T:Cassandra.IQueryRequest">
            <summary>
            Represents a QUERY or EXECUTE request that can be included in a batch
            </summary>
        </member>
        <member name="M:Cassandra.IQueryRequest.WriteToBatch(System.Byte,Cassandra.BEBinaryWriter)">
            <summary>
            Method used by the batch to build each individual request
            </summary>
        </member>
        <member name="P:Cassandra.IQueryRequest.PagingState">
            <summary>
            The paging state for the request
            </summary>
        </member>
        <member name="T:Cassandra.ISession">
            <summary>
            A session holds connections to a Cassandra cluster, allowing it to be queried.
            <para>
            Each session maintains multiple connections to the cluster nodes,
            provides policies to choose which node to use for each query (round-robin on
            all nodes of the cluster by default), and handles retries for failed query (when
            it makes sense), etc...
            </para>
            <para>
            Session instances are thread-safe and usually a single instance is enough
            per application. However, a given session can only be set to one keyspace
            at a time, so one instance per keyspace is necessary.
            </para>
            </summary>
        </member>
        <member name="M:Cassandra.ISession.BeginExecute(Cassandra.IStatement,System.AsyncCallback,System.Object)">
            <summary>
            Begins asynchronous execute operation
            </summary>
        </member>
        <member name="M:Cassandra.ISession.BeginExecute(System.String,Cassandra.ConsistencyLevel,System.AsyncCallback,System.Object)">
            <summary>
            Begins asynchronous execute operation
            </summary>
        </member>
        <member name="M:Cassandra.ISession.BeginPrepare(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins asynchronous prepare operation
            </summary>
        </member>
        <member name="M:Cassandra.ISession.ChangeKeyspace(System.String)">
            <summary>
            Switches to the specified keyspace.
            </summary>
            <param name="keyspaceName">Case-sensitive name of keyspace to be used.</param>
            <exception cref="T:Cassandra.InvalidQueryException">When keyspace does not exist</exception>
        </member>
        <member name="M:Cassandra.ISession.CreateKeyspace(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Boolean)">
            <summary>
             Creates new keyspace in current cluster.        
            </summary>
            <param name="keyspaceName">Case-sensitive name of keyspace to be created.</param>
            <param name="replication">
            Replication property for this keyspace.
            To set it, refer to the <see cref="T:Cassandra.ReplicationStrategies"/> class methods. 
            It is a dictionary of replication property sub-options where key is a sub-option name and value is a value for that sub-option. 
            <para>Default value is <c>SimpleStrategy</c> with <c>replication_factor = 1</c></para>
            </param>
            <param name="durableWrites">Whether to use the commit log for updates on this keyspace. Default is set to <c>true</c>.</param>
        </member>
        <member name="M:Cassandra.ISession.CreateKeyspaceIfNotExists(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Boolean)">
            <summary>
             Creates new keyspace in current cluster.
             If keyspace with specified name already exists, then this method does nothing.
            </summary>
            <param name="keyspaceName">Case-sensitive name of keyspace to be created.</param>
            <param name="replication">
            Replication property for this keyspace.
            To set it, refer to the <see cref="T:Cassandra.ReplicationStrategies"/> class methods. 
            It is a dictionary of replication property sub-options where key is a sub-option name and value is a value for that sub-option.
            <para>Default value is <c>'SimpleStrategy'</c> with <c>'replication_factor' = 2</c></para>
            </param>
            <param name="durableWrites">Whether to use the commit log for updates on this keyspace. Default is set to <c>true</c>.</param>
        </member>
        <member name="M:Cassandra.ISession.DeleteKeyspace(System.String)">
            <summary>
             Deletes specified keyspace from current cluster.
             If keyspace with specified name does not exist, then exception will be thrown.
            </summary>
            <param name="keyspaceName">Name of keyspace to be deleted.</param>
        </member>
        <member name="M:Cassandra.ISession.DeleteKeyspaceIfExists(System.String)">
            <summary>
             Deletes specified keyspace from current cluster.
             If keyspace with specified name does not exist, then this method does nothing.
            </summary>
            <param name="keyspaceName">Name of keyspace to be deleted.</param>
        </member>
        <member name="M:Cassandra.ISession.EndExecute(System.IAsyncResult)">
            <summary>
            Ends asynchronous execute operation
            </summary>
            <param name="ar"></param>
            <returns></returns>
        </member>
        <member name="M:Cassandra.ISession.EndPrepare(System.IAsyncResult)">
            <summary>
            Ends asynchronous prepare operation
            </summary>
        </member>
        <member name="M:Cassandra.ISession.Execute(Cassandra.IStatement)">
            <summary>
            Executes the provided query.
            </summary>
        </member>
        <member name="M:Cassandra.ISession.Execute(System.String)">
            <summary>
            Executes the provided query.
            </summary>
        </member>
        <member name="M:Cassandra.ISession.Execute(System.String,Cassandra.ConsistencyLevel)">
            <summary>
            Executes the provided query.
            </summary>
        </member>
        <member name="M:Cassandra.ISession.Execute(System.String,System.Int32)">
            <summary>
            Executes the provided query.
            </summary>
        </member>
        <member name="M:Cassandra.ISession.ExecuteAsync(Cassandra.IStatement)">
            <summary>
            Executes a query asynchronously
            </summary>
            <param name="statement">The statement to execute (simple, bound or batch statement)</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:Cassandra.ISession.Prepare(System.String)">
            <summary>
            Prepares the provided query string.
            </summary>
            <param name="cqlQuery">cql query to prepare</param>
        </member>
        <member name="M:Cassandra.ISession.Prepare(System.String,System.Collections.Generic.IDictionary{System.String,System.Byte[]})">
            <summary>
            Prepares the query string, sending the custom payload request.
            </summary>
            <param name="cqlQuery">cql query to prepare</param>
            <param name="customPayload">Custom outgoing payload to send with the prepare request</param>
        </member>
        <member name="M:Cassandra.ISession.PrepareAsync(System.String)">
            <summary>
            Prepares the provided query string asynchronously.
            </summary>
            <param name="cqlQuery">cql query to prepare</param>
        </member>
        <member name="M:Cassandra.ISession.PrepareAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.Byte[]})">
            <summary>
            Prepares the provided query string asynchronously, and sending the custom payload request.
            </summary>
            <param name="cqlQuery">cql query to prepare</param>
            <param name="customPayload">Custom outgoing payload to send with the prepare request</param>
        </member>
        <member name="P:Cassandra.ISession.BinaryProtocolVersion">
            <summary>
            Gets the Cassandra native binary protocol version
            </summary>
        </member>
        <member name="P:Cassandra.ISession.Cluster">
            <summary>
            Gets the cluster information and state
            </summary>
        </member>
        <member name="P:Cassandra.ISession.IsDisposed">
            <summary>
            Determines if the object has been disposed.
            </summary>
        </member>
        <member name="P:Cassandra.ISession.Keyspace">
            <summary>
            Gets name of currently used keyspace. 
            </summary>
        </member>
        <member name="P:Cassandra.ISession.UserDefinedTypes">
            <summary>
            Gets the user defined type mappings
            </summary>
        </member>
        <member name="T:Cassandra.IFrameCompressor">
            <summary>
            Defines the methods for frame compression and decompression
            </summary>
        </member>
        <member name="M:Cassandra.IFrameCompressor.Decompress(System.IO.Stream)">
            <summary>
            Creates and returns stream (clear text) using the provided compressed <c>stream</c> as input.
            </summary>
        </member>
        <member name="M:Cassandra.M3PToken.M3PTokenFactory.Murmur(System.Byte[])">
            <summary>
            Murmur hash it
            </summary>
            <returns></returns>
        </member>
        <member name="T:Cassandra.Mapping.Attributes.ClusteringKeyAttribute">
            <summary>
            Indicates that the property or field is part of the Clustering Key
            </summary>
        </member>
        <member name="P:Cassandra.Mapping.Attributes.ClusteringKeyAttribute.ClusteringSortOrder">
            <summary>
            Gets or sets the clustering order
            </summary>
        </member>
        <member name="P:Cassandra.Mapping.Attributes.ClusteringKeyAttribute.Index">
            <summary>
            Index of the clustering key, relative to the other clustering keys
            </summary>
        </member>
        <member name="P:Cassandra.Mapping.Attributes.ClusteringKeyAttribute.Name">
            <summary>
            Name of the column
            </summary>
        </member>
        <member name="T:Cassandra.Mapping.Attributes.ColumnAttribute">
            <summary>
            Used on a POCO property of field.  Can be used to override the column name in the database that property or field maps to.
            When the <see cref="P:Cassandra.Mapping.Attributes.TableAttribute.ExplicitColumns"/> is set, this attribute also indicates that a property or field should be
            mapped.
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.Attributes.ColumnAttribute.#ctor(System.String)">
            <summary>
            Specifies the name of the column in the database to use for this property/field.  If the <see cref="P:Cassandra.Mapping.Attributes.TableAttribute.ExplicitColumns"/>
            is used on the POCO, also tells the mapper that this column should be included when mapping.
            </summary>
            <param name="name">The name of the column in the database to map this property or field to.</param>
        </member>
        <member name="M:Cassandra.Mapping.Attributes.ColumnAttribute.#ctor">
            <summary>
            Used with the <see cref="P:Cassandra.Mapping.Attributes.TableAttribute.ExplicitColumns"/>, indicates this property should be mapped and that the column name
            is the same as the property or field name.
            </summary>
        </member>
        <member name="P:Cassandra.Mapping.Attributes.ColumnAttribute.Name">
            <summary>
            The column name in the database this property or field maps to.
            </summary>
        </member>
        <member name="P:Cassandra.Mapping.Attributes.ColumnAttribute.Type">
            <summary>
            Used to override the Type of the column in the database for INSERTs/UPDATEs.  The data in the property/field this attribute is 
            applied to will be converted to this Type for INSERTs/UPDATEs.  If null, the same Type of the property/field will be used
            instead.  (NOTE: This does NOT affect the Type when fetching/SELECTing data from the database.)
            </summary>
        </member>
        <member name="T:Cassandra.Mapping.Attributes.CounterAttribute">
            <summary>
            Indicates that the property or field is a counter column
            </summary>
        </member>
        <member name="T:Cassandra.Mapping.Attributes.SecondaryIndexAttribute">
            <summary>
            Determines that there is a secondary index defined for the column
            </summary>
        </member>
        <member name="T:Cassandra.Mapping.Attributes.StaticColumnAttribute">
            <summary>
            Indicates that the property or field is a static column in Cassandra
            </summary>
        </member>
        <member name="T:Cassandra.Mapping.Cql">
            <summary>
            Represents a CQL statement and its arguments.
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.Cql.#ctor(System.String,System.Object[])">
            <summary>
            Creates a new Cql instance using the CQL string and bind variable values specified.
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.Cql.WithOptions(System.Action{Cassandra.Mapping.CqlQueryOptions})">
            <summary>
            Configures any options for execution of this Cql instance.
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.Cql.New(System.String,System.Object[])">
            <summary>
            Creates a new CQL instance from the CQL statement and parameters specified.
            </summary>
        </member>
        <member name="P:Cassandra.Mapping.Cql.Statement">
            <summary>
            The CQL string.
            </summary>
        </member>
        <member name="P:Cassandra.Mapping.Cql.Arguments">
            <summary>
            Any bind variable values for the CQL string.
            </summary>
        </member>
        <member name="P:Cassandra.Mapping.Cql.QueryOptions">
            <summary>
            Options that are available on a per-query basis.
            </summary>
        </member>
        <member name="P:Cassandra.Mapping.Cql.AutoPage">
            <summary>
            Determines if automatic paging is enabled. Defaults to true.
            </summary>
        </member>
        <member name="T:Cassandra.Mapping.CqlBatch">
            <summary>
            A batch of CQL statements.
            </summary>
        </member>
        <member name="T:Cassandra.Mapping.ICqlBatch">
            <summary>
            Represents a batch of CQL statements.  Use the write methods (Insert, Update, Delete, etc.) to add statements to the batch.
            </summary>
        </member>
        <member name="T:Cassandra.Mapping.ICqlWriteClient">
            <summary>
            The contract for synchronous write operations.
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.ICqlWriteClient.Insert``1(``0,Cassandra.Mapping.CqlQueryOptions)">
            <summary>
            Inserts the specified POCO in Cassandra.
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.ICqlWriteClient.Update``1(``0,Cassandra.Mapping.CqlQueryOptions)">
            <summary>
            Updates the POCO specified in Cassandra.
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.ICqlWriteClient.Update``1(System.String,System.Object[])">
            <summary>
            Updates the table for the POCO type specified (T) using the CQL string and bind variable values specified.  Prepends "UPDATE tablename " to the CQL
            string you specify, getting the tablename appropriately from the POCO Type T.
            </summary>
            <typeparam name="T">The POCO Type being updated.</typeparam>
        </member>
        <member name="M:Cassandra.Mapping.ICqlWriteClient.Update``1(Cassandra.Mapping.Cql)">
            <summary>
            Updates the table for the POCO type specified (T) using the CQL statement specified.  Prepends "UPDATE tablename" to the CQL statement you specify,
            getting the tablename appropriately from the POCO Type T.
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.ICqlWriteClient.Delete``1(``0,Cassandra.Mapping.CqlQueryOptions)">
            <summary>
            Deletes the specified POCO from Cassandra.
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.ICqlWriteClient.Delete``1(System.String,System.Object[])">
            <summary>
            Deletes from the table for the POCO type specified (T) using the CQL string and bind variable values specified.  Prepends "DELETE FROM tablname " to
            the CQL string you specify, getting the tablename appropriately from the POCO Type T.
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.ICqlWriteClient.Delete``1(Cassandra.Mapping.Cql)">
            <summary>
            Deletes from the table for the POCO type specified (T) using the CQL string specified.  Prepends "DELETE FROM tablename " to the CQL statement you
            specify, getting the tablename appropriately from the POCO Type T.
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.ICqlWriteClient.Execute(System.String,System.Object[])">
            <summary>
            Executes an arbitrary CQL string with the bind variable values specified.
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.ICqlWriteClient.Execute(Cassandra.Mapping.Cql)">
            <summary>
            Executes the arbitrary CQL statement specified.
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.ICqlBatch.ConvertCqlArgument``2(``0)">
            <summary>
            Allows you to convert an argument/bind variable value being used in a CQL statement using the same converters that are being used by the client
            internally, including any user-defined conversions if you configured them.  Will convert a value of Type <typeparamref name="TValue"/> to a value of
            Type <typeparamref name="TDatabase"/> or throw an InvalidOperationException if no converter is available.
            </summary>
            <typeparam name="TValue">The original Type of the value.</typeparam>
            <typeparam name="TDatabase">The Type expected by Cassandra to convert to.</typeparam>
            <param name="value">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Cassandra.Mapping.ICqlBatch.InsertIfNotExists``1(``0,Cassandra.Mapping.CqlQueryOptions)">
            <summary>
            Inserts the specified POCO in Cassandra if not exists.
            </summary>
        </member>
        <member name="P:Cassandra.Mapping.ICqlBatch.Statements">
            <summary>
            The statements in the batch.
            </summary>
        </member>
        <member name="T:Cassandra.Mapping.Mapper">
            <summary>
            The default CQL client implementation which uses the DataStax driver <see cref="T:Cassandra.ISession"/> provided in the constructor
            for running queries against a Cassandra cluster.
            </summary>
            <seealso cref="T:Cassandra.Mapping.IMapper"/>
            <inheritdoc/>
        </member>
        <member name="T:Cassandra.Mapping.IMapper">
            <summary>
            A client for creating, updating, deleting, and reading POCOs from a Cassandra cluster.
            </summary>
            <seealso cref="T:Cassandra.Mapping.Mapper"/>
        </member>
        <member name="T:Cassandra.Mapping.ICqlQueryAsyncClient">
            <summary>
            A client capable of querying (reading) POCOs from a Cassandra cluster.
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.ICqlQueryAsyncClient.FetchAsync``1(Cassandra.Mapping.CqlQueryOptions)">
            <summary>
            Gets a list of all T from Cassandra.
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.ICqlQueryAsyncClient.FetchAsync``1(System.String,System.Object[])">
            <summary>
            Gets a list of T from Cassandra using the CQL statement and parameter values specified.
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.ICqlQueryAsyncClient.FetchAsync``1(Cassandra.Mapping.Cql)">
            <summary>
            Gets a list of T from Cassandra using the CQL statement specified.
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.ICqlQueryAsyncClient.FetchPageAsync``1(Cassandra.Mapping.Cql)">
            <summary>
            Gets a paged list of T results from Cassandra.
            Suitable for manually page through all the results of a query.
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.ICqlQueryAsyncClient.FetchPageAsync``1(Cassandra.Mapping.CqlQueryOptions)">
            <summary>
            Gets a paged list of T results from Cassandra using the CQL statement specified.
            Suitable for manually page through all the results of a query.
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.ICqlQueryAsyncClient.FetchPageAsync``1(System.Int32,System.Byte[],System.String,System.Object[])">
            <summary>
            Gets a paged list of T results from Cassandra.
            Suitable for manually page through all the results of a query.
            </summary>
            <param name="pageSize">Amount of items to return</param>
            <param name="pagingState">The token representing the state of the result page. To get the first page, use a null value.</param>
            <param name="query">Cql query</param>
            <param name="args">Query parameters</param>
            <returns></returns>
        </member>
        <member name="M:Cassandra.Mapping.ICqlQueryAsyncClient.SingleAsync``1(System.String,System.Object[])">
            <summary>
            Gets a single T from Cassandra using the CQL statement and parameter values specified.  Will throw if
            no records or more than one record is returned.
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.ICqlQueryAsyncClient.SingleAsync``1(Cassandra.Mapping.Cql)">
            <summary>
            Gets a single T from Cassandra using the CQL statement specified.  Will throw if no records or more than one
            record is returned.
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.ICqlQueryAsyncClient.SingleOrDefaultAsync``1(System.String,System.Object[])">
            <summary>
            Gets a single T from Cassandra using the CQL statement and parameter values specified.  Will return the
            default value of T if no records are found.  Will throw if more than one record is returned.
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.ICqlQueryAsyncClient.SingleOrDefaultAsync``1(Cassandra.Mapping.Cql)">
            <summary>
            Gets a single T from Cassandra using the CQL statement specified.  Will return the default value of T if no
            records are found.  Will throw if more than one record is returned.
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.ICqlQueryAsyncClient.FirstAsync``1(System.String,System.Object[])">
            <summary>
            Gets the first T from Cassandra using the CQL statement and parameter values specified.  Will throw if no
            records are returned.
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.ICqlQueryAsyncClient.FirstAsync``1(Cassandra.Mapping.Cql)">
            <summary>
            Gets the first T from Cassandra using the CQL specified.  Will throw if no records are returned.
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.ICqlQueryAsyncClient.FirstOrDefaultAsync``1(System.String,System.Object[])">
            <summary>
            Gets the first T from Cassandra using the CQL statement and parameter values specified.  Will return the
            default value of T is no records are found.
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.ICqlQueryAsyncClient.FirstOrDefaultAsync``1(Cassandra.Mapping.Cql)">
            <summary>
            Gets the first T from Cassandra using the CQL specified.  Will return the default value of T if no records
            are found.
            </summary>
        </member>
        <member name="T:Cassandra.Mapping.ICqlWriteAsyncClient">
            <summary>
            The contract for Async write operations.
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.ICqlWriteAsyncClient.InsertAsync``1(``0,Cassandra.Mapping.CqlQueryOptions)">
            <summary>
            Inserts the specified POCO in Cassandra.
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.ICqlWriteAsyncClient.UpdateAsync``1(``0,Cassandra.Mapping.CqlQueryOptions)">
            <summary>
            Updates the POCO specified in Cassandra.
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.ICqlWriteAsyncClient.UpdateAsync``1(System.String,System.Object[])">
            <summary>
            Updates the table for the POCO type specified (T) using the CQL string and bind variable values specified.  Prepends "UPDATE tablename " to the CQL
            string you specify, getting the tablename appropriately from the POCO Type T.
            </summary>
            <typeparam name="T">The POCO Type being updated.</typeparam>
        </member>
        <member name="M:Cassandra.Mapping.ICqlWriteAsyncClient.UpdateAsync``1(Cassandra.Mapping.Cql)">
            <summary>
            Updates the table for the poco type specified (T) using the CQL statement specified.  Prepends "UPDATE tablename" to the CQL statement you specify,
            getting the tablename appropriately from the POCO Type T.
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.ICqlWriteAsyncClient.DeleteAsync``1(``0,Cassandra.Mapping.CqlQueryOptions)">
            <summary>
            Deletes the specified POCO from Cassandra.
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.ICqlWriteAsyncClient.DeleteAsync``1(System.String,System.Object[])">
            <summary>
            Deletes from the table for the POCO type specified (T) using the CQL string and bind variable values specified.  Prepends "DELETE FROM tablname " to
            the CQL string you specify, getting the tablename appropriately from the POCO Type T.
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.ICqlWriteAsyncClient.DeleteAsync``1(Cassandra.Mapping.Cql)">
            <summary>
            Deletes from the table for the POCO type specified (T) using the CQL statement specified.  Prepends "DELETE FROM tablename " to the CQL statement you
            specify, getting the tablename appropriately from the POCO Type T.
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.ICqlWriteAsyncClient.ExecuteAsync(System.String,System.Object[])">
            <summary>
            Executes an arbitrary CQL string with the bind variable values specified.
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.ICqlWriteAsyncClient.ExecuteAsync(Cassandra.Mapping.Cql)">
            <summary>
            Executes an arbitrary CQL statement.
            </summary>
        </member>
        <member name="T:Cassandra.Mapping.ICqlQueryClient">
            <summary>
            The contract for synchronous read operations.
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.ICqlQueryClient.Fetch``1(Cassandra.Mapping.CqlQueryOptions)">
            <summary>
            Gets a list of all T from Cassandra.
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.ICqlQueryClient.Fetch``1(System.String,System.Object[])">
            <summary>
            Gets a list of T from Cassandra using the CQL statement and parameter values specified.
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.ICqlQueryClient.Fetch``1(Cassandra.Mapping.Cql)">
            <summary>
            Gets a list of T from Cassandra using the CQL statement specified.
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.ICqlQueryClient.FetchPage``1(Cassandra.Mapping.Cql)">
            <summary>
            Gets a paged list of T results from Cassandra.
            Suitable for manually page through all the results of a query.
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.ICqlQueryClient.FetchPage``1(Cassandra.Mapping.CqlQueryOptions)">
            <summary>
            Gets a paged list of T results from Cassandra using the CQL statement specified.
            Suitable for manually page through all the results of a query.
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.ICqlQueryClient.FetchPage``1(System.Int32,System.Byte[],System.String,System.Object[])">
            <summary>
            Gets a paged list of T results from Cassandra.
            Suitable for manually page through all the results of a query.
            </summary>
            <param name="pageSize">Amount of items to return</param>
            <param name="pagingState">The token representing the state of the result page. To get the first page, use a null value.</param>
            <param name="query">Cql query</param>
            <param name="args">Query parameters</param>
        </member>
        <member name="M:Cassandra.Mapping.ICqlQueryClient.Single``1(System.String,System.Object[])">
            <summary>
            Gets a single T from Cassandra using the CQL statement and parameter values specified.  Will throw if
            no records or more than one record is returned.
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.ICqlQueryClient.Single``1(Cassandra.Mapping.Cql)">
            <summary>
            Gets a single T from Cassandra using the CQL statement specified.  Will throw if no records or more than
            one record is returned.
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.ICqlQueryClient.SingleOrDefault``1(System.String,System.Object[])">
            <summary>
            Gets a single T from Cassandra using the CQL statement and parameter values specified.  Will return the
            default value of T if no records are found.  Will throw if more than one record is returned.
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.ICqlQueryClient.SingleOrDefault``1(Cassandra.Mapping.Cql)">
            <summary>
            Gets a single T from Cassandra using the CQL statement specified.  Will return the default value of T if
            no records are found.  Will throw if more than one record is returned.
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.ICqlQueryClient.First``1(System.String,System.Object[])">
            <summary>
            Gets the first T from Cassandra using the CQL statement and parameter values specified.  Will throw if no
            records are returned.
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.ICqlQueryClient.First``1(Cassandra.Mapping.Cql)">
            <summary>
            Gets the first T from Cassandra using the CQL statement specified.  Will throw if no records are returned.
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.ICqlQueryClient.FirstOrDefault``1(System.String,System.Object[])">
            <summary>
            Gets the first T from Cassandra using the CQL statement and parameter values specified.  Will return the
            default value of T is no records are found.
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.ICqlQueryClient.FirstOrDefault``1(Cassandra.Mapping.Cql)">
            <summary>
            Gets the first T from Cassandra using the CQL statement specified.  Will return the default value of T if
            no records are found.
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.IMapper.CreateBatch">
            <summary>
            Creates a new batch.
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.IMapper.Execute(Cassandra.Mapping.ICqlBatch)">
            <summary>
            Executes the batch specfied synchronously.
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.IMapper.ExecuteAsync(Cassandra.Mapping.ICqlBatch)">
            <summary>
            Executes the batch specified asynchronously.
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.IMapper.ConvertCqlArgument``2(``0)">
            <summary>
            Allows you to convert an argument/bind variable value being used in a CQL statement using the same converters that are being used by the client
            internally, including any user-defined conversions if you configured them.  Will convert a value of Type <typeparamref name="TValue"/> to a value of
            Type <typeparamref name="TDatabase"/> or throw an InvalidOperationException if no converter is available.
            </summary>
            <typeparam name="TValue">The original Type of the value.</typeparam>
            <typeparam name="TDatabase">The Type expected by Cassandra to convert to.</typeparam>
            <param name="value">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Cassandra.Mapping.IMapper.DeleteIf``1(System.String,System.Object[])">
            <summary>
            Deletes from the table for the POCO type specified (T) using the CQL string specified and query parameters specified.  
            Prepends "DELETE FROM tablename " to the CQL statement you specify, getting the tablename appropriately from the POCO Type T.
            <para>
            Returns information whether it was applied or not. If it was not applied, it returns details of the existing values.
            </para>
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.IMapper.DeleteIf``1(Cassandra.Mapping.Cql)">
            <summary>
            Deletes from the table for the POCO type specified (T) using the Cql query specified.  
            Prepends "DELETE FROM tablename " to the CQL statement you specify, getting the tablename appropriately from the POCO Type T.
            <para>
            Returns information whether it was applied or not. If it was not applied, it returns details of the existing values.
            </para>
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.IMapper.DeleteIfAsync``1(System.String,System.Object[])">
            <summary>
            Deletes from the table for the POCO type specified (T) using the CQL string specified and query parameters specified.  
            Prepends "DELETE FROM tablename " to the CQL statement you specify, getting the tablename appropriately from the POCO Type T.
            <para>
            Returns information whether it was applied or not. If it was not applied, it returns details of the existing values.
            </para>
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.IMapper.DeleteIfAsync``1(Cassandra.Mapping.Cql)">
            <summary>
            Deletes from the table for the POCO type specified (T) using the Cql query specified.  
            Prepends "DELETE FROM tablename " to the CQL statement you specify, getting the tablename appropriately from the POCO Type T.
            <para>
            Returns information whether it was applied or not. If it was not applied, it returns details of the existing values.
            </para>
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.IMapper.InsertIfNotExistsAsync``1(``0,Cassandra.Mapping.CqlQueryOptions)">
            <summary>
            Inserts the specified POCO in Cassandra, if not exists.
            <para>
            Returns information whether it was applied or not. If it was not applied, it returns details of the existing values.
            </para>
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.IMapper.InsertIfNotExists``1(``0,Cassandra.Mapping.CqlQueryOptions)">
            <summary>
            Inserts the specified POCO in Cassandra, if not exists.
            <para>
            Returns information whether it was applied or not. If it was not applied, it returns details of the existing values.
            </para>
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.IMapper.UpdateIf``1(Cassandra.Mapping.Cql)">
            <summary>
            Updates the table for the poco type specified (T) using the CQL statement specified, using lightweight transactions.
            Prepends "UPDATE tablename" to the CQL statement you specify, getting the table name appropriately from the POCO Type T.
            <para>
            Returns information whether it was applied or not. If it was not applied, it returns details of the existing values.
            </para>
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.IMapper.UpdateIf``1(System.String,System.Object[])">
            <summary>
            Updates the table for the poco type specified (T) using the CQL statement specified, using lightweight transactions.
            Prepends "UPDATE tablename" to the CQL statement you specify, getting the table name appropriately from the POCO Type T.
            <para>
            Returns information whether it was applied or not. If it was not applied, it returns details of the existing values.
            </para>
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.IMapper.UpdateIfAsync``1(Cassandra.Mapping.Cql)">
            <summary>
            Updates the table for the poco type specified (T) using the CQL statement specified, using lightweight transactions.
            Prepends "UPDATE tablename" to the CQL statement you specify, getting the table name appropriately from the POCO Type T.
            <para>
            Returns information whether it was applied or not. If it was not applied, it returns details of the existing values.
            </para>
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.IMapper.UpdateIfAsync``1(System.String,System.Object[])">
            <summary>
            Updates the table for the poco type specified (T) using the CQL statement specified, using lightweight transactions.
            Prepends "UPDATE tablename" to the CQL statement you specify, getting the table name appropriately from the POCO Type T.
            <para>
            Returns information whether it was applied or not. If it was not applied, it returns details of the existing values.
            </para>
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.IMapper.ExecuteConditionalAsync``1(Cassandra.Mapping.ICqlBatch)">
            <summary>
            Executes a batch that contains a Lightweight transaction. 
            </summary>
            <para>
            Returns information whether it was applied or not. If it was not applied, it returns details of the existing values.
            </para>
        </member>
        <member name="M:Cassandra.Mapping.IMapper.ExecuteConditional``1(Cassandra.Mapping.ICqlBatch)">
            <summary>
            Executes a batch that contains a Lightweight transaction. 
            </summary>
            <para>
            Returns information whether it was applied or not. If it was not applied, it returns details of the existing values.
            </para>
        </member>
        <member name="M:Cassandra.Mapping.Mapper.#ctor(Cassandra.ISession,Cassandra.Mapping.MappingConfiguration)">
            <summary>
            Creates a new instance of the mapper using the configuration provided
            </summary>
            <param name="session">Session to be used to execute the statements</param>
            <param name="config">Mapping definitions for the POCOs</param>
        </member>
        <member name="M:Cassandra.Mapping.Mapper.#ctor(Cassandra.ISession)">
            <summary>
            Creates a new instance of the mapper using <see cref="P:Cassandra.Mapping.MappingConfiguration.Global"/> mapping definitions.
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.Mapper.ExecuteAsyncAndAdapt``1(Cassandra.Mapping.Cql,System.Func{Cassandra.Statement,Cassandra.RowSet,``0})">
            <summary>
            Executes asynchronously and uses the delegate to adapt the RowSet into the return value.
            </summary>
        </member>
        <member name="T:Cassandra.Mapping.CqlQueryOptions">
            <summary>
            Represents options available on a per-query basis.
            </summary>
        </member>
        <member name="F:Cassandra.Mapping.CqlQueryOptions.None">
            <summary>
            An empty instance of CqlQueryOptions (i.e. no options are set).
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.CqlQueryOptions.SetConsistencyLevel(Cassandra.ConsistencyLevel)">
            <summary>
            Sets the consistency level to be used when executing the query.
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.CqlQueryOptions.EnableTracing">
            <summary>
            Enables tracing for the query.
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.CqlQueryOptions.DisableTracing">
            <summary>
            Disables tracing for the query.
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.CqlQueryOptions.SetPageSize(System.Int32)">
            <summary>
            Sets the page size for automatic paging for the query.
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.CqlQueryOptions.SetPagingState(System.Byte[])">
            <summary>
            Sets the token representing the page state for the query.
            Use <c>null</c> to get the first page of results.
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.CqlQueryOptions.SetRetryPolicy(Cassandra.IRetryPolicy)">
            <summary>
            Sets the retry policy for the query.
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.CqlQueryOptions.SetSerialConsistencyLevel(Cassandra.ConsistencyLevel)">
            <summary>
            Sets the serial consistency level for execution of the query.  (NOTE: This only applies to queries using lightweight
            transactions -- LWT).
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.CqlQueryOptions.DoNotPrepare">
            <summary>
            Specifies that a PreparedStatement should not be used for executing the query.
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.CqlQueryOptions.CopyOptionsToStatement(Cassandra.IStatement)">
            <summary>
            Copies any options set on this Cql instance to the statement provided.
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.CqlQueryOptions.New">
            <summary>
            Creates a new instance of CqlQueryOptions.
            </summary>
        </member>
        <member name="P:Cassandra.Mapping.CqlQueryOptions.NoPrepare">
            <summary>
            Whether or not to use a PreparedStatement when executing the query.
            </summary>
        </member>
        <member name="T:Cassandra.Mapping.CqlQueryOptions.EmptyQueryOptions">
            <summary>
            Represents no query options.  Copying options to a statement is a no-op.
            </summary>
        </member>
        <member name="T:Cassandra.Mapping.ColumnMap">
            <summary>
            A class for defining how a property or field on a POCO is mapped to a column via a fluent-style interface.
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.ColumnMap.#ctor(System.Reflection.MemberInfo,System.Type,System.Boolean)">
            <summary>
            Creates a new ColumnMap for the property/field specified by the MemberInfo.
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.ColumnMap.Ignore">
            <summary>
            Tells the mapper to ignore this property/field when mapping.
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.ColumnMap.WithName(System.String)">
            <summary>
            Tells the mapper to use the column name specified when mapping the property/field.
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.ColumnMap.WithDbType(System.Type)">
            <summary>
            Tells the mapper to convert the data in the property or field to the Type specified when doing an INSERT or UPDATE (i.e. the
            column type in Cassandra).  (NOTE: This does NOT affect the Type when fetching/SELECTing data from the database.)
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.ColumnMap.WithDbType``1">
            <summary>
            Tells the mapper to convert the data in the property or field to Type T when doing an INSERT or UPDATE (i.e. the
            column type in Cassandra).  (NOTE: This does NOT affect the Type when fetching/SELECTing data from the database.)
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.ColumnMap.WithSecondaryIndex">
            <summary>
            Tells the mapper that this column is defined also as a secondary index
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cassandra.Mapping.ColumnMap.AsCounter">
            <summary>
            Tells the mapper that this is a counter column
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.ColumnMap.AsStatic">
            <summary>
            Tells the mapper that this is a static column
            </summary>
        </member>
        <member name="T:Cassandra.Mapping.Map`1">
            <summary>
            A class for defining how to map a POCO via a fluent-style interface.  The mapping for Type T should be defined in the
            constructor of the sub class.
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.Map`1.#ctor">
            <summary>
            Creates a new fluent mapping definition for POCOs of Type TPoco.
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.Map`1.TableName(System.String)">
            <summary>
            Specifies what table to map the POCO to.
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.Map`1.PartitionKey(System.String[])">
            <summary>
            Specifies the partition key column names for the table using the order provided.
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.Map`1.PartitionKey(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Specifies the properties/fields on the POCO whose column names are the partition key for the table.
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.Map`1.ClusteringKey(System.String[])">
            <summary>
            Specifies the clustering key column names for the table using the order provided.
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.Map`1.ClusteringKey(System.Tuple{System.String,Cassandra.Mapping.SortOrder}[])">
            <summary>
            Specifies the Clustering keys with the corresponding clustering order
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.Map`1.ClusteringKey(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},Cassandra.Mapping.SortOrder)">
            <summary>
            Specifies a Clustering key with its clustering order
            </summary>
            <param name="column">Expression to select the property or the field</param>
            <param name="order">Clustering order</param>
        </member>
        <member name="M:Cassandra.Mapping.Map`1.ClusteringKey(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Specifies a Clustering key with unspecified order
            </summary>
            <param name="column">Expression to select the property or the field</param>
        </member>
        <member name="M:Cassandra.Mapping.Map`1.ExplicitColumns">
            <summary>
            Specifies that when mapping, we should only map columns that are explicitly defined here.  Use the Column method
            to define columns.
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.Map`1.CaseSensitive">
            <summary>
            Specifies that when generating queries, the table and column names identifiers must be quoted. Defaults to false.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cassandra.Mapping.Map`1.Column``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Action{Cassandra.Mapping.ColumnMap})">
            <summary>
            Defines options for mapping the column specified.
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.Map`1.KeyspaceName(System.String)">
            <summary>
            Specifies that when mapping, the table name should include the keyspace.
            Use only if the table you are mapping is in a different keyspace than the current <see cref="T:Cassandra.ISession"/>.
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.Map`1.CompactStorage">
            <summary>
            Specifies that the table is defined as COMPACT STORAGE
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cassandra.Mapping.Map`1.Column``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Sets the mapping for the expression using the default options.
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.Map`1.GetPropertyOrField``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Gets the MemberInfo for the property or field that the expression provided refers to.  Will throw if the Expression does not refer
            to a valid property or field on TPoco.
            </summary>
        </member>
        <member name="T:Cassandra.Mapping.MappingConfiguration">
            <summary>
            Stores the mapping definitions to be used by the Mapper and Linq components.
            </summary>
        </member>
        <member name="F:Cassandra.Mapping.MappingConfiguration.GlobalInstance">
            <summary>
            Instance to be used for global mappings. It won't get initialized until the first use.
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.MappingConfiguration.#ctor">
            <summary>
            Creates a new instance of MappingConfiguration to store the mapping definitions to be used by the Mapper or Linq components.
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.MappingConfiguration.ConvertTypesUsing(Cassandra.Mapping.TypeConversion.TypeConverter)">
            <summary>
            Configures CqlPoco to use the specified type conversion factory when getting type conversion functions for converting 
            between data types in the database and your POCO objects.
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.MappingConfiguration.Define(Cassandra.Mapping.ITypeDefinition[])">
            <summary>
            Specifies an individual mapping definition.  Usually used along with the <see cref="T:Cassandra.Mapping.Map`1"/> class which
            allows you to define mappings with a fluent interface.  Will throw if a mapping has already been defined for a
            given POCO Type.
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.MappingConfiguration.Define(Cassandra.Mapping.Mappings[])">
            <summary>
            Specifies collections of <see cref="T:Cassandra.Mapping.Mappings"/> specified.  Users should sub-class the <see cref="T:Cassandra.Mapping.Mappings"/>
            class and use the fluent interface there to define mappings for POCOs.
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.MappingConfiguration.Define``1">
            <summary>
            Specifies a collection of mappings defined in Type T.  Type T should be a sub-class of <see cref="T:Cassandra.Mapping.Mappings"/> and
            must have a parameter-less constructor.
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.MappingConfiguration.SetMaxPreparedStatementsThreshold(System.Int32)">
            <summary>
            Sets the maximum amount of prepared statements before issuing a logger warning. Defaults to 500.
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.MappingConfiguration.Clear">
            <summary>
            Clears all the mapping defined for this instance
            </summary>
        </member>
        <member name="P:Cassandra.Mapping.MappingConfiguration.Global">
            <summary>
            Global mapping definitions to be reused across all the Application Domain.
            </summary>
        </member>
        <member name="P:Cassandra.Mapping.MappingConfiguration.MapperFactory">
            <summary>
            Retrieves the MapperFactory associated with this configuration instance
            </summary>
        </member>
        <member name="P:Cassandra.Mapping.MappingConfiguration.StatementFactory">
            <summary>
            Retrieves the StatementFactory associated with this configuration instance
            </summary>
        </member>
        <member name="P:Cassandra.Mapping.MappingConfiguration.MaxPreparedStatementsThreshold">
            <summary>
            Gets or sets the maximum amount of prepared statements before issuing a logger warning. Defaults to 500.
            </summary>
        </member>
        <member name="T:Cassandra.Mapping.Mappings">
            <summary>
            A class for defining how to map multiple POCOs via a fluent-style interface.  Inheritors should use the 
            <see cref="M:Cassandra.Mapping.Mappings.For``1"/> method inside their constructor to define mappings.
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.Mappings.#ctor">
            <summary>
            Creates a new collection of mappings.  Inheritors should define all their mappings in the constructor of the sub-class.
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.Mappings.For``1">
            <summary>
            Adds a mapping for the Poco type specified (TPoco).
            </summary>
        </member>
        <member name="T:Cassandra.Mapping.Attributes.IgnoreAttribute">
            <summary>
            Tells the mapper to ignore mapping this property.
            </summary>
        </member>
        <member name="T:Cassandra.Mapping.Attributes.AttributeBasedColumnDefinition">
            <summary>
            A column definition that uses attributes on the field/property to get its settings.
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.Attributes.AttributeBasedColumnDefinition.#ctor(System.Reflection.FieldInfo)">
            <summary>
            Creates a new column definition for the field specified using any attributes on the field to determine mapping configuration.
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.Attributes.AttributeBasedColumnDefinition.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            Creates a new column definition for the property specified using any attributes on the property to determine mapping configuration.
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.Attributes.AttributeBasedColumnDefinition.HasAttribute(System.Reflection.MemberInfo,System.Type)">
            <summary>
            Determines if the member has an attribute applied
            </summary>
        </member>
        <member name="T:Cassandra.Mapping.Attributes.AttributeBasedTypeDefinition">
            <summary>
            A type definition that uses attributes on the class to determine its settings.
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.Attributes.AttributeBasedTypeDefinition.#ctor(System.Type)">
            <summary>
            Creates a new TypeDefinition for the POCO Type specified using any attributes on the class to determine mappings.
            </summary>
        </member>
        <member name="T:Cassandra.Mapping.MapperFactory">
            <summary>
            Component capable of getting/creating Func&lt;Row, T&gt; functions that create POCOs of type T from a Cassandra Row.
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.MapperFactory.GetMapper``1(System.String,Cassandra.RowSet)">
            <summary>
            Gets a mapper Func that can map from a C* row to the POCO type T for the given statement.
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.MapperFactory.GetValueCollector``1(System.String,System.Boolean,System.Boolean)">
            <summary>
            Gets a Func that can collect all the values on a given POCO T and return an object[] of those values in the same
            order as the PocoColumns for T's PocoData.
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.MapperFactory.CreateMapper``1(Cassandra.RowSet)">
            <summary>
            Creates a mapper Func for going from a C* Row to a POCO, T.
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.MapperFactory.CreateValueCollector``1(System.Boolean,System.Boolean)">
            <summary>
            Creates a Func that collects all the values from a POCO (of type T) into an object[], with the values being in the array in the
            same order as the POCO's PocoData.Columns collection.
            </summary>
            <param name="primaryKeyValuesOnly">Determines if only the primary key values should be extracted</param>
            <param name="primaryKeyValuesLast">Determines if only the values should contain first the non primary keys and then the primary keys</param>
        </member>
        <member name="M:Cassandra.Mapping.MapperFactory.CreateMapperForSingleColumnToPoco``1(Cassandra.RowSet,Cassandra.Mapping.PocoData)">
            <summary>
            Creates a mapper that flattens a single column's value directly to the "POCO"'s value.  (POCO here most likely being a value type/string/etc.)
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.MapperFactory.CreateMapperForPoco``1(Cassandra.RowSet,Cassandra.Mapping.PocoData)">
            <summary>
            Creates a mapper Func for a POCO.
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.MapperFactory.GetExpressionToGetValueFromPoco(System.Linq.Expressions.ParameterExpression,Cassandra.Mapping.PocoColumn)">
            <summary>
            Gets an Expression that gets the value of a POCO field or property.
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.MapperFactory.GetExpressionToGetColumnValueFromRow(System.Linq.Expressions.ParameterExpression,Cassandra.CqlColumn,System.Type)">
            <summary>
            Gets an Expression that represents calling Row.GetValue&lt;T&gt;(columnIndex) and applying any type conversion necessary to
            convert it to the destination type on the POCO.
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.MapperFactory.TryGetCreateEmptyCollectionExpression(Cassandra.CqlColumn,System.Type,System.Linq.Expressions.Expression@)">
            <summary>
            Tries to get an Expression that will create an empty collection compatible with the POCO column's type if the type coming from
            the database is a collection type.  Returns true if successful, along with the Expression in an out parameter.
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.MapperFactory.IsCassandraCollection(Cassandra.CqlColumn)">
            <summary>
            Returns true if the CqlColumn is a collection type.
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.MapperFactory.ImplementsCollectionInterface(System.Type)">
            <summary>
            Returns true if the Type implements the ICollection&lt;T&gt; interface.
            </summary>
        </member>
        <member name="P:Cassandra.Mapping.PocoColumn.ColumnName">
            <summary>
            The name of the column in the database.
            </summary>
        </member>
        <member name="P:Cassandra.Mapping.PocoColumn.ColumnType">
            <summary>
            The data type of the column in the database for use when inserting/updating.
            </summary>
        </member>
        <member name="P:Cassandra.Mapping.PocoColumn.MemberInfo">
            <summary>
            The MemberInfo for the POCO field/property.
            </summary>
        </member>
        <member name="P:Cassandra.Mapping.PocoColumn.MemberInfoType">
            <summary>
            The .NET Type of the POCO field/property (i.e. FieldInfo.FieldType or PropertyInfo.PropertyType)
            </summary>
        </member>
        <member name="P:Cassandra.Mapping.PocoColumn.SecondaryIndex">
            <summary>
            Determines that there is a secondary index defined for this column
            </summary>
        </member>
        <member name="P:Cassandra.Mapping.PocoColumn.IsCounter">
            <summary>
            Determines that it is a counter column
            </summary>
        </member>
        <member name="P:Cassandra.Mapping.PocoColumn.IsStatic">
            <summary>
            Determines that it is a static column
            </summary>
        </member>
        <member name="T:Cassandra.Mapping.PocoData">
            <summary>
            Represents data about a POCO and its mapping to Cassandra Rows in a table.
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.PocoData.GetNonPrimaryKeyColumns">
            <summary>
            Gets only the PocoColumns from the collection of all columns that are NOT part of the partition or clustering keys.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cassandra.Mapping.PocoData.GetPrimaryKeyColumns">
            <summary>
            Gets only the PocoColumns from the collection of all columns that are uniquely identifies a cql row.
            First partition and then clustering keys.
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.PocoData.GetColumnByMemberName(System.String)">
            <summary>
            Gets the column information for a given member name
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.PocoData.GetColumnNameByMemberName(System.String)">
            <summary>
            Gets the column name for a given member name
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.PocoData.GetColumnName(System.Reflection.MemberInfo)">
            <summary>
            Gets the column name for a given member
            </summary>
        </member>
        <member name="P:Cassandra.Mapping.PocoData.PocoType">
            <summary>
            The .NET Type of the POCO this data is for.
            </summary>
        </member>
        <member name="P:Cassandra.Mapping.PocoData.TableName">
            <summary>
            The table name the POCO maps to in C*.
            </summary>
        </member>
        <member name="P:Cassandra.Mapping.PocoData.KeyspaceName">
            <summary>
            When defined, states that all queries generated should include fully qualified table names (ie: keyspace.table)
            </summary>
        </member>
        <member name="P:Cassandra.Mapping.PocoData.Columns">
            <summary>
            All columns (including PK columns) keyed by their column names and ordered so that the primary key columns are in order last.
            </summary>
        </member>
        <member name="P:Cassandra.Mapping.PocoData.PartitionKeys">
            <summary>
            Gets the partition key columns of the table.
            </summary>
        </member>
        <member name="P:Cassandra.Mapping.PocoData.ClusteringKeys">
            <summary>
            Gets the clustering key columns of the table.
            </summary>
        </member>
        <member name="P:Cassandra.Mapping.PocoData.CaseSensitive">
            <summary>
            Determines if the queries generated using this poco information should be case-sensitive
            </summary>
        </member>
        <member name="P:Cassandra.Mapping.PocoData.AllowFiltering">
            <summary>
            Determines that all queries generated should allow filtering. Backwards compatibility.
            </summary>
        </member>
        <member name="P:Cassandra.Mapping.PocoData.MissingPrimaryKeyColumns">
            <summary>
            The column names of any primary key columns that aren't in the Columns collection.  Could indicate a misconfiguration if the POCO
            is going to be used in auto-generated UPDATE/DELETE statements.
            </summary>
        </member>
        <member name="T:Cassandra.Mapping.PocoDataFactory">
            <summary>
            Factory responsible for creating PocoData instances, uses AttributeBasedTypeDefinition to create new Poco information in case a definition was not provided.
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.PocoDataFactory.#ctor(Cassandra.Mapping.Utils.LookupKeyedCollection{System.Type,Cassandra.Mapping.ITypeDefinition})">
            <summary>
            Creates a new factory responsible of PocoData instances.
            </summary>
            <param name="predefinedTypeDefinitions">Explicitly declared type definitions</param>
        </member>
        <member name="M:Cassandra.Mapping.PocoDataFactory.AddDefinitionDefault(System.Type,System.Func{Cassandra.Mapping.ITypeDefinition})">
            <summary>
            Adds a definition to the local state in case no definition was explicitly defined.
            Used when the local default (AttributeBasedTypeDefinition) is not valid for a given type.
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.PocoDataFactory.GetMappableFields(System.Type)">
            <summary>
            Gets any public instance fields that are settable for the given type.
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.PocoDataFactory.GetMappableProperties(System.Type)">
            <summary>
            Gets any public instance properties for the given type.
            </summary>
        </member>
        <member name="T:Cassandra.Mapping.Attributes.PartitionKeyAttribute">
            <summary>
            Indicates that the property or field is part of the Partition Key
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.Attributes.PartitionKeyAttribute.#ctor(System.Int32)">
            <summary>
            Specify the primary key column names (in order) for the table.
            </summary>
            <param name="index">The index of the key, relative to the other partition keys.</param>
        </member>
        <member name="P:Cassandra.Mapping.Attributes.PartitionKeyAttribute.Index">
            <summary>
            The index of the key, relative to the other partition keys.
            </summary>
        </member>
        <member name="T:Cassandra.Mapping.SortOrder">
            <summary>
            Specifies sort order
            </summary>
        </member>
        <member name="T:Cassandra.Mapping.Statements.CqlGenerator">
            <summary>
            A utility class capable of generating CQL statements for a POCO.
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.Statements.CqlGenerator.AddSelect``1(Cassandra.Mapping.Cql)">
            <summary>
            Adds "SELECT columnlist" and "FROM tablename" to a CQL statement if they don't already exist for a POCO of Type T.
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.Statements.CqlGenerator.Escape(System.String,Cassandra.Mapping.PocoData)">
            <summary>
            Escapes an identier if necessary
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.Statements.CqlGenerator.GenerateInsert``1(System.Boolean)">
            <summary>
            Generates an "INSERT INTO tablename (columns) VALUES (?)" statement for a POCO of Type T.
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.Statements.CqlGenerator.GenerateUpdate``1">
            <summary>
            Generates an "UPDATE tablename SET columns = ? WHERE pkColumns = ?" statement for a POCO of Type T.
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.Statements.CqlGenerator.PrependUpdate``1(Cassandra.Mapping.Cql)">
            <summary>
            Prepends the CQL statement specified with "UPDATE tablename " for a POCO of Type T.
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.Statements.CqlGenerator.GenerateDelete``1">
            <summary>
            Generates a "DELETE FROM tablename WHERE pkcolumns = ?" statement for a POCO of Type T.
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.Statements.CqlGenerator.PrependDelete``1(Cassandra.Mapping.Cql)">
            <summary>
            Prepends the CQL statement specified with "DELETE FROM tablename " for a POCO of Type T.
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.Statements.CqlGenerator.GetCreate(Cassandra.Mapping.PocoData,System.String,System.String,System.Boolean)">
            <summary>
            Gets the CQL queries involved in a table creation (CREATE TABLE, CREATE INDEX)
            </summary>
        </member>
        <member name="T:Cassandra.Mapping.Statements.StatementFactory">
            <summary>
            Creates statements from CQL that can be executed with the C* driver.
            </summary>
        </member>
        <member name="T:Cassandra.Mapping.Attributes.TableAttribute">
            <summary>
            Used to specify the table a POCO maps to.
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.Attributes.TableAttribute.#ctor">
            <summary>
            Specifies the table the POCO maps to.
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.Attributes.TableAttribute.#ctor(System.String)">
            <summary>
            Specifies the table a POCO maps to.
            </summary>
            <param name="tableName">The name of the table to map this POCO to.</param>
        </member>
        <member name="P:Cassandra.Mapping.Attributes.TableAttribute.Name">
            <summary>
            The table name.
            </summary>
        </member>
        <member name="P:Cassandra.Mapping.Attributes.TableAttribute.CompactStorage">
            <summary>
            Determines if the table is defined with COMPACT STORAGE
            </summary>
        </member>
        <member name="P:Cassandra.Mapping.Attributes.TableAttribute.AllowFiltering">
            <summary>
            Determines if all the queries generated for this table uses ALLOW FILTERING option
            </summary>
        </member>
        <member name="P:Cassandra.Mapping.Attributes.TableAttribute.CaseSensitive">
            <summary>
            If the table identifiers are case sensitive (defaults to false)
            </summary>
        </member>
        <member name="P:Cassandra.Mapping.Attributes.TableAttribute.Keyspace">
            <summary>
            Gets or sets the keyspace name. 
            Use only if the table you are mapping is in a different keyspace than the current <see cref="T:Cassandra.ISession"/>.
            </summary>
        </member>
        <member name="P:Cassandra.Mapping.Attributes.TableAttribute.ExplicitColumns">
            <summary>
            Determines if it should only map properties/fields on the POCO that have a <see cref="T:Cassandra.Mapping.Attributes.ColumnAttribute"/>
            </summary>
        </member>
        <member name="T:Cassandra.Mapping.TypeConversion.DefaultTypeConverter">
            <summary>
            A default implementation of TypeConversionFactory that doesn't do any user defined conversions.
            </summary>
        </member>
        <member name="T:Cassandra.Mapping.TypeConversion.TypeConverter">
            <summary>
            A factory for retrieving Functions capable of converting between two Types.  To use custom Type conversions, inheritors
            should derive from this class and implement the <see cref="M:Cassandra.Mapping.TypeConversion.TypeConverter.GetUserDefinedFromDbConverter``2"/> and
            <see cref="M:Cassandra.Mapping.TypeConversion.TypeConverter.GetUserDefinedToDbConverter``2"/> methods.
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.TypeConversion.TypeConverter.#ctor">
            <summary>
            Creates a new TypeConverter instance.
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.TypeConversion.TypeConverter.ConvertCqlArgument``2(``0)">
            <summary>
            Converts a value of Type <typeparamref name="TValue"/> to a value of Type <typeparamref name="TDatabase"/> using any available converters that would 
            normally be used when converting a value for storage in Cassandra.  If no converter is available, wlll throw an InvalidOperationException.
            </summary>
            <typeparam name="TValue">The value's original Type.</typeparam>
            <typeparam name="TDatabase">The Type expected by the database for the parameter.</typeparam>
            <param name="value">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Cassandra.Mapping.TypeConversion.TypeConverter.GetFromDbConverter(System.Type,System.Type)">
            <summary>
            Gets a Function that can convert a source type value from the database to a destination type value on a POCO.
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.TypeConversion.TypeConverter.GetToDbConverter(System.Type,System.Type)">
            <summary>
            Gets a Function that can convert a source type value on a POCO to a destination type value for storage in C*.
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.TypeConversion.TypeConverter.FindFromDbConverter``2">
            <summary>
            This method is generic because it seems like a good idea to enforce that the abstract method that returns a user-defined Func returns 
            one with the correct type parameters, so we'd be invoking that abstract method generically via reflection anyway each time.  So we might
            as well make this method generic and invoke it via reflection (it also makes the code for returning the built-in EnumStringMapper func 
            simpler since that class is generic).
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.TypeConversion.TypeConverter.FindToDbConverter``2">
            <summary>
            See note above on why this is generic.
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.TypeConversion.TypeConverter.GetUserDefinedFromDbConverter``2">
            <summary>
            Gets any user defined conversion functions that can convert a value of type <typeparamref name="TDatabase"/> (coming from Cassandra) to a
            type of <typeparamref name="TPoco"/> (a field or property on a POCO).  Return null if no conversion Func is available.
            </summary>
            <typeparam name="TDatabase">The Type of the source value from Cassandra to be converted.</typeparam>
            <typeparam name="TPoco">The Type of the destination value on the POCO.</typeparam>
            <returns>A Func that can convert between the two types or null if one is not available.</returns>
        </member>
        <member name="M:Cassandra.Mapping.TypeConversion.TypeConverter.GetUserDefinedToDbConverter``2">
            <summary>
            Gets any user defined conversion functions that can convert a value of type <typeparamref name="TPoco"/> (coming from a property/field on a
            POCO) to a type of <typeparamref name="TDatabase"/> (the Type expected by Cassandra for the database column).  Return null if no conversion
            Func is available.
            </summary>
            <typeparam name="TPoco">The Type of the source value from the POCO property/field to be converted.</typeparam>
            <typeparam name="TDatabase">The Type expected by C* for the database column.</typeparam>
            <returns>A Func that can converter between the two Types or null if one is not available.</returns>
        </member>
        <member name="M:Cassandra.Mapping.TypeConversion.DefaultTypeConverter.GetUserDefinedFromDbConverter``2">
            <summary>
            Always returns null.
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.TypeConversion.DefaultTypeConverter.GetUserDefinedToDbConverter``2">
            <summary>
            Always returns null.
            </summary>
        </member>
        <member name="T:Cassandra.Mapping.TypeConversion.EnumStringMapper`1">
            <summary>
            A class that maps strings to enum values.  Uses a cache internally to speed lookups.
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.TypeConversion.EnumStringMapper`1.MapStringToEnum(System.String)">
            <summary>
            Converts a string value to an enum of Type T.
            </summary>
        </member>
        <member name="T:Cassandra.Mapping.TypeConversion.NullableEnumStringMapper`1">
            <summary>
            Static class for mapping between strings and nullable enums.  Uses a cache internally to speed lookups.
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.TypeConversion.NullableEnumStringMapper`1.MapStringToEnum(System.String)">
            <summary>
            Converts a string value to a nullable enum value of Type T.
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.TypeConversion.NullableEnumStringMapper`1.MapEnumToString(`0)">
            <summary>
            Converts a nullable enum value of Type T to a string.
            </summary>
        </member>
        <member name="T:Cassandra.Mapping.Utils.EnumerableExtensions">
            <summary>
            Extension methods to IEnumerable&lt;T&gt;.
            </summary>
        </member>
        <member name="M:Cassandra.Mapping.Utils.EnumerableExtensions.ToCommaDelimitedString(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Converts an IEnumerable&lt;string&gt; to a comma-delimited string.
            </summary>
        </member>
        <member name="T:Cassandra.Mapping.Utils.LookupKeyedCollection`2">
            <summary>
            A concrete implementation of System.Collections.ObjectModel.KeyedCollection which acts as a List/Dictionary hybrid where
            the Dictionary key is embedded in the item and list order is preserved.
            </summary>
        </member>
        <member name="T:Cassandra.Metadata">
            <summary>
             Keeps metadata on the connected cluster, including known nodes and schema
             definitions.
            </summary>
        </member>
        <member name="M:Cassandra.Metadata.AllHosts">
            <summary>
             Returns all known hosts of this cluster.
            </summary>
            <returns>collection of all known hosts of this cluster.</returns>
        </member>
        <member name="M:Cassandra.Metadata.GetReplicas(System.String,System.Byte[])">
            <summary>
            Get the replicas for a given partition key and keyspace
            </summary>
        </member>
        <member name="M:Cassandra.Metadata.GetKeyspace(System.String)">
            <summary>
             Returns metadata of specified keyspace.
            </summary>
            <param name="keyspace"> the name of the keyspace for which metadata should be
             returned. </param>
            <returns>the metadata of the requested keyspace or <c>null</c> if
             <c>* keyspace</c> is not a known keyspace.</returns>
        </member>
        <member name="M:Cassandra.Metadata.GetKeyspaces">
            <summary>
             Returns a collection of all defined keyspaces names.
            </summary>
            <returns>a collection of all defined keyspaces names.</returns>
        </member>
        <member name="M:Cassandra.Metadata.GetTables(System.String)">
            <summary>
             Returns names of all tables which are defined within specified keyspace.
            </summary>
            <param name="keyspace">the name of the keyspace for which all tables metadata should be
             returned.</param>
            <returns>an ICollection of the metadata for the tables defined in this
             keyspace.</returns>
        </member>
        <member name="M:Cassandra.Metadata.GetTable(System.String,System.String)">
            <summary>
             Returns TableMetadata for specified table in specified keyspace.
            </summary>
            <param name="keyspace">name of the keyspace within specified table is definied.</param>
            <param name="tableName">name of table for which metadata should be returned.</param>
            <returns>a TableMetadata for the specified table in the specified keyspace.</returns>
        </member>
        <member name="M:Cassandra.Metadata.GetUdtDefinition(System.String,System.String)">
            <summary>
            Gets the definition associated with a User Defined Type from Cassandra
            </summary>
        </member>
        <member name="M:Cassandra.Metadata.GetFunction(System.String,System.String,System.String[])">
            <summary>
            Gets the definition associated with a User Defined Function from Cassandra
            </summary>
            <returns>The function metadata or null if not found.</returns>
        </member>
        <member name="M:Cassandra.Metadata.GetAggregate(System.String,System.String,System.String[])">
            <summary>
            Gets the definition associated with a aggregate from Cassandra
            </summary>
            <returns>The aggregate metadata or null if not found.</returns>
        </member>
        <member name="M:Cassandra.Metadata.RefreshSchema(System.String,System.String)">
            <summary>
            Updates the keyspace and token information
            </summary>
        </member>
        <member name="M:Cassandra.Metadata.RefreshKeyspaces(System.Boolean)">
            <summary>
            Retrieves the keyspaces, stores the information in the internal state and rebuilds the token map
            </summary>
        </member>
        <member name="M:Cassandra.Metadata.WaitForSchemaAgreement(Cassandra.Connection)">
            <summary>
            Waits until that the schema version in all nodes is the same or the waiting time passed.
            This method blocks the calling thread.
            </summary>
        </member>
        <member name="P:Cassandra.Metadata.ClusterName">
            <summary>
             Returns the name of currently connected cluster.
            </summary>
            <returns>the Cassandra name of currently connected cluster.</returns>
        </member>
        <member name="P:Cassandra.Metadata.ControlConnection">
            <summary>
            Control connection to be used to execute the queries to retrieve the metadata
            </summary>
        </member>
        <member name="T:Cassandra.Configuration">
            <summary>
             The configuration of the cluster. This handle setting: <ul> <li>Cassandra
             binary protocol level configuration (compression).</li> <li>Connection
             pooling configurations.</li> <li>low-level tcp configuration options
             (tcpNoDelay, keepAlive, ...).</li> </ul>
            </summary>
        </member>
        <member name="M:Cassandra.Configuration.GetPoolingOptions(System.Byte)">
            <summary>
            Gets the pooling options. If not specified, gets the default by protocol version
            </summary>
        </member>
        <member name="P:Cassandra.Configuration.Policies">
            <summary>
             Gets the policies set for the cluster.
            </summary>
        </member>
        <member name="P:Cassandra.Configuration.SocketOptions">
            <summary>
             Gets the low-level tcp configuration options used (tcpNoDelay, keepAlive, ...).
            </summary>
        </member>
        <member name="P:Cassandra.Configuration.ProtocolOptions">
            <summary>
             The Cassandra binary protocol level configuration (compression).
            </summary>
            
            <returns>the protocol options.</returns>
        </member>
        <member name="P:Cassandra.Configuration.PoolingOptions">
            <summary>
             The connection pooling configuration, defaults to null.
            </summary>
            <returns>the pooling options.</returns>
        </member>
        <member name="P:Cassandra.Configuration.ClientOptions">
            <summary>
             The .net client additional options configuration.
            </summary>
        </member>
        <member name="P:Cassandra.Configuration.QueryOptions">
            <summary>
             The query configuration.
            </summary>
        </member>
        <member name="P:Cassandra.Configuration.AuthProvider">
            <summary>
             The authentication provider used to connect to the Cassandra cluster.
            </summary>
            
            <returns>the authentication provider in use.</returns>
        </member>
        <member name="P:Cassandra.Configuration.AuthInfoProvider">
            <summary>
             The authentication provider used to connect to the Cassandra cluster.
            </summary>
            
            <returns>the authentication provider in use.</returns>
        </member>
        <member name="P:Cassandra.Configuration.AddressTranslator">
            <summary>
             The address translator used to translate Cassandra node address.
            </summary> 
            <returns>the address translator in use.</returns>
        </member>
        <member name="M:Cassandra.ControlConnection.Init">
            <summary>
            Tries to create a connection to any of the contact points and retrieve cluster metadata for the first time. Not thread-safe.
            </summary>
            <exception cref="T:Cassandra.NoHostAvailableException"/>
            <exception cref="T:Cassandra.DriverInternalError"/>
        </member>
        <member name="M:Cassandra.ControlConnection.Connect(System.Boolean)">
            <summary>
            Tries to create the a connection to the cluster
            </summary>
            <exception cref="T:Cassandra.NoHostAvailableException"/>
            <exception cref="T:Cassandra.DriverInternalError"/>
        </member>
        <member name="M:Cassandra.ControlConnection.SubscribeEventHandlers">
            <summary>
            Gets the next connection and setup the event listener for the host and connection.
            Not thread-safe.
            </summary>
        </member>
        <member name="M:Cassandra.ControlConnection.GetAddressForPeerHost(Cassandra.Row,Cassandra.IAddressTranslator,System.Int32)">
            <summary>
            Uses system.peers values to build the Address translator
            </summary>
        </member>
        <member name="M:Cassandra.ControlConnection.Query(System.String,System.Boolean)">
            <summary>
            Uses the active connection to execute a query
            </summary>
        </member>
        <member name="M:Cassandra.ControlConnection.GetRowSet(Cassandra.AbstractResponse)">
            <summary>
            Validates that the result contains a RowSet and returns it.
            </summary>
            <exception cref="T:System.NullReferenceException"/>
            <exception cref="T:Cassandra.DriverInternalError"/>
        </member>
        <member name="P:Cassandra.ControlConnection.ProtocolVersion">
            <summary>
            Gets the recommended binary protocol version to be used for this cluster.
            </summary>
        </member>
        <member name="P:Cassandra.ControlConnection.BindAddress">
            <summary>
            The address of the endpoint used by the ControlConnection
            </summary>
        </member>
        <member name="T:Cassandra.ClientOptions">
            <summary>
             Additional options of the .net Cassandra driver.
            </summary>
        </member>
        <member name="T:Cassandra.AlreadyExistsException">
            <summary>
             Exception thrown when a query attemps to create a keyspace or table that
             already exists.
            </summary>
        </member>
        <member name="P:Cassandra.AlreadyExistsException.Keyspace">
            <summary>
             Gets the name of keyspace that either already exists or is home to the table that
             already exists.
            </summary>
        </member>
        <member name="P:Cassandra.AlreadyExistsException.Table">
            <summary>
             If the failed creation was a table creation, gets the name of the table that already exists. 
            </summary>
        </member>
        <member name="P:Cassandra.AlreadyExistsException.WasTableCreation">
            <summary>
             Gets whether the query yielding this exception was a table creation
             attempt.
            </summary>
        </member>
        <member name="T:Cassandra.AuthenticationException">
            <summary>
             Indicates an error during the authentication phase while connecting to a node.
            </summary>
        </member>
        <member name="P:Cassandra.AuthenticationException.Host">
            <summary>
             Gets the host for which the authentication failed. 
            </summary>
        </member>
        <member name="T:Cassandra.DriverInternalError">
            <summary>
             An unexpected error happened internally. This should never be raise and
             indicates a bug (either in the driver or in Cassandra).
            </summary>
        </member>
        <member name="T:Cassandra.InvalidConfigurationInQueryException">
            <summary>
             A specific invalid query exception that indicates that the query is invalid
             because of some configuration problem. <p> This is generally throw by query
             that manipulate the schema (CREATE and ALTER) when the required configuration
             options are invalid.</p>
            </summary>
        </member>
        <member name="T:Cassandra.InvalidQueryException">
            <summary>
             Indicates a syntactically correct but invalid query.
            </summary>
        </member>
        <member name="T:Cassandra.NoHostAvailableException">
            <summary>
             Exception thrown when a query cannot be performed because no host are
             available. This exception is thrown if <ul> <li>either there is no host live
             in the cluster at the moment of the query</li> <li>all host that have been
             tried have failed due to a connection problem</li> </ul> For debugging
             purpose, the list of hosts that have been tried along with the failure cause
             can be retrieved using the <link>#errors</link> method.
            </summary>
        </member>
        <member name="P:Cassandra.NoHostAvailableException.Errors">
            <summary>
             Gets the hosts tried along with descriptions of the error encountered while trying them. 
            </summary>
        </member>
        <member name="T:Cassandra.QueryTimeoutException">
            <summary>
             A Cassandra timeout during a query. Such an exception is returned when the
             query has been tried by Cassandra but cannot be achieved with the requested
             consistency level within the rpc timeout set for Cassandra.
            </summary>
        </member>
        <member name="P:Cassandra.QueryTimeoutException.ConsistencyLevel">
            <summary>
             Gets the consistency level of the operation that time outed. 
            </summary>
        </member>
        <member name="P:Cassandra.QueryTimeoutException.ReceivedAcknowledgements">
            <summary>
            Gets the number of replica that had acknowledged/responded to the operation before it time outed. 
            </summary>
        </member>
        <member name="P:Cassandra.QueryTimeoutException.RequiredAcknowledgements">
            <summary>
             Gets the minimum number of replica acknowledgements/responses that were required to fulfill the operation. 
            </summary>
        </member>
        <member name="T:Cassandra.ReadTimeoutException">
            <summary>
             A Cassandra timeout during a read query.
            </summary>
        </member>
        <member name="T:Cassandra.SyntaxError">
            <summary>
             Indicates a syntax error in a query.
            </summary>
        </member>
        <member name="T:Cassandra.TruncateException">
            <summary>
             Error during a truncation operation.
            </summary>
        </member>
        <member name="T:Cassandra.UnauthorizedException">
            <summary>
             Indicates that a query cannot be performed due to the authorisation restrictions of the logged user.
            </summary>
        </member>
        <member name="T:Cassandra.UnavailableException">
            <summary>
             Exception thrown when the coordinator knows there is not enough replica alive
             to perform a query with the requested consistency level.
            </summary>
        </member>
        <member name="P:Cassandra.UnavailableException.Consistency">
            <summary>
             Gets the consistency level of the operation triggering this unavailable exception. 
            </summary>
        </member>
        <member name="P:Cassandra.UnavailableException.RequiredReplicas">
            <summary>
            Gets the number of replica acknowledgements/responses required to perform the operation (with its required consistency level). 
            </summary>
        </member>
        <member name="P:Cassandra.UnavailableException.AliveReplicas">
            <summary>
             Gets the number of replica that were known to be alive by the Cassandra coordinator node when it tried to execute the operation. 
            </summary>
        </member>
        <member name="T:Cassandra.WriteTimeoutException">
            <summary>
             A Cassandra timeout during a write query.
            </summary>
        </member>
        <member name="T:Cassandra.NoneAuthProvider">
            <summary>
             A provider that provides no authentication capability. <p> This is only
             useful as a placeholder when no authentication is to be used. </p>
            </summary>
        </member>
        <member name="T:Cassandra.OperationState">
            <summary>
            Represents the state of the ongoing operation for the Connection
            </summary>
        </member>
        <member name="M:Cassandra.OperationState.AppendBody(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Appends to the body stream
            </summary>
            <returns>The total amount of bytes added</returns>
        </member>
        <member name="M:Cassandra.OperationState.InvokeCallback(System.Exception,Cassandra.AbstractResponse)">
            <summary>
            Invokes the callback in a new thread using the default task scheduler
            </summary>
        </member>
        <member name="P:Cassandra.OperationState.BodyStream">
            <summary>
            Gets a readable stream representing the body
            </summary>
        </member>
        <member name="P:Cassandra.OperationState.IsBodyComplete">
            <summary>
            Returns true if there are enough data to parse body
            </summary>
        </member>
        <member name="P:Cassandra.OperationState.Header">
            <summary>
            8 byte header of the frame
            </summary>
        </member>
        <member name="T:Cassandra.OutputFunctionFailure">
            <summary>
            Parses a FunctionFailureException from a function failure error
            </summary>
        </member>
        <member name="M:Cassandra.KeyspaceMetadata.GetTableMetadata(System.String)">
            <summary>
             Returns metadata of specified table in this keyspace.
            </summary>
            <param name="tableName"> the name of table to retrieve </param>
            <returns>the metadata for table <c>tableName</c> in this keyspace if it
             exists, <c>null</c> otherwise.</returns>
        </member>
        <member name="M:Cassandra.KeyspaceMetadata.ClearTableMetadata(System.String)">
            <summary>
            Removes table metadata forcing refresh the next time the table metadata is retrieved
            </summary>
        </member>
        <member name="M:Cassandra.KeyspaceMetadata.ClearFunction(System.String,System.String[])">
            <summary>
            Removes function metadata forcing refresh the next time the function metadata is retrieved
            </summary>
        </member>
        <member name="M:Cassandra.KeyspaceMetadata.ClearAggregate(System.String,System.String[])">
            <summary>
            Removes aggregate metadata forcing refresh the next time the function metadata is retrieved
            </summary>
        </member>
        <member name="M:Cassandra.KeyspaceMetadata.GetTablesMetadata">
            <summary>
             Returns metadata of all tables defined in this keyspace.
            </summary>
            <returns>an IEnumerable of TableMetadata for the tables defined in this
             keyspace.</returns>
        </member>
        <member name="M:Cassandra.KeyspaceMetadata.GetTablesNames">
            <summary>
             Returns names of all tables defined in this keyspace.
            </summary>
            
            <returns>a collection of all, defined in this
             keyspace tables names.</returns>
        </member>
        <member name="M:Cassandra.KeyspaceMetadata.ExportAsString">
            <summary>
             Return a <c>String</c> containing CQL queries representing this
             name and the table it contains. In other words, this method returns the
             queries that would allow to recreate the schema of this name, along with
             all its table. Note that the returned String is formatted to be human
             readable (for some definition of human readable at least).
            </summary>
            <returns>the CQL queries representing this name schema as a code
             String}.</returns>
        </member>
        <member name="M:Cassandra.KeyspaceMetadata.AsCqlQuery">
            <summary>
             Returns a CQL query representing this keyspace. This method returns a single
             'CREATE KEYSPACE' query with the options corresponding to this name
             definition.
            </summary>
            <returns>the 'CREATE KEYSPACE' query corresponding to this name.
             <see>#ExportAsString</see></returns>
        </member>
        <member name="M:Cassandra.KeyspaceMetadata.GetUdtDefinition(System.String)">
            <summary>
            Gets the definition of a User defined type
            </summary>
        </member>
        <member name="M:Cassandra.KeyspaceMetadata.GetFunction(System.String,System.String[])">
            <summary>
            Gets a CQL function by name and signature
            </summary>
            <returns>The function metadata or null if not found.</returns>
        </member>
        <member name="M:Cassandra.KeyspaceMetadata.GetAggregate(System.String,System.String[])">
            <summary>
            Gets a CQL aggregate by name and signature
            </summary>
            <returns>The aggregate metadata or null if not found.</returns>
        </member>
        <member name="P:Cassandra.KeyspaceMetadata.Name">
            <summary>
             Gets the name of this keyspace.
            </summary>
            <returns>the name of this CQL keyspace.</returns>
        </member>
        <member name="P:Cassandra.KeyspaceMetadata.DurableWrites">
            <summary>
             Gets a value indicating whether durable writes are set on this keyspace.
            </summary>
            <returns><c>true</c> if durable writes are set on this keyspace
             , <c>false</c> otherwise.</returns>
        </member>
        <member name="P:Cassandra.KeyspaceMetadata.StrategyClass">
            <summary>
             Gets the Strategy Class of this keyspace.
            </summary>
            <returns>name of StrategyClass of this keyspace.</returns>
        </member>
        <member name="P:Cassandra.KeyspaceMetadata.Replication">
            <summary>
             Returns the replication options for this keyspace.
            </summary>
            
            <returns>a dictionary containing the keyspace replication strategy options.</returns>
        </member>
        <member name="T:Cassandra.OutputReadTimeout">
            <summary>
            Handles the parsing of the read timeout and read failure errors
            </summary>
        </member>
        <member name="T:Cassandra.PlainTextAuthProvider">
            <summary>
             A simple <c>AuthProvider</c> implementation. <p> This provider allows
             to programmatically define authentication information that will then apply to
             all hosts. The PlainTextAuthenticator instances it returns support SASL
             authentication using the PLAIN mechanism for version 2 of the CQL __native__
             protocol.</p>
            </summary>
        </member>
        <member name="M:Cassandra.PlainTextAuthProvider.#ctor(System.String,System.String)">
            <summary>
             Creates a new simple authentication information provider with the supplied
             credentials.
            </summary>
            <param name="username"> to use for authentication requests </param>
            <param name="password"> to use for authentication requests</param>
        </member>
        <member name="M:Cassandra.PlainTextAuthProvider.NewAuthenticator(System.Net.IPEndPoint)">
            <summary>
             Uses the supplied credentials and the SASL PLAIN mechanism to login to the
             server.
            </summary>
            <param name="host"> the Cassandra host with which we want to authenticate
             </param>
            
            <returns>an Authenticator instance which can be used to perform
             authentication negotiations on behalf of the client </returns>
            <throws name="SaslException"> if an unsupported SASL mechanism is supplied or
             an error is encountered when initialising the authenticator</throws>
        </member>
        <member name="T:Cassandra.PlainTextAuthProvider.PlainTextAuthenticator">
            <summary>
             Simple implementation of <link>Authenticator</link> which can perform
             authentication against Cassandra servers configured with
             PasswordAuthenticator.
            </summary>
        </member>
        <member name="T:Cassandra.ConstantReconnectionPolicy">
            <summary>
             A reconnection policy that waits a constant time between each reconnection attempt.
            </summary>
        </member>
        <member name="T:Cassandra.IReconnectionPolicy">
            <summary>
             Policy that decides how often the reconnection to a dead node is attempted.
             Each time a node is detected dead (because a connection error occurs), a new
             <c>IReconnectionSchedule</c> instance is created (through the
             <link>NewSchedule()</link>). Then each call to the
             <link>IReconnectionSchedule#NextDelayMs</link> method of this instance will
             decide when the next reconnection attempt to this node will be tried. Note
             that if the driver receives a push notification from the Cassandra cluster
             that a node is UP, any existing <c>IReconnectionSchedule</c> on that
             node will be cancelled and a new one will be created (in effect, the driver
             reset the scheduler). The default <link>ExponentialReconnectionPolicy</link>
             policy is usually adequate.
            </summary>
        </member>
        <member name="M:Cassandra.IReconnectionPolicy.NewSchedule">
            <summary>
             Creates a new schedule for reconnection attempts.
            </summary>
        </member>
        <member name="M:Cassandra.ConstantReconnectionPolicy.#ctor(System.Int64)">
            <summary>
             Creates a reconnection policy that creates with the provided constant wait
             time between reconnection attempts.
            </summary>
            <param name="constantDelayMs"> the constant delay in milliseconds to use.</param>
        </member>
        <member name="M:Cassandra.ConstantReconnectionPolicy.NewSchedule">
            <summary>
             A new schedule that uses a constant <c>ConstantDelayMs</c> delay between reconnection attempt. 
            </summary>
            
            <returns>the newly created schedule.</returns>
        </member>
        <member name="P:Cassandra.ConstantReconnectionPolicy.ConstantDelayMs">
            <summary>
            Gets the constant delay used by this reconnection policy. 
            </summary>
        </member>
        <member name="T:Cassandra.IReconnectionSchedule">
            <summary>
             Schedules reconnection attempts to a node.
            </summary>
        </member>
        <member name="M:Cassandra.IReconnectionSchedule.NextDelayMs">
            <summary>
             When to attempt the next reconnection. This method will be called once when
             the host is detected down to schedule the first reconnection attempt, and
             then once after each failed reconnection attempt to schedule the next one.
             Hence each call to this method are free to return a different value.
            </summary>
            
            <returns>a time in milliseconds to wait before attempting the next
             reconnection.</returns>
        </member>
        <member name="T:Cassandra.FixedReconnectionPolicy">
            <summary>
            Represents a reconnection policy that is possible to specify custom reconnection delays for each attempt.
            </summary>
        </member>
        <member name="M:Cassandra.FixedReconnectionPolicy.#ctor(System.Int64[])">
            <summary>
            Creates a new instance of a reconnection policy for which is possible to specify custom reconnection delays for each attempt.
            <para>The last delay provided will be used for the rest of the attempts.</para>
            </summary>
        </member>
        <member name="T:Cassandra.IRetryPolicy">
            <summary>
             A policy that defines a default behavior to adopt when a request returns a
             TimeoutException or an UnavailableException. Such policy allows to centralize
             the handling of query retries, allowing to minimize the need for exception
             catching/handling in business code.
            </summary>
        </member>
        <member name="M:Cassandra.IRetryPolicy.OnReadTimeout(Cassandra.IStatement,Cassandra.ConsistencyLevel,System.Int32,System.Int32,System.Boolean,System.Int32)">
            <summary>
             Defines whether to retry and at which consistency level on a read timeout.
             <p> Note that this method may be called even if <c>requiredResponses >=
             receivedResponses</c> if <c>dataPresent</c> is <c>false</c>
             (see <link>com.datastax.driver.core.exceptions.ReadTimeoutException#WasDataRetrieved</link>).</p>
            </summary>
            <param name="query"> the original query that timeouted. </param>
            <param name="cl"> the original consistency level of the read that timeouted.
             </param>
            <param name="requiredResponses"> the number of responses that were required
             to achieve the requested consistency level. </param>
            <param name="receivedResponses"> the number of responses that had been
             received by the time the timeout exception was raised. </param>
            <param name="dataRetrieved"> whether actual data (by opposition to data
             checksum) was present in the received responses. </param>
            <param name="nbRetry"> the number of retry already performed for this
             operation. </param>
            
            <returns>the retry decision. If <c>RetryDecision.Rethrow</c> is
             returned, a
             <link>com.datastax.driver.core.exceptions.ReadTimeoutException</link> will be
             thrown for the operation.</returns>
        </member>
        <member name="M:Cassandra.IRetryPolicy.OnWriteTimeout(Cassandra.IStatement,Cassandra.ConsistencyLevel,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
             Defines whether to retry and at which consistency level on a write timeout.
            </summary>
            <param name="query"> the original query that timeouted. </param>
            <param name="cl"> the original consistency level of the write that timeouted.
             </param>
            <param name="writeType"> the type of the write that timeouted. </param>
            <param name="requiredAcks"> the number of acknowledgments that were required
             to achieve the requested consistency level. </param>
            <param name="receivedAcks"> the number of acknowledgments that had been
             received by the time the timeout exception was raised. </param>
            <param name="nbRetry"> the number of retry already performed for this
             operation. </param>
            
            <returns>the retry decision. If <c>RetryDecision.Rethrow</c> is
             returned, a
             <link>com.datastax.driver.core.exceptions.WriteTimeoutException</link> will
             be thrown for the operation.</returns>
        </member>
        <member name="M:Cassandra.IRetryPolicy.OnUnavailable(Cassandra.IStatement,Cassandra.ConsistencyLevel,System.Int32,System.Int32,System.Int32)">
            <summary>
             Defines whether to retry and at which consistency level on an unavailable
             exception.
            </summary>
            <param name="query"> the original query for which the consistency level
             cannot be achieved. </param>
            <param name="cl"> the original consistency level for the operation. </param>
            <param name="requiredReplica"> the number of replica that should have been
             (known) alive for the operation to be attempted. </param>
            <param name="aliveReplica"> the number of replica that were know to be alive
             by the coordinator of the operation. </param>
            <param name="nbRetry"> the number of retry already performed for this
             operation. </param>
            
            <returns>the retry decision. If <c>RetryDecision.Rethrow</c> is
             returned, an
             <link>com.datastax.driver.core.exceptions.UnavailableException</link> will be
             thrown for the operation.</returns>
        </member>
        <member name="T:Cassandra.ILoadBalancingPolicy">
            <summary>
             The policy that decides which Cassandra hosts to contact for each new query.
             For efficiency purposes, the policy is expected to exclude down hosts from query plans.
            </summary>
        </member>
        <member name="M:Cassandra.ILoadBalancingPolicy.Initialize(Cassandra.ICluster)">
            <summary>
             Initialize this load balancing policy. 
            <para>
             Note that the driver guarantees
             that it will call this method exactly once per policy object and will do so
             before any call to another of the methods of the policy.
            </para>
            </summary>
            <param name="cluster">The information about the session instance for which the policy is created.</param>
        </member>
        <member name="M:Cassandra.ILoadBalancingPolicy.Distance(Cassandra.Host)">
            <summary>
             Returns the distance assigned by this policy to the provided host. <p> The
             distance of an host influence how much connections are kept to the node (see
             <link>HostDistance</link>). A policy should assign a <c>* LOCAL</c>
             distance to nodes that are susceptible to be returned first by
             <c>newQueryPlan</c> and it is useless for <c>newQueryPlan</c> to
             return hosts to which it assigns an <c>IGNORED</c> distance. </p><p> The
             host distance is primarily used to prevent keeping too many connections to
             host in remote datacenters when the policy itself always picks host in the
             local datacenter first.</p>
            </summary>
            <param name="host"> the host of which to return the distance of. </param>
            
            <returns>the HostDistance to <c>host</c>.</returns>
        </member>
        <member name="M:Cassandra.ILoadBalancingPolicy.NewQueryPlan(System.String,Cassandra.IStatement)">
            <summary>
             Returns the hosts to use for a new query. <p> Each new query will call this
             method. The first host in the result will then be used to perform the query.
             In the event of a connection problem (the queried host is down or appear to
             be so), the next host will be used. If all hosts of the returned
             <c>Iterator</c> are down, the query will fail.</p>
            </summary>
            <param name="query">The query for which to build a plan, it can be null.</param>
            <param name="keyspace">Keyspace on which the query is going to be executed, it can be null.</param>
            <returns>An iterator of Host. The query is tried against the hosts returned
             by this iterator in order, until the query has been sent successfully to one
             of the host.</returns>
        </member>
        <member name="T:Cassandra.DCAwareRoundRobinPolicy">
            <summary>
             A data-center aware Round-robin load balancing policy. <p> This policy
             provides round-robin queries over the node of the local datacenter. It also
             includes in the query plans returned a configurable number of hosts in the
             remote datacenters, but those are always tried after the local nodes. In
             other words, this policy guarantees that no host in a remote datacenter will
             be queried unless no host in the local datacenter can be reached. </p><p> If used
             with a single datacenter, this policy is equivalent to the
             <see cref="T:Cassandra.RoundRobinPolicy"/> policy, but its GetDatacenter awareness
             incurs a slight overhead so the <see cref="T:Cassandra.RoundRobinPolicy"/>
             policy could be preferred to this policy in that case.</p>
            </summary>
        </member>
        <member name="M:Cassandra.DCAwareRoundRobinPolicy.#ctor">
            <summary>
            Creates a new datacenter aware round robin policy that auto-discover the local data-center.
            <para>
            If this constructor is used, the data-center used as local will the
            data-center of the first Cassandra node the driver connects to. This
            will always be ok if all the contact points use at <see cref="T:Cassandra.Cluster"/>
            creation are in the local data-center. If it's not the case, you should
            provide the local data-center name yourself by using one of the other
            constructor of this class.
            </para>
            </summary>
        </member>
        <member name="M:Cassandra.DCAwareRoundRobinPolicy.#ctor(System.String)">
            <summary>
             Creates a new datacenter aware round robin policy given the name of the local
             datacenter. <p> The name of the local datacenter provided must be the local
             datacenter name as known by Cassandra. </p><p> The policy created will ignore all
             remote hosts. In other words, this is equivalent to 
             <c>new DCAwareRoundRobinPolicy(localDc, 0)</c>.</p>
            </summary>
            <param name="localDc"> the name of the local datacenter (as known by Cassandra).</param>
        </member>
        <member name="M:Cassandra.DCAwareRoundRobinPolicy.#ctor(System.String,System.Int32)">
            <summary>
             Creates a new DCAwareRoundRobin policy given the name of the local
             datacenter and that uses the provided number of host per remote
             datacenter as failover for the local hosts.
             <p>
             The name of the local datacenter provided must be the local
             datacenter name as known by Cassandra.</p>
            </summary>
             <param name="localDc"> the name of the local datacenter (as known by
             Cassandra).</param>
             <param name="usedHostsPerRemoteDc"> the number of host per remote
             datacenter that policies created by the returned factory should
             consider. Created policies <c>distance</c> method will return a
             <c>HostDistance.Remote</c> distance for only <c>
             usedHostsPerRemoteDc</c> hosts per remote datacenter. Other hosts
             of the remote datacenters will be ignored (and thus no
             connections to them will be maintained).</param>
        </member>
        <member name="M:Cassandra.DCAwareRoundRobinPolicy.Distance(Cassandra.Host)">
            <summary>
             Return the HostDistance for the provided host. <p> This policy consider nodes
             in the local datacenter as <c>Local</c>. For each remote datacenter, it
             considers a configurable number of hosts as <c>Remote</c> and the rest
             is <c>Ignored</c>. </p><p> To configure how many host in each remote
             datacenter is considered <c>Remote</c>.</p>
            </summary>
            <param name="host"> the host of which to return the distance of. </param>
            <returns>the HostDistance to <c>host</c>.</returns>
        </member>
        <member name="M:Cassandra.DCAwareRoundRobinPolicy.NewQueryPlan(System.String,Cassandra.IStatement)">
            <summary>
             Returns the hosts to use for a new query. <p> The returned plan will always
             try each known host in the local datacenter first, and then, if none of the
             local host is reachable, will try up to a configurable number of other host
             per remote datacenter. The order of the local node in the returned query plan
             will follow a Round-robin algorithm.</p>
            </summary>
            <param name="keyspace">Keyspace on which the query is going to be executed</param>
            <param name="query"> the query for which to build the plan. </param>
            <returns>a new query plan, i.e. an iterator indicating which host to try
             first for querying, which one to use as failover, etc...</returns>
        </member>
        <member name="M:Cassandra.DCAwareRoundRobinPolicy.GetHosts">
            <summary>
            Gets a tuple containing the list of local and remote nodes
            </summary>
        </member>
        <member name="T:Cassandra.DefaultRetryPolicy">
            <summary>
             The default retry policy. <p> This policy retries queries in only two cases:
             <ul> <li>On a read timeout, if enough replica replied but data was not
             retrieved.</li> <li>On a write timeout, if we timeout while writting the
             distributed log used by batch statements.</li> </ul> </p> <p> This retry policy is
             conservative in that it will never retry with a different consistency level
             than the one of the initial operation. </p><p> In some cases, it may be
             convenient to use a more aggressive retry policy like
             <link>DowngradingConsistencyRetryPolicy</link>.</p>
            </summary>
        </member>
        <member name="M:Cassandra.DefaultRetryPolicy.OnReadTimeout(Cassandra.IStatement,Cassandra.ConsistencyLevel,System.Int32,System.Int32,System.Boolean,System.Int32)">
            <summary>
             Defines whether to retry and at which consistency level on a read timeout.
             <p> This method triggers a maximum of one retry, and only if enough replica
             had responded to the read request but data was not retrieved amongst those.
             Indeed, that case usually means that enough replica are alive to satisfy the
             consistency but the coordinator picked a dead one for data retrieval, not
             having detecte that replica as dead yet. The reasoning for retrying then is
             that by the time we get the timeout the dead replica will likely have been
             detected as dead and the retry has a high change of success.</p>
            </summary>
            <param name="query"> the original query that timeouted. </param>
            <param name="cl"> the original consistency level of the read that timeouted.
             </param>
            <param name="requiredResponses"> the number of responses that were required
             to achieve the requested consistency level. </param>
            <param name="receivedResponses"> the number of responses that had been
             received by the time the timeout exception was raised. </param>
            <param name="dataRetrieved"> whether actual data (by opposition to data
             checksum) was present in the received responses. </param>
            <param name="nbRetry"> the number of retry already performed for this
             operation. </param>
            
            <returns><c>RetryDecision.retry(cl)</c> if no retry attempt has yet
             been tried and <c>receivedResponses >= requiredResponses &amp;&amp;
             !dataRetrieved</c>, <c>RetryDecision.rethrow()</c>
             otherwise.</returns>
        </member>
        <member name="M:Cassandra.DefaultRetryPolicy.OnWriteTimeout(Cassandra.IStatement,Cassandra.ConsistencyLevel,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
             Defines whether to retry and at which consistency level on a write timeout.
             <p> This method triggers a maximum of one retry, and only in the case of a
             <c>WriteType.BATCH_LOG</c> write. The reasoning for the retry in that
             case is that write to the distributed batch log is tried by the coordinator
             of the write against a small subset of all the node alive in the local
             datacenter. Hence, a timeout usually means that none of the nodes in that
             subset were alive but the coordinator hasn't' detected them as dead. By the
             time we get the timeout the dead nodes will likely have been detected as dead
             and the retry has thus a high change of success.</p>
            </summary>
            <param name="query"> the original query that timeouted. </param>
            <param name="cl"> the original consistency level of the write that timeouted.
             </param>
            <param name="writeType"> the type of the write that timeouted. </param>
            <param name="requiredAcks"> the number of acknowledgments that were required
             to achieve the requested consistency level. </param>
            <param name="receivedAcks"> the number of acknowledgments that had been
             received by the time the timeout exception was raised. </param>
            <param name="nbRetry"> the number of retry already performed for this
             operation. </param>
            
            <returns><c>RetryDecision.retry(cl)</c> if no retry attempt has yet
             been tried and <c>writeType == WriteType.BATCH_LOG</c>,
             <c>RetryDecision.rethrow()</c> otherwise.</returns>
        </member>
        <member name="M:Cassandra.DefaultRetryPolicy.OnUnavailable(Cassandra.IStatement,Cassandra.ConsistencyLevel,System.Int32,System.Int32,System.Int32)">
            <summary>
             Defines whether to retry and at which consistency level on an unavailable
             exception. <p> This method never retries as a retry on an unavailable
             exception using the same consistency level has almost no change of success.</p>
            </summary>
            <param name="query"> the original query for which the consistency level
             cannot be achieved. </param>
            <param name="cl"> the original consistency level for the operation. </param>
            <param name="requiredReplica"> the number of replica that should have been
             (known) alive for the operation to be attempted. </param>
            <param name="aliveReplica"> the number of replica that were know to be alive
             by the coordinator of the operation. </param>
            <param name="nbRetry"> the number of retry already performed for this
             operation. </param>
            
            <returns><c>RetryDecision.rethrow()</c>.</returns>
        </member>
        <member name="T:Cassandra.DowngradingConsistencyRetryPolicy">
            <summary>
             A retry policy that sometimes retry with a lower consistency level than the
             one initially requested. <p> <b>BEWARE</b>: This policy may retry queries
             using a lower consistency level than the one initially requested. By doing
             so, it may break consistency guarantees. In other words, if you use this
             retry policy, there is cases (documented below) where a read at
             <c>Quorum</c> may not see a preceding write at
             <c>Quorum</c>. Do not use this policy unless you have understood the
             cases where this can happen and are OK with that. It is also highly
             recommended to always wrap this policy into <see cref="T:Cassandra.LoggingRetryPolicy"/>
             to log the occurrences of such consistency break. </p><p> This policy : the same
             retries than the <link>DefaultRetryPolicy</link> policy. But on top of that,
             it also retries in the following cases: <ul> <li>On a read timeout: if the
             number of replica that responded is greater than one but lower than is
             required by the requested consistency level, the operation is retried at a
             lower consistency level.</li> <li>On a write timeout: if the operation is an
             <c>WriteType.UNLOGGED_BATCH</c> and at least one replica acknowledged
             the write, the operation is retried at a lower consistency level.
             Furthermore, for other operation, if at least one replica acknowledged the
             write, the timeout is ignored.</li> <li>On an unavailable exception: if at
             least one replica is alive, the operation is retried at a lower consistency
             level.</li> </ul> </p><p> The reasoning behind this retry policy is the following
             one. If, based on the information the Cassandra coordinator node returns,
             retrying the operation with the initially requested consistency has a change
             to succeed, do it. Otherwise, if based on these informations we know <b>the
             initially requested consistency level cannot be achieve currently</b>, then:
             <ul> <li>For writes, ignore the exception (thus silently failing the
             consistency requirement) if we know the write has been persisted on at least
             one replica.</li> <li>For reads, try reading at a lower consistency level
             (thus silently failing the consistency requirement).</li> </ul> In other
             words, this policy : the idea that if the requested consistency level cannot
             be achieved, the next best thing for writes is to make sure the data is
             persisted, and that reading something is better than reading nothing, even if
             there is a risk of reading stale data.</p>
            </summary>
        </member>
        <member name="M:Cassandra.DowngradingConsistencyRetryPolicy.OnReadTimeout(Cassandra.IStatement,Cassandra.ConsistencyLevel,System.Int32,System.Int32,System.Boolean,System.Int32)">
            <summary>
             Defines whether to retry and at which consistency level on a read timeout.
             <p> This method triggers a maximum of one retry. If less replica responsed
             than required by the consistency level (but at least one replica did
             respond), the operation is retried at a lower consistency level. If enough
             replica responded but data was not retrieve, the operation is retried with
             the initial consistency level. Otherwise, an exception is thrown.</p>
            </summary>
            <param name="query"> the original query that timeouted. </param>
            <param name="cl"> the original consistency level of the read that timeouted.
             </param>
            <param name="requiredResponses"> the number of responses that were required
             to achieve the requested consistency level. </param>
            <param name="receivedResponses"> the number of responses that had been
             received by the time the timeout exception was raised. </param>
            <param name="dataRetrieved"> whether actual data (by opposition to data
             checksum) was present in the received responses. </param>
            <param name="nbRetry"> the number of retry already performed for this
             operation. </param>
            
            <returns>a RetryDecision as defined above.</returns>
        </member>
        <member name="M:Cassandra.DowngradingConsistencyRetryPolicy.OnWriteTimeout(Cassandra.IStatement,Cassandra.ConsistencyLevel,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
             Defines whether to retry and at which consistency level on a write timeout.
             <p> This method triggers a maximum of one retry. If <c>writeType ==
             WriteType.BATCH_LOG</c>, the write is retried with the initial consistency
             level. If <c>writeType == WriteType.UNLOGGED_BATCH</c> and at least one
             replica acknowleged, the write is retried with a lower consistency level
             (with unlogged batch, a write timeout can <b>always</b> mean that part of the
             batch haven't been persisted at' all, even if <c>receivedAcks > 0</c>).
             For other <c>writeType</c>, if we know the write has been persisted on
             at least one replica, we ignore the exception. Otherwise, an exception is
             thrown.</p>
            </summary>
            <param name="query"> the original query that timeouted. </param>
            <param name="cl"> the original consistency level of the write that timeouted.
             </param>
            <param name="writeType"> the type of the write that timeouted. </param>
            <param name="requiredAcks"> the number of acknowledgments that were required
             to achieve the requested consistency level. </param>
            <param name="receivedAcks"> the number of acknowledgments that had been
             received by the time the timeout exception was raised. </param>
            <param name="nbRetry"> the number of retry already performed for this
             operation. </param>
            
            <returns>a RetryDecision as defined above.</returns>
        </member>
        <member name="M:Cassandra.DowngradingConsistencyRetryPolicy.OnUnavailable(Cassandra.IStatement,Cassandra.ConsistencyLevel,System.Int32,System.Int32,System.Int32)">
            <summary>
             Defines whether to retry and at which consistency level on an unavailable
             exception. <p> This method triggers a maximum of one retry. If at least one
             replica is know to be alive, the operation is retried at a lower consistency
             level.</p>
            </summary>
            <param name="query"> the original query for which the consistency level
             cannot be achieved. </param>
            <param name="cl"> the original consistency level for the operation. </param>
            <param name="requiredReplica"> the number of replica that should have been
             (known) alive for the operation to be attempted. </param>
            <param name="aliveReplica"> the number of replica that were know to be alive
             by the coordinator of the operation. </param>
            <param name="nbRetry"> the number of retry already performed for this
             operation. </param>
            
            <returns>a RetryDecision as defined above.</returns>
        </member>
        <member name="T:Cassandra.ExponentialReconnectionPolicy">
            <summary>
             A reconnection policy that waits exponentially longer between each
             reconnection attempt (but keeps a constant delay once a maximum delay is
             reached).
            </summary>
        </member>
        <member name="M:Cassandra.ExponentialReconnectionPolicy.#ctor(System.Int64,System.Int64)">
            <summary>
             Creates a reconnection policy waiting exponentially longer for each new
             attempt.
            </summary>
            <param name="baseDelayMs"> the base delay in milliseconds to use for the
             schedules created by this policy.  </param>
            <param name="maxDelayMs"> the maximum delay to wait between two
             attempts.</param>
        </member>
        <member name="M:Cassandra.ExponentialReconnectionPolicy.NewSchedule">
            <summary>
             A new schedule that used an exponentially growing delay between reconnection
             attempts. <p> For this schedule, reconnection attempt <c>i</c> will be
             tried <c>Math.min(2^(i-1) * BaseDelayMs, MaxDelayMs)</c>
             milliseconds after the previous one.</p>
            </summary>
            
            <returns>the newly created schedule.</returns>
        </member>
        <member name="P:Cassandra.ExponentialReconnectionPolicy.BaseDelayMs">
            <summary>
             Gets the base delay in milliseconds for this policy (e.g. the delay before the
             first reconnection attempt).
            </summary>
        </member>
        <member name="P:Cassandra.ExponentialReconnectionPolicy.MaxDelayMs">
            <summary>
             Gets the maximum delay in milliseconds between reconnection attempts for this
             policy.
            </summary>
        </member>
        <member name="T:Cassandra.FallthroughRetryPolicy">
            <summary>
             A retry policy that never retry (nor ignore). <p> All of the methods of this
             retry policy unconditionally return
             <link>RetryPolicy.RetryDecision#rethrow</link>. If this policy is used, retry
             will have to be implemented in business code.</p>
            </summary>
        </member>
        <member name="M:Cassandra.FallthroughRetryPolicy.OnReadTimeout(Cassandra.IStatement,Cassandra.ConsistencyLevel,System.Int32,System.Int32,System.Boolean,System.Int32)">
            <summary>
             Defines whether to retry and at which consistency level on a read timeout.
            </summary>
            <param name="query"> the original query that timeouted. </param>
            <param name="cl"> the original consistency level of the read that timeouted.
             </param>
            <param name="requiredResponses"> the number of responses that were required
             to achieve the requested consistency level. </param>
            <param name="receivedResponses"> the number of responses that had been
             received by the time the timeout exception was raised. </param>
            <param name="dataRetrieved"> whether actual data (by opposition to data
             checksum) was present in the received responses. </param>
            <param name="nbRetry"> the number of retry already performed for this
             operation. </param>
            
            <returns><c>RetryDecision.rethrow()</c>.</returns>
        </member>
        <member name="M:Cassandra.FallthroughRetryPolicy.OnWriteTimeout(Cassandra.IStatement,Cassandra.ConsistencyLevel,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
             Defines whether to retry and at which consistency level on a write timeout.
            </summary>
            <param name="query"> the original query that timeouted. </param>
            <param name="cl"> the original consistency level of the write that timeouted.
             </param>
            <param name="writeType"> the type of the write that timeouted. </param>
            <param name="requiredAcks"> the number of acknowledgments that were required
             to achieve the requested consistency level. </param>
            <param name="receivedAcks"> the number of acknowledgments that had been
             received by the time the timeout exception was raised. </param>
            <param name="nbRetry"> the number of retry already performed for this
             operation. </param>
            
            <returns><c>RetryDecision.rethrow()</c>.</returns>
        </member>
        <member name="M:Cassandra.FallthroughRetryPolicy.OnUnavailable(Cassandra.IStatement,Cassandra.ConsistencyLevel,System.Int32,System.Int32,System.Int32)">
            <summary>
             Defines whether to retry and at which consistency level on an unavailable
             exception.
            </summary>
            <param name="query"> the original query for which the consistency level
             cannot be achieved. </param>
            <param name="cl"> the original consistency level for the operation. </param>
            <param name="requiredReplica"> the number of replica that should have been
             (known) alive for the operation to be attempted. </param>
            <param name="aliveReplica"> the number of replica that were know to be alive
             by the coordinator of the operation. </param>
            <param name="nbRetry"> the number of retry already performed for this
             operation. </param>
            
            <returns><c>RetryDecision.rethrow()</c>.</returns>
        </member>
        <member name="T:Cassandra.LoggingRetryPolicy">
            <summary>
             A retry policy that wraps another policy, logging the decision made by its
             sub-policy. <p> Note that this policy only log the Ignore and Retry decisions
             (since Rethrow decisions just amount to propate the cassandra exception). The
             logging is done at the Info level.</p>
            </summary>
        </member>
        <member name="M:Cassandra.LoggingRetryPolicy.#ctor(Cassandra.IRetryPolicy)">
            <summary>
             Creates a new <c>RetryPolicy</c> that logs the decision of
             <c>policy</c>.
            </summary>
            <param name="policy"> the policy to wrap. The policy created by this
             constructor will return the same decision than <c>policy</c> but will log them.</param>
        </member>
        <member name="T:Cassandra.Policies">
            <summary>
             Policies configured for a <link>Cluster</link>
             instance.
            </summary>
        </member>
        <member name="M:Cassandra.Policies.#ctor(Cassandra.ILoadBalancingPolicy,Cassandra.IReconnectionPolicy,Cassandra.IRetryPolicy)">
            <summary>
             Creates a new <c>Policies</c> object using the provided policies.
            </summary>
            <param name="loadBalancingPolicy"> the load balancing policy to use. </param>
            <param name="reconnectionPolicy"> the reconnection policy to use. </param>
            <param name="retryPolicy"> the retry policy to use.</param>
        </member>
        <member name="P:Cassandra.Policies.DefaultLoadBalancingPolicy">
            <summary>
             The default load balancing policy. <p> The default load balancing policy is
             <link>RoundRobinPolicy</link>.</p>
            </summary>
        </member>
        <member name="P:Cassandra.Policies.DefaultReconnectionPolicy">
            <summary>
             The default reconnection policy. <p> The default reconnection policy is an
             <link>ExponentialReconnectionPolicy</link> where the base delay is 1 second
             and the max delay is 10 minutes;</p>
            </summary>
        </member>
        <member name="P:Cassandra.Policies.DefaultRetryPolicy">
            <summary>
             The default retry policy. <p> The default retry policy is
             <link>DefaultRetryPolicy</link>.</p>
            </summary>
        </member>
        <member name="P:Cassandra.Policies.LoadBalancingPolicy">
            <summary>
             Gets the load balancing policy in use. <p> The load balancing policy defines how
             Cassandra hosts are picked for queries.</p>
            </summary>
        </member>
        <member name="P:Cassandra.Policies.ReconnectionPolicy">
            <summary>
             Gets the reconnection policy in use. <p> The reconnection policy defines how often
             the driver tries to reconnect to a dead node.</p>
            </summary>
        </member>
        <member name="P:Cassandra.Policies.RetryPolicy">
            <summary>
             Gets the retry policy in use. <p> The retry policy defines in which conditions a
             query should be automatically retries by the driver.</p>
            </summary>
        </member>
        <member name="T:Cassandra.RetryDecision">
            <summary>
             A retry decision to adopt on a Cassandra exception (read/write timeout or
             unavailable exception). <p> There is three possible decision: <ul>
             <li>Rethrow: no retry should be attempted and an exception should be
             thrown</li> <li>Retry: the operation will be retried. The consistency level
             of the retry should be specified.</li> <li>Ignore: no retry should be
             attempted and the exception should be ignored. In that case, the operation
             that triggered the Cassandra exception will return an empty result set.</li></ul></p>
            </summary>
        </member>
        <member name="M:Cassandra.RetryDecision.Rethrow">
            <summary>
             Creates a Rethrow retry decision.
            </summary>
            
            <returns>a Rethrow retry decision.</returns>
        </member>
        <member name="M:Cassandra.RetryDecision.Retry(System.Nullable{Cassandra.ConsistencyLevel})">
            <summary>
             Creates a Retry retry decision using the provided consistency level.
            </summary>
            <param name="consistency"> the consistency level to use for the retry.
             </param>
            
            <returns>a Retry with consistency level <c>consistency</c> retry
             decision.</returns>
        </member>
        <member name="M:Cassandra.RetryDecision.Ignore">
            <summary>
             Creates an Ignore retry decision.
            </summary>
            
            <returns>an Ignore retry decision.</returns>
        </member>
        <member name="P:Cassandra.RetryDecision.DecisionType">
            <summary>
             Gets the type of this retry decision.
            </summary>
        </member>
        <member name="P:Cassandra.RetryDecision.RetryConsistencyLevel">
            <summary>
             Gets the consistency level for a retry decision or <c>null</c> if
             this retry decision is an <c>Ignore</c> or a
             <c>Rethrow</c>.</summary>
        </member>
        <member name="T:Cassandra.RetryDecision.RetryDecisionType">
            <summary>
             The type of retry decisions.
            </summary>
        </member>
        <member name="F:Cassandra.RetryDecision.RetryDecisionType.Retry">
            <summary>
            the operation will be retried. The consistency level of the retry should be specified.
            </summary>
        </member>
        <member name="F:Cassandra.RetryDecision.RetryDecisionType.Rethrow">
            <summary>
            no retry should be attempted and an exception should be thrown
            </summary>
        </member>
        <member name="F:Cassandra.RetryDecision.RetryDecisionType.Ignore">
            <summary>
            no retry should be attempted and the exception should be ignored. In that case, the operation that triggered the Cassandra exception will return an empty result set.
            </summary>
        </member>
        <member name="T:Cassandra.RoundRobinPolicy">
            <summary>
             A Round-robin load balancing policy. 
            <para> This policy queries nodes in a
             round-robin fashion. For a given query, if an host fail, the next one
             (following the round-robin order) is tried, until all hosts have been tried.
             </para>
            <para> This policy is not datacenter aware and will include every known
             Cassandra host in its round robin algorithm. If you use multiple datacenter
             this will be inefficient and you will want to use the
             <see cref="T:Cassandra.DCAwareRoundRobinPolicy"/> load balancing policy instead.
            </para>
            </summary>
        </member>
        <member name="M:Cassandra.RoundRobinPolicy.Distance(Cassandra.Host)">
            <summary>
             Return the HostDistance for the provided host. <p> This policy consider all
             nodes as local. This is generally the right thing to do in a single
             datacenter deployment. If you use multiple datacenter, see
             <link>DCAwareRoundRobinPolicy</link> instead.</p>
            </summary>
            <param name="host"> the host of which to return the distance of. </param>
            <returns>the HostDistance to <c>host</c>.</returns>
        </member>
        <member name="M:Cassandra.RoundRobinPolicy.NewQueryPlan(System.String,Cassandra.IStatement)">
            <summary>
             Returns the hosts to use for a new query. <p> The returned plan will try each
             known host of the cluster. Upon each call to this method, the ith host of the
             plans returned will cycle over all the host of the cluster in a round-robin
             fashion.</p>
            </summary>
            <param name="keyspace">Keyspace on which the query is going to be executed</param>
            <param name="query"> the query for which to build the plan. </param>
            <returns>a new query plan, i.e. an iterator indicating which host to try
             first for querying, which one to use as failover, etc...</returns>
        </member>
        <member name="T:Cassandra.TokenAwarePolicy">
            <summary>
             A wrapper load balancing policy that add token awareness to a child policy.
             <p> This policy encapsulates another policy. The resulting policy works in
             the following way: <ul> <li>the <c>distance</c> method is inherited
             from the child policy.</li> <li>the iterator return by the
             <c>newQueryPlan</c> method will first return the <c>LOCAL</c>
             replicas for the query (based on Statement.GetRoutingKey) <i>if
             possible</i> (i.e. if the query <c>getRoutingKey</c> method doesn't
             return <c>null</c> and if <see cref="M:Cassandra.Metadata.GetReplicas(System.String,System.Byte[])"/> returns a non empty
             set of replicas for that partition key). If no local replica can be either
             found or successfully contacted, the rest of the query plan will fallback to
             one of the child policy.</li> </ul> </p><p> Do note that only replica for which
             the child policy <c>distance</c> method returns
             <c>HostDistance.Local</c> will be considered having priority. For
             example, if you wrap <link>DCAwareRoundRobinPolicy</link> with this token
             aware policy, replicas from remote data centers may only be returned after
             all the host of the local data center.</p>
            </summary>
        </member>
        <member name="M:Cassandra.TokenAwarePolicy.#ctor(Cassandra.ILoadBalancingPolicy)">
            <summary>
             Creates a new <c>TokenAware</c> policy that wraps the provided child
             load balancing policy.
            </summary>
            <param name="childPolicy"> the load balancing policy to wrap with token
             awareness.</param>
        </member>
        <member name="M:Cassandra.TokenAwarePolicy.Distance(Cassandra.Host)">
            <summary>
             Return the HostDistance for the provided host.
            </summary>
            <param name="host"> the host of which to return the distance of. </param>
            
            <returns>the HostDistance to <c>host</c> as returned by the wrapped
             policy.</returns>
        </member>
        <member name="M:Cassandra.TokenAwarePolicy.NewQueryPlan(System.String,Cassandra.IStatement)">
            <summary>
             Returns the hosts to use for a new query. <p> The returned plan will first
             return replicas (whose <c>HostDistance</c> for the child policy is
             <c>Local</c>) for the query if it can determine them (i.e. mainly if
             <c>IStatement.RoutingKey</c> is not <c>null</c>). Following what
             it will return the plan of the child policy.</p>
            </summary>
            <param name="keyspace">Keyspace on which the query is going to be executed</param>
            <param name="query"> the query for which to build the plan. </param>
            <returns>the new query plan.</returns>
        </member>
        <member name="T:Cassandra.PoolingOptions">
            <summary>
             Options related to connection pooling. <p> The driver uses connections in an
             asynchronous way. Meaning that multiple requests can be submitted on the same
             connection at the same time. This means that the driver only needs to
             maintain a relatively small number of connections to each Cassandra host.
             These options allow to control how many connections are kept exactly. </p><p> For
             each host, the driver keeps a core amount of connections open at all time
             (<link>PoolingOptions#getCoreConnectionsPerHost</link>). If the utilization
             of those connections reaches a configurable threshold
             (<link>PoolingOptions#getMaxSimultaneousRequestsPerConnectionTreshold</link>),
             more connections are created up to a configurable maximum number of
             connections (<link>PoolingOptions#getMaxConnectionPerHost</link>). Once more
             than core connections have been created, connections in excess are reclaimed
             if the utilization of opened connections drops below the configured threshold
             (<link>PoolingOptions#getMinSimultaneousRequestsPerConnectionTreshold</link>).
             </p><p> Each of these parameters can be separately set for <c>Local</c> and
             <c>Remote</c> hosts (<link>HostDistance</link>). For
             <c>Ignored</c> hosts, the default for all those settings is 0 and
             cannot be changed.</p>
            </summary>
        </member>
        <member name="M:Cassandra.PoolingOptions.GetMinSimultaneousRequestsPerConnectionTreshold(Cassandra.HostDistance)">
            <summary>
             Number of simultaneous requests on a connection below which connections in
             excess are reclaimed. <p> If an opened connection to an host at distance
             <c>distance</c> handles less than this number of simultaneous requests
             and there is more than <link>#GetCoreConnectionsPerHost</link> connections
             open to this host, the connection is closed. </p><p> The default value for this
             option is 25 for <c>Local</c> and <c>Remote</c> hosts.</p>
            </summary>
            <param name="distance"> the <c>HostDistance</c> for which to return this threshold.</param>
            <returns>the configured threshold, or the default one if none have been set.</returns>
        </member>
        <member name="M:Cassandra.PoolingOptions.SetMinSimultaneousRequestsPerConnectionTreshold(Cassandra.HostDistance,System.Int32)">
            <summary>
             Sets the number of simultaneous requests on a connection below which
             connections in excess are reclaimed.
            </summary>
            <param name="distance"> the <c>HostDistance</c> for which to configure this
             threshold. </param>
            <param name="minSimultaneousRequests"> the value to set. </param>
            
            <returns>this <c>PoolingOptions</c>. </returns>
        </member>
        <member name="M:Cassandra.PoolingOptions.GetMaxSimultaneousRequestsPerConnectionTreshold(Cassandra.HostDistance)">
            <summary>
             Number of simultaneous requests on all connections to an host after which
             more connections are created. <p> If all the connections opened to an host at
             distance <c>* distance</c> connection are handling more than this
             number of simultaneous requests and there is less than
             <link>#getMaxConnectionPerHost</link> connections open to this host, a new
             connection is open. </p><p> Note that a given connection cannot handle more than
             128 simultaneous requests (protocol limitation). </p><p> The default value for
             this option is 100 for <c>Local</c> and <c>Remote</c> hosts.</p>
            </summary>
            <param name="distance"> the <c>HostDistance</c> for which to return this threshold.</param>
            <returns>the configured threshold, or the default one if none have been set.</returns>
        </member>
        <member name="M:Cassandra.PoolingOptions.SetMaxSimultaneousRequestsPerConnectionTreshold(Cassandra.HostDistance,System.Int32)">
            <summary>
             Sets number of simultaneous requests on all connections to an host after
             which more connections are created.
            </summary>
            <param name="distance"> the <c>HostDistance</c> for which to configure this
             threshold. </param>
            <param name="maxSimultaneousRequests"> the value to set. </param>
            
            <returns>this <c>PoolingOptions</c>. </returns>
            <throws name="IllegalArgumentException"> if <c>distance == HostDistance.Ignore</c>.</throws>
        </member>
        <member name="M:Cassandra.PoolingOptions.GetCoreConnectionsPerHost(Cassandra.HostDistance)">
            <summary>
             The core number of connections per host. <p> For the provided
             <c>distance</c>, this correspond to the number of connections initially
             created and kept open to each host of that distance.</p>
            </summary>
            <param name="distance"> the <c>HostDistance</c> for which to return this threshold.
             </param>
            
            <returns>the core number of connections per host at distance
             <c>distance</c>.</returns>
        </member>
        <member name="M:Cassandra.PoolingOptions.SetCoreConnectionsPerHost(Cassandra.HostDistance,System.Int32)">
            <summary>
             Sets the core number of connections per host.
            </summary>
            <param name="distance"> the <c>HostDistance</c> for which to set this threshold.
             </param>
            <param name="coreConnections"> the value to set </param>
            
            <returns>this <c>PoolingOptions</c>. </returns>
            <throws name="IllegalArgumentException"> if <c>distance == HostDistance.Ignored</c>.</throws>
        </member>
        <member name="M:Cassandra.PoolingOptions.GetMaxConnectionPerHost(Cassandra.HostDistance)">
            <summary>
             The maximum number of connections per host. <p> For the provided
             <c>distance</c>, this correspond to the maximum number of connections
             that can be created per host at that distance.</p>
            </summary>
            <param name="distance"> the <c>HostDistance</c> for which to return this threshold.
             </param>
            
            <returns>the maximum number of connections per host at distance
             <c>distance</c>.</returns>
        </member>
        <member name="M:Cassandra.PoolingOptions.SetMaxConnectionsPerHost(Cassandra.HostDistance,System.Int32)">
            <summary>
             Sets the maximum number of connections per host.
            </summary>
            <param name="distance"> the <c>HostDistance</c> for which to set this threshold.
             </param>
            <param name="maxConnections"> the value to set </param>
            
            <returns>this <c>PoolingOptions</c>. </returns>
        </member>
        <member name="M:Cassandra.PoolingOptions.GetHeartBeatInterval">
            <summary>
            Gets the amount of idle time in milliseconds that has to pass before the driver issues a request on an active connection to avoid idle time disconnections.
            </summary>
        </member>
        <member name="M:Cassandra.PoolingOptions.SetHeartBeatInterval(System.Int32)">
            <summary>
            Sets the amount of idle time in milliseconds that has to pass before the driver issues a request on an active connection to avoid idle time disconnections.
            <remarks>When set to null the heartbeat functionality at connection level is disabled.</remarks>
            </summary>
        </member>
        <member name="M:Cassandra.PoolingOptions.GetDefault(System.Byte)">
            <summary>
            Gets the default protocol options by protocol version
            </summary>
        </member>
        <member name="T:Cassandra.PreparedStatement">
            <summary>
             Represents a prepared statement, a query with bound variables that has been
             prepared (pre-parsed) by the database. <p> A prepared statement can be
             executed once concrete values has been provided for the bound variables. The
             pair of a prepared statement and values for its bound variables is a
             BoundStatement and can be executed (by <link>Session#Execute</link>).</p>
            </summary>
        </member>
        <member name="M:Cassandra.PreparedStatement.Bind(System.Object[])">
            <summary>
            Creates a new BoundStatement object and bind its variables to the provided
            values.
            <para>
            Specify the parameter values by the position of the markers in the query or by name, 
            using a single instance of an anonymous type, with property names as parameter names.
            </para>
            <para>
            Note that while no more <c>values</c> than bound variables can be provided, it is allowed to
            provide less <c>values</c> that there is variables.
            </para>
            </summary>
            <param name="values"> the values to bind to the variables of the newly
             created BoundStatement. </param>
            <returns>the newly created <c>BoundStatement</c> with its variables
             bound to <c>values</c>. </returns>
        </member>
        <member name="M:Cassandra.PreparedStatement.SetConsistencyLevel(Cassandra.ConsistencyLevel)">
            <summary>
             Sets a default consistency level for all <c>BoundStatement</c> created
             from this object. <p> If no consistency level is set through this method, the
             BoundStatement created from this object will use the default consistency
             level (One). </p><p> Changing the default consistency level is not retroactive,
             it only applies to BoundStatement created after the change.</p>
            </summary>
            <param name="consistency"> the default consistency level to set. </param>
            <returns>this <c>PreparedStatement</c> object.</returns>
        </member>
        <member name="M:Cassandra.PreparedStatement.SetPartitionKeys(Cassandra.TableColumn[])">
            <summary>
            Sets the partition keys of the query
            </summary>
            <returns>True if it was possible to set the routing indexes for this query</returns>
        </member>
        <member name="M:Cassandra.PreparedStatement.SetRoutingKey(Cassandra.RoutingKey[])">
            <summary>
            Set the routing key for this query.
            <para>
            The routing key is a hint for token aware load balancing policies but is never mandatory.
            This method allows you to manually provide a routing key for this query.
            </para>
            <para>
            Use this method ONLY if the partition keys are the same for all query executions (hard-coded parameters).
            </para>
            <para>
            If the partition key is composite, you should provide multiple routing key components.
            </para>
            </summary>
            <param name="routingKeyComponents"> the raw (binary) values to compose to
             obtain the routing key. </param>
            <returns>this <c>PreparedStatement</c> object.</returns>
        </member>
        <member name="M:Cassandra.PreparedStatement.SetRoutingNames(System.String[])">
            <summary>
            For named query markers, it sets the parameter names that are part of the routing key.
            <para>
            Use this method ONLY if the parameter names are different from the partition key names.
            </para>
            </summary>
            <returns>this <c>PreparedStatement</c> object.</returns>
        </member>
        <member name="M:Cassandra.PreparedStatement.SetOutgoingPayload(System.Collections.Generic.IDictionary{System.String,System.Byte[]})">
            <summary>
            Sets a custom outgoing payload for this statement.
            Each time an statement generated using this prepared statement is executed, this payload will be included in the request.
            Once it is set using this method, the payload should not be modified.
            </summary>
        </member>
        <member name="P:Cassandra.PreparedStatement.Cql">
            <summary>
            The cql query
            </summary>
        </member>
        <member name="P:Cassandra.PreparedStatement.Id">
            <summary>
            The prepared statement identifier
            </summary>
        </member>
        <member name="P:Cassandra.PreparedStatement.Keyspace">
            <summary>
            The keyspace were the prepared statement was first executed
            </summary>
        </member>
        <member name="P:Cassandra.PreparedStatement.IncomingPayload">
            <summary>
            Gets the the incoming payload, that is, the payload that the server
            sent back with its prepared response, or null if the server did not include any custom payload.
            </summary>
        </member>
        <member name="P:Cassandra.PreparedStatement.OutgoingPayload">
            <summary>
            Gets custom payload for that will be included when executing an Statement.
            </summary>
        </member>
        <member name="P:Cassandra.PreparedStatement.Variables">
            <summary>
             Gets metadata on the bounded variables of this prepared statement.
            </summary>
        </member>
        <member name="P:Cassandra.PreparedStatement.RoutingKey">
            <summary>
            Gets the routing key for the prepared statement.
            </summary>
        </member>
        <member name="P:Cassandra.PreparedStatement.RoutingIndexes">
            <summary>
            Gets or sets the parameter indexes that are part of the partition key
            </summary>
        </member>
        <member name="T:Cassandra.RequestHandler`1">
            <summary>
            Handles a request to cassandra, dealing with host failover and retries on error
            </summary>
        </member>
        <member name="M:Cassandra.RequestHandler`1.#ctor(Cassandra.Session,Cassandra.IRequest,Cassandra.IStatement)">
            <summary>
            Creates a new instance of the RequestHandler that deals with host failover and retries on error
            </summary>
        </member>
        <member name="M:Cassandra.RequestHandler`1.FillRowSet(Cassandra.RowSet,Cassandra.ResultResponse)">
            <summary>
            Fills the common properties of the RowSet
            </summary>
        </member>
        <member name="M:Cassandra.RequestHandler`1.GetNextConnection(Cassandra.IStatement)">
            <summary>
            Gets a connection from the next host according to the load balancing policy
            </summary>
            <exception cref="T:Cassandra.NoHostAvailableException"/>
            <exception cref="T:Cassandra.InvalidQueryException">When keyspace does not exist</exception>
            <exception cref="T:Cassandra.UnsupportedProtocolVersionException"/>
        </member>
        <member name="M:Cassandra.RequestHandler`1.GetRetryDecision(System.Exception)">
            <summary>
            Gets the retry decision based on the exception from Cassandra
            </summary>
        </member>
        <member name="M:Cassandra.RequestHandler`1.HandleException(System.Exception)">
            <summary>
            Checks if the exception is either a Cassandra response error or a socket exception to retry or failover if necessary.
            </summary>
        </member>
        <member name="M:Cassandra.RequestHandler`1.HandlePreparedResult(Cassandra.AbstractResponse)">
            <summary>
            Creates the prepared statement and transitions the task to completed
            </summary>
        </member>
        <member name="M:Cassandra.RequestHandler`1.HandleRowSetResult(Cassandra.AbstractResponse)">
            <summary>
            Gets the resulting RowSet and transitions the task to completed.
            </summary>
        </member>
        <member name="M:Cassandra.RequestHandler`1.ResponseHandler(System.Exception,Cassandra.AbstractResponse)">
            <summary>
            Generic handler for all the responses
            </summary>
        </member>
        <member name="M:Cassandra.RequestHandler`1.ResponseReprepareHandler(System.Exception,Cassandra.AbstractResponse)">
            <summary>
            Handles the response of a (re)prepare request and retries to execute on the same connection
            </summary>
        </member>
        <member name="T:Cassandra.ProtocolOptions">
            <summary>
             Options of the Cassandra __native__ binary protocol.
            </summary>
        </member>
        <member name="F:Cassandra.ProtocolOptions.DefaultPort">
            <summary>
             The default port for Cassandra __native__ binary protocol: 9042.
            </summary>
        </member>
        <member name="M:Cassandra.ProtocolOptions.#ctor">
            <summary>
             Creates a new <c>ProtocolOptions</c> instance using the
             <c>DEFAULT_PORT</c>.
            </summary>
        </member>
        <member name="M:Cassandra.ProtocolOptions.#ctor(System.Int32)">
            <summary>
             Creates a new <c>ProtocolOptions</c> instance using the provided port.
            </summary>
            <param name="port"> the port to use for the binary protocol.</param>
        </member>
        <member name="M:Cassandra.ProtocolOptions.#ctor(System.Int32,Cassandra.SSLOptions)">
            <summary>       
            Creates a new ProtocolOptions instance using the provided port and SSL context.        
            </summary>
            <param name="port">the port to use for the binary protocol.</param>
            <param name="sslOptions">sslOptions the SSL options to use. Use null if SSL is not to be used.</param>
        </member>
        <member name="M:Cassandra.ProtocolOptions.SetCompression(Cassandra.CompressionType)">
            <summary>
             Sets the compression to use. <p> Note that while this setting can be changed
             at any time, it will only apply to newly created connections.</p>
            </summary>
            <param name="compression"> the compression algorithm to use (or <c>Compression.NONE</c> to disable compression).
             </param>
            <returns>this <c>ProtocolOptions</c> object.</returns>
        </member>
        <member name="M:Cassandra.ProtocolOptions.SetCustomCompressor(Cassandra.IFrameCompressor)">
            <summary>
            Sets a custom compressor to be used for the compression type.
            If specified, the compression type is mandatory.
            If not specified the driver default compressor will be use for the compression type.
            </summary>
            <param name="compressor">Implementation of IFrameCompressor</param>
        </member>
        <member name="M:Cassandra.ProtocolOptions.SetMaxSchemaAgreementWaitSeconds(System.Int32)">
            <summary>
            Sets the maximum time to wait for schema agreement before returning from a DDL query.
            </summary>
        </member>
        <member name="M:Cassandra.ProtocolOptions.SetMaxProtocolVersion(System.Byte)">
            <summary>
            Sets the maximum protocol version to be used.
            When set, it limits the maximum protocol version used to connect to the nodes.
            Useful for using the driver against a cluster that contains nodes with different major/minor versions of Cassandra.
            </summary>
        </member>
        <member name="P:Cassandra.ProtocolOptions.Port">
            <summary>
             The port used to connect to the Cassandra hosts.
            </summary>
            
            <returns>the port used to connect to the Cassandra hosts.</returns>
        </member>
        <member name="P:Cassandra.ProtocolOptions.SslOptions">
            <summary>
            Specified SSL options used to connect to the Cassandra hosts.
            </summary>
            
            <returns>SSL options used to connect to the Cassandra hosts.</returns>
        </member>
        <member name="P:Cassandra.ProtocolOptions.Compression">
            <summary>
             Returns the compression used by the protocol. <p> The default compression is
             <c>Compression.SNAPPY</c>.</p>
            </summary>
            <returns>the compression used.</returns>
        </member>
        <member name="P:Cassandra.ProtocolOptions.CustomCompressor">
            <summary>
             Gets the custom compressor specified to be used for the compression type.
            </summary>
        </member>
        <member name="P:Cassandra.ProtocolOptions.MaxSchemaAgreementWaitSeconds">
            <summary>
            Gets the maximum time to wait for schema agreement before returning from a DDL query.
            </summary>
        </member>
        <member name="P:Cassandra.ProtocolOptions.MaxProtocolVersion">
            <summary>
            Gets the maximum protocol version to be used.
            When set, it limits the maximum protocol version used to connect to the nodes.
            Useful for using the driver against a cluster that contains nodes with different major/minor versions of Cassandra.
            </summary>
        </member>
        <member name="T:Cassandra.QueryOptions">
            <summary>
            Options related to defaults for individual queries.
            </summary>
        </member>
        <member name="F:Cassandra.QueryOptions.DefaultConsistencyLevel">
            <summary>
            The default consistency level for queries: ConsistencyLevel.One.
            </summary>    
        </member>
        <member name="F:Cassandra.QueryOptions.DefaultSerialConsistencyLevel">
            <summary>
            The default serial consistency level for conditional updates: {@code ConsistencyLevel.Serial}.
            </summary>
        </member>
        <member name="F:Cassandra.QueryOptions.DefaultPageSize">
            <summary>
            The default page size for SELECT queries: 5000.
            </summary>
        </member>
        <member name="M:Cassandra.QueryOptions.SetConsistencyLevel(Cassandra.ConsistencyLevel)">
            <summary>
            Sets the default consistency level to use for queries.
            
            The consistency level set through this method will be use for queries
            that don't explicitely have a consistency level.
            </summary>
            <param name="consistencyLevel">the new consistency level to set as default.</param>
            <returns>this QueryOptions instance</returns>
        </member>
        <member name="M:Cassandra.QueryOptions.GetConsistencyLevel">
            <summary>
             The default consistency level used by queries.
            </summary>
            <returns>the default consistency level used by queries.</returns>
        </member>
        <member name="M:Cassandra.QueryOptions.SetSerialConsistencyLevel(Cassandra.ConsistencyLevel)">
            <summary>
            Sets the default serial consistency level to use for queries.
            The serial consistency level set through this method will be use for queries
            that don't explicitely have a serial consistency level.
            </summary>
            <param name="serialConsistencyLevel">the new serial consistency level to set as default.</param>
            <returns>this QueryOptions instance.</returns>
        </member>
        <member name="M:Cassandra.QueryOptions.GetSerialConsistencyLevel">
            <summary>
            The default serial consistency level used by queries.
            </summary>
            <returns>the default serial consistency level used by queries.</returns>
        </member>
        <member name="M:Cassandra.QueryOptions.SetPageSize(System.Int32)">
            <summary>
            Sets the default page size to use for SELECT queries.
            The page size set through this method will be use for queries
            that don't explicitely have a page size.
            </summary>
            <param name="pageSize">the new page size to set as default. It must be
            strictly positive but you can use int.MaxValue to disable paging.</param>
            <returns>this QueryOptions instance</returns>
        </member>
        <member name="M:Cassandra.QueryOptions.GetPageSize">
            <summary>
            The default page size used by queries.
            </summary>
            <returns>the default page size used by queries.</returns> 
        </member>
        <member name="P:Cassandra.QueryProtocolOptions.ValueNames">
            <summary>
            Names of the query parameters
            </summary>
        </member>
        <member name="T:Cassandra.QueryTrace">
            <summary>
             The Cassandra trace for a query. <p> Such trace is generated by Cassandra
             when query tracing is enabled for the query. The trace itself is stored in
             Cassandra in the <c>sessions</c> and <c>events</c> table in the
             <c>system_traces</c> keyspace and can be retrieve manually using the
             trace identifier (the one returned by <link>#getTraceId</link>). </p><p> This
             class provides facilities to fetch the traces from Cassandra. Please note
             that the writting of the trace is done asynchronously in Cassandra. So
             accessing the trace too soon after the query may result in the trace being
             incomplete.</p>
            </summary>
        </member>
        <member name="P:Cassandra.QueryTrace.TraceId">
            <summary>
             The identifier of this trace.
            </summary>
            
            <returns>the identifier of this trace.</returns>
        </member>
        <member name="P:Cassandra.QueryTrace.RequestType">
            <summary>
             The type of request.
            </summary>
            
            <returns>the type of request. This method returns <c>null</c> if the
             request type is not yet available.</returns>
        </member>
        <member name="P:Cassandra.QueryTrace.DurationMicros">
            <summary>
             The (server side) duration of the query in microseconds.
            </summary>
            
            <returns>the (server side) duration of the query in microseconds. This method
             will return <c>Integer.MIN_VALUE</c> if the duration is not yet
             available.</returns>
        </member>
        <member name="P:Cassandra.QueryTrace.Coordinator">
            <summary>
             The coordinator host of the query.
            </summary>
            
            <returns>the coordinator host of the query. This method returns
             <c>null</c> if the coordinator is not yet available.</returns>
        </member>
        <member name="P:Cassandra.QueryTrace.Parameters">
            <summary>
             The parameters attached to this trace.
            </summary>
            
            <returns>the parameters attached to this trace. This method returns
             <c>null</c> if the coordinator is not yet available.</returns>
        </member>
        <member name="P:Cassandra.QueryTrace.StartedAt">
            <summary>
             The server side timestamp of the start of this query.
            </summary>
            
            <returns>the server side timestamp of the start of this query. This method
             returns 0 if the start timestamp is not available.</returns>
        </member>
        <member name="P:Cassandra.QueryTrace.Events">
            <summary>
             The events contained in this trace.
            </summary>
            
            <returns>the events contained in this trace.</returns>
        </member>
        <member name="P:Cassandra.QueryTrace.ClientAddress">
            <summary>
            Source address of the query
            </summary>
        </member>
        <member name="T:Cassandra.QueryTrace.Event">
            <summary>
             A trace event. <p> A query trace is composed of a list of trace events.</p>
            </summary>
        </member>
        <member name="P:Cassandra.QueryTrace.Event.Description">
            <summary>
             The event description, i.e. which activity this event correspond to.
            </summary>
            
            <returns>the event description.</returns>
        </member>
        <member name="P:Cassandra.QueryTrace.Event.Timestamp">
            <summary>
             The server side timestamp of the event.
            </summary>
            
            <returns>the server side timestamp of the event.</returns>
        </member>
        <member name="P:Cassandra.QueryTrace.Event.Source">
            <summary>
             The address of the host having generated this event.
            </summary>
            
            <returns>the address of the host having generated this event.</returns>
        </member>
        <member name="P:Cassandra.QueryTrace.Event.SourceElapsedMicros">
            <summary>
             The number of microseconds elapsed on the source when this event occurred
             since when the source started handling the query.
            </summary>
            
            <returns>the elapsed time on the source host when that event happened in
             microseconds.</returns>
        </member>
        <member name="P:Cassandra.QueryTrace.Event.ThreadName">
            <summary>
             The name of the thread on which this event occured.
            </summary>
            
            <returns>the name of the thread on which this event occured.</returns>
        </member>
        <member name="T:Cassandra.ReplicationStrategies">
            <summary>
            Provides utility methods to build replication strategies when creating a keyspace
            </summary>
        </member>
        <member name="M:Cassandra.ReplicationStrategies.CreateSimpleStrategyReplicationProperty(System.Int32)">
            <summary>
             Returns replication property for SimpleStrategy.
            </summary>        
            <param name="replicationFactor">Replication factor for the whole cluster.</param>
            <returns>a dictionary of replication property sub-options.</returns>         
        </member>
        <member name="M:Cassandra.ReplicationStrategies.CreateNetworkTopologyStrategyReplicationProperty(System.Collections.Generic.Dictionary{System.String,System.Int32})">
            <summary>
             Returns replication property for NetworkTopologyStrategy.
            </summary>        
            <param name="datacentersReplicationFactors">Dictionary in which key is the name of a data-center,
            value is a replication factor for that data-center.</param>
            <returns>a dictionary of replication property sub-options.</returns>         
        </member>
        <member name="M:Cassandra.ReplicationStrategies.CreateReplicationProperty(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
             Returns replication property for other replication strategy. 
             Use it only if there is no dedicated method that creates replication property for specified replication strategy.
            </summary>
            <param name="strategyClass">Name of replication strategy.</param>
            <param name="subOptions">Dictionary in which key is the name of sub-option,
            value is a value for that sub-option.</param>
            <returns>a dictionary of replication property sub-options.</returns>         
        </member>
        <member name="P:Cassandra.RequestFrame.Stream">
            <summary>
            Gets or sets the underlying stream that contains the full frame
            </summary>
        </member>
        <member name="T:Cassandra.BatchType">
            <summary>
            The type of batch to use
            </summary>
        </member>
        <member name="F:Cassandra.BatchType.Logged">
            <summary>
            A logged batch: Cassandra will first write the batch to its distributed batch log to ensure the atomicity of the batch.
            </summary>
        </member>
        <member name="F:Cassandra.BatchType.Unlogged">
            <summary>
            An unlogged batch: The batch will not be written to the batch log and atomicity of the batch is NOT guaranteed.
            </summary>
        </member>
        <member name="F:Cassandra.BatchType.Counter">
            <summary>
            A counter batch
            </summary>
        </member>
        <member name="P:Cassandra.ResponseFrame.Header">
            <summary>
            The 8 byte protocol header
            </summary>
        </member>
        <member name="P:Cassandra.ResponseFrame.Body">
            <summary>
            A stream representing the frame body
            </summary>
        </member>
        <member name="P:Cassandra.AbstractResponse.BeBinaryReader">
            <summary>
            Big-endian binary reader of the response frame
            </summary>
        </member>
        <member name="P:Cassandra.AbstractResponse.TraceId">
            <summary>
            Identifier of the Cassandra trace 
            </summary>
        </member>
        <member name="M:Cassandra.BEBinaryReader.ReadInet">
            <summary>
            Reads protocol inet: Ip (4 or 16 bytes) followed by a port (int)
            </summary>
        </member>
        <member name="M:Cassandra.BEBinaryReader.ReadStringList">
            <summary>
            Reads a protocol string list
            </summary>
        </member>
        <member name="M:Cassandra.BEBinaryReader.ReadBytesMap">
            <summary>
            Reads a protocol bytes map
            </summary>
        </member>
        <member name="T:Cassandra.BEBinaryWriter">
            <summary>
            It represents a protocol writer
            </summary>
        </member>
        <member name="F:Cassandra.BEBinaryWriter._version">
            <summary>
            protocol version
            </summary>
        </member>
        <member name="M:Cassandra.BEBinaryWriter.GetBuffer">
            <summary>
            For testing purposes
            </summary>
        </member>
        <member name="M:Cassandra.BEBinaryWriter.WriteUInt16(System.UInt16)">
            <summary>
            Writes BE uint 16
            </summary>
        </member>
        <member name="M:Cassandra.BEBinaryWriter.WriteInt16(System.Int16)">
            <summary>
            Writes BE int 16
            </summary>
        </member>
        <member name="M:Cassandra.BEBinaryWriter.WriteInt32(System.Int32)">
            <summary>
            Writes BE int
            </summary>
        </member>
        <member name="M:Cassandra.BEBinaryWriter.WriteLong(System.Int64)">
            <summary>
            Writes Big Endian long
            </summary>
        </member>
        <member name="M:Cassandra.BEBinaryWriter.WriteString(System.String)">
            <summary>
            Writes protocol <c>string</c> (length + bytes)
            </summary>
        </member>
        <member name="M:Cassandra.BEBinaryWriter.WriteLongString(System.String)">
            <summary>
            Writes protocol <c>long string</c> (length + bytes)
            </summary>
        </member>
        <member name="M:Cassandra.BEBinaryWriter.WriteStringList(System.Collections.Generic.List{System.String})">
            <summary>
            Writes protocol <c>string list</c> (length + bytes)
            </summary>
        </member>
        <member name="M:Cassandra.BEBinaryWriter.WriteBytes(System.Byte[])">
            <summary>
            Writes protocol <c>bytes</c> (length + bytes)
            </summary>
        </member>
        <member name="M:Cassandra.BEBinaryWriter.WriteShortBytes(System.Byte[])">
            <summary>
            Writes protocol <c>short bytes</c> (length + bytes)
            </summary>
        </member>
        <member name="M:Cassandra.BEBinaryWriter.Write(System.Byte[])">
            <summary>
            Writes the complete buffer to the underlying stream
            </summary>
        </member>
        <member name="M:Cassandra.BEBinaryWriter.WriteBytesMap(System.Collections.Generic.IDictionary{System.String,System.Byte[]})">
            <summary>
            Writes a protocol bytes maps
            </summary>
        </member>
        <member name="P:Cassandra.PrepareRequest.Query">
            <summary>
            The CQL string to be prepared
            </summary>
        </member>
        <member name="P:Cassandra.EventResponse.CassandraEventArgs">
            <summary>
            Information on the actual event
            </summary>
        </member>
        <member name="T:Cassandra.QueryRequest">
            <summary>
            Represents a protocol QUERY request
            </summary>
        </member>
        <member name="P:Cassandra.ResultResponse.Kind">
            <summary>
            Cassandra result kind
            </summary>
        </member>
        <member name="P:Cassandra.ResultResponse.Warnings">
            <summary>
            Warnings from the server which were generated by the server to go along with this response.
            </summary>
        </member>
        <member name="P:Cassandra.ResultResponse.CustomPayload">
            <summary>
            Gets or sets the incoming custom payload
            </summary>
        </member>
        <member name="P:Cassandra.ResultResponse.Output">
            <summary>
            Output of the result response based on the kind of result
            </summary>
        </member>
        <member name="T:Cassandra.ExecuteRequest">
            <summary>
            Represents a protocol EXECUTE request
            </summary>
        </member>
        <member name="F:Cassandra.FrameHeader._versionByte">
            <summary>
            Protocol version byte (in case of responses 0x81, 0x82, ... in case of requests 0x01, 0x02)
            </summary>
        </member>
        <member name="M:Cassandra.FrameHeader.IsValidResponse">
            <summary>
            Determines if the response is valid by checking the version byte
            </summary>
        </member>
        <member name="M:Cassandra.FrameHeader.GetSize(System.Byte)">
            <summary>
            Gets the size of the protocol header, depending on the version of the protocol
            </summary>
            <param name="version">Version of the protocol used</param>
        </member>
        <member name="M:Cassandra.FrameHeader.ParseResponseHeader(System.Byte,System.Byte[],System.Int32)">
            <summary>
            Parses the first 8 bytes and returns a FrameHeader
            </summary>
        </member>
        <member name="M:Cassandra.FrameHeader.GetProtocolVersion(System.Byte[])">
            <summary>
            Gets the protocol version based on the first byte of the header
            </summary>
        </member>
        <member name="P:Cassandra.FrameHeader.BodyLength">
            <summary>
            Returns the length of the frame body 
            </summary>
        </member>
        <member name="P:Cassandra.FrameHeader.Flags">
            <summary>
            Flags applying to this frame..
            </summary>
        </member>
        <member name="P:Cassandra.FrameHeader.Version">
            <summary>
            Protocol version of the protocol (1, 2, 3)
            </summary>
        </member>
        <member name="F:Cassandra.FrameHeader.HeaderFlag.Compression">
            <summary>
            If set, the frame body is compressed.
            </summary>
        </member>
        <member name="F:Cassandra.FrameHeader.HeaderFlag.Tracing">
            <summary>
            For a request frame, this indicate the client requires tracing of the request.
            If a response frame has the tracing flag set, its body contains a tracing ID.
            </summary>
        </member>
        <member name="F:Cassandra.FrameHeader.HeaderFlag.CustomPayload">
            <summary>
            For a request or response frame, this indicates that generic key-value 
            custom payload for a custom QueryHandler implementation is present in the frame.
            </summary>
        </member>
        <member name="F:Cassandra.FrameHeader.HeaderFlag.Warning">
            <summary>
            The response contains warnings from the server which 
            were generated by the server to go along with this response.
            </summary>
        </member>
        <member name="T:Cassandra.FrameParser">
            <summary>
            
            </summary>
        </member>
        <member name="F:Cassandra.FrameParser._responseHandlerFactory">
            <summary>
            A factory to get the response handlers 
            </summary>
        </member>
        <member name="M:Cassandra.FrameParser.Parse(Cassandra.ResponseFrame)">
            <summary>
            Parses the response frame
            </summary>
        </member>
        <member name="M:Cassandra.OutputRows.ProcessRows(Cassandra.RowSet,Cassandra.BEBinaryReader)">
            <summary>
            Process rows and sets the paging event handler
            </summary>
        </member>
        <member name="P:Cassandra.OutputRows.RowSet">
            <summary>
            Gets or sets the RowSet parsed from the response
            </summary>
        </member>
        <member name="T:Cassandra.RoutingKey">
            <summary>
            Routing key using to determine the node for each partition
            </summary>
        </member>
        <member name="P:Cassandra.RoutingKey.RawRoutingKey">
            <summary>
            Byte array representing the partition key (or one of the partition)
            </summary>
        </member>
        <member name="T:Cassandra.ColumnDesc">
            <summary>
            Represents the information for a given data type
            </summary>
        </member>
        <member name="P:Cassandra.CqlColumn.Index">
            <summary>
            Index of the column in the rowset
            </summary>
        </member>
        <member name="P:Cassandra.CqlColumn.Type">
            <summary>
            CLR Type of the column
            </summary>
        </member>
        <member name="T:Cassandra.ExecutionInfo">
            <summary>
             Basic information on the execution of a query. <p> This provides the
             following information on the execution of a (successful) query: </p> <ul> <li>The
             list of Cassandra hosts tried in order (usually just one, unless a node has
             been tried but was dead/in error or a timeout provoked a retry (which depends
             on the RetryPolicy)).</li> <li>The consistency level achieved by the query
             (usually the one asked, though some specific RetryPolicy may allow this to be
             different).</li> <li>The query trace recorded by Cassandra if tracing had
             been set for the query.</li> </ul>
            </summary>
        </member>
        <member name="P:Cassandra.ExecutionInfo.TriedHosts">
            <summary>
            Gets the list of host that were queried before getting a valid response, 
            being the last host the one that replied correctly.
            </summary>
        </member>
        <member name="P:Cassandra.ExecutionInfo.Warnings">
            <summary>
            Returns the server-side warnings for this query.
            <para>
            This feature is only available for Cassandra 2.2 or above; with lower versions, this property always returns null.
            </para>
            </summary>
        </member>
        <member name="P:Cassandra.ExecutionInfo.IncomingPayload">
            <summary>
            Returns the incoming custom payload set by the server with its response, or null if the server have not include any custom payload.
            <para>
            This feature is only available for Cassandra 2.2 or above; with lower versions, this property always returns null.
            </para>
            </summary>
        </member>
        <member name="P:Cassandra.ExecutionInfo.QueriedHost">
            <summary>
            Retrieves the coordinator that responded to the request
            </summary>
        </member>
        <member name="P:Cassandra.ExecutionInfo.QueryTrace">
            <summary>
            Gets the trace for the query execution.
            </summary>
        </member>
        <member name="P:Cassandra.ExecutionInfo.AchievedConsistency">
            <summary>
            Gets the final achieved consistency
            </summary>
        </member>
        <member name="T:Cassandra.RowSet">
            <summary>
            Represents a result of a query returned by Cassandra.
            </summary>
        </member>
        <member name="F:Cassandra.RowSet._pagers">
            <summary>
            Contains the PagingState keys of the pages already retrieved.
            </summary>
        </member>
        <member name="M:Cassandra.RowSet.IsExhausted">
            <summary>
            Returns whether this ResultSet has more results.
            It has side-effects, if the internal queue has been consumed it will page for more results.
            </summary>
        </member>
        <member name="M:Cassandra.RowSet.AddRow(Cassandra.Row)">
            <summary>
            Adds a row to the inner row list
            </summary>
        </member>
        <member name="M:Cassandra.RowSet.FetchMoreResults">
            <summary>
            Force the fetching the next page of results for this result set, if any.
            </summary>
        </member>
        <member name="M:Cassandra.RowSet.FetchMoreResultsAsync">
            <summary>
            Force the fetching the next page of results without blocking for this result set, if any.
            </summary>
        </member>
        <member name="M:Cassandra.RowSet.GetAvailableWithoutFetching">
            <summary>
            The number of rows available in this row set that can be retrieved without blocking to fetch.
            </summary>
        </member>
        <member name="M:Cassandra.RowSet.GetRows">
            <summary>
            For backward compatibility: It is possible to iterate using the RowSet as it is enumerable.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cassandra.RowSet.PageNext">
            <summary>
            Gets the next results and add the rows to the current RowSet queue
            </summary>
        </member>
        <member name="M:Cassandra.RowSet.Dispose">
            <summary>
            For backward compatibility only
            </summary>
        </member>
        <member name="P:Cassandra.RowSet.AutoPage">
            <summary>
            Determines if when dequeuing, it will automatically fetch the following result pages.
            </summary>
        </member>
        <member name="P:Cassandra.RowSet.FetchNextPage">
            <summary>
            Delegate that is called to get the next page.
            </summary>
        </member>
        <member name="P:Cassandra.RowSet.RowQueue">
            <summary>
            Gets or set the internal row list. It contains the rows of the latest query page.
            </summary>
        </member>
        <member name="P:Cassandra.RowSet.InnerQueueCount">
            <summary>
            Gets the amount of items in the internal queue. For testing purposes.
            </summary>
        </member>
        <member name="P:Cassandra.RowSet.Info">
            <summary>
            Gets the execution info of the query
            </summary>
        </member>
        <member name="P:Cassandra.RowSet.Columns">
            <summary>
            Gets or sets the columns in the RowSet
            </summary>
        </member>
        <member name="P:Cassandra.RowSet.PagingState">
            <summary>
            Gets or sets the paging state of the query for the RowSet.
            When set it states that there are more pages.
            </summary>
        </member>
        <member name="P:Cassandra.RowSet.IsFullyFetched">
            <summary>
            Whether all results from this result set has been fetched from the database.
            </summary>
        </member>
        <member name="T:Cassandra.Row">
            <summary>
            Represents an CQL row
            </summary>
        </member>
        <member name="M:Cassandra.Row.#ctor">
            <summary>
            Initializes a new instance of the Cassandra.Row class
            </summary>
        </member>
        <member name="M:Cassandra.Row.#ctor(System.Int32,System.Byte[][],Cassandra.CqlColumn[],System.Collections.Generic.Dictionary{System.String,System.Int32})">
            <summary>
            Initializes a new instance of the Cassandra.Row class
            </summary>
        </member>
        <member name="M:Cassandra.Row.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the row values from the first position to the last one.
            </summary>
        </member>
        <member name="M:Cassandra.Row.IsNull(System.String)">
            <summary>
            Determines if the value in the column is null
            </summary>
        </member>
        <member name="M:Cassandra.Row.IsNull(System.Int32)">
            <summary>
            Determines if the value in the column is null
            </summary>
        </member>
        <member name="M:Cassandra.Row.GetColumn(System.String)">
            <summary>
            Gets a column information by name. Returns null if not found.
            </summary>
        </member>
        <member name="M:Cassandra.Row.GetValue(System.Type,System.Int32)">
            <summary>
            Gets the stored value in the column specified by index
            </summary>
            <param name="type">Target type</param>
            <param name="index">Index of the column</param>
            <returns></returns>
        </member>
        <member name="M:Cassandra.Row.GetValue(System.Type,System.String)">
            <summary>
            Gets the stored value in the column specified by name
            </summary>
            <param name="type">Target type</param>
            <param name="name">Name of the column</param>
            <returns></returns>
        </member>
        <member name="M:Cassandra.Row.GetValue``1(System.Int32)">
            <summary>
            Gets the stored value in the column specified by index.
            </summary>
            <typeparam name="T">Target type</typeparam>
            <param name="index">Index of the column</param>
            <returns></returns>
        </member>
        <member name="M:Cassandra.Row.GetValue``1(System.String)">
            <summary>
            Gets the stored value in the column specified by name.
            </summary>
            <typeparam name="T">Target type</typeparam>
            <param name="name">Name of the column</param>
            <returns></returns>
        </member>
        <member name="P:Cassandra.Row.ColumnIndexes">
            <summary>
            Gets or sets the index of the columns within the row
            </summary>
        </member>
        <member name="P:Cassandra.Row.Columns">
            <summary>
            Gets or sets the columns information
            </summary>
        </member>
        <member name="P:Cassandra.Row.Length">
            <summary>
            Gets the total amount of values inside the row
            </summary>
        </member>
        <member name="P:Cassandra.Row.Item(System.Int32)">
            <summary>
            Gets the stored value in the column specified by index
            </summary>
        </member>
        <member name="P:Cassandra.Row.Item(System.String)">
            <summary>
            Gets the stored value in the column specified by name
            </summary>
        </member>
        <member name="T:Cassandra.ColumnTypeCode">
            <summary>
            Specifies a Cassandra data type of a field
            </summary>
        </member>
        <member name="F:Cassandra.ColumnTypeCode.Udt">
            <summary>
            User defined type
            </summary>
        </member>
        <member name="F:Cassandra.ColumnTypeCode.Tuple">
            <summary>
            Tuple of n subtypes
            </summary>
        </member>
        <member name="T:Cassandra.IColumnInfo">
            <summary>
            Specifies the type information associated with collections, maps, udts and other Cassandra types
            </summary>
        </member>
        <member name="T:Cassandra.UdtColumnInfo">
            <summary>
            Represents the type information associated with a User Defined Type
            </summary>
        </member>
        <member name="P:Cassandra.UdtColumnInfo.Name">
            <summary>
            Fully qualified type name: keyspace.typeName
            </summary>
        </member>
        <member name="P:Cassandra.UdtColumnInfo.Fields">
            <summary>
            Gets the list of the inner fields contained in the UDT definition
            </summary>
        </member>
        <member name="T:Cassandra.TupleColumnInfo">
            <summary>
            Represents the information associated with a tuple column.
            </summary>
        </member>
        <member name="P:Cassandra.TupleColumnInfo.Elements">
            <summary>
            Gets the list of the inner fields contained in the UDT definition
            </summary>
        </member>
        <member name="T:Cassandra.RowSetMetadata">
            <summary>
            Represents the information of columns and other state values associated with a RowSet
            </summary>
        </member>
        <member name="P:Cassandra.RowSetMetadata.ColumnIndexes">
            <summary>
            Gets or sets the index of the columns within the row
            </summary>
        </member>
        <member name="P:Cassandra.RowSetMetadata.PartitionKeys">
            <summary>
            Gets or sets the column index of the partition keys.
            It returns null when partition keys were not parsed.
            </summary>
        </member>
        <member name="T:Cassandra.Tasks.LimitedParallelismTaskScheduler">
            <summary>
            A task scheduler that runs on top of the ThreadPool but schedules limited amount of task in parallel.
            </summary>
        </member>
        <member name="M:Cassandra.Tasks.LimitedParallelismTaskScheduler.#ctor(System.Int32)">
            <summary>
            Initializes an instance of the scheduler with the specified degree of parallelism.
            </summary>
            <param name="maxParallelismLevel">The maximum degree of parallelism allowed by this scheduler.</param>
        </member>
        <member name="M:Cassandra.Tasks.LimitedParallelismTaskScheduler.QueueTask(System.Threading.Tasks.Task)">
            <summary>
            Queues a task to the scheduler.
            </summary>
            <param name="task">The task to be queued.</param>
        </member>
        <member name="M:Cassandra.Tasks.LimitedParallelismTaskScheduler.NotifyThreadPoolOfPendingWork">
            <summary>
            Informs the ThreadPool that there's work to be executed for this scheduler.
            </summary>
        </member>
        <member name="M:Cassandra.Tasks.LimitedParallelismTaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)">
            <summary>
            Attempts to execute the specified task on the current thread.
            </summary>
            <param name="task">The task to be executed.</param>
            <param name="taskWasPreviouslyQueued"></param>
            <returns>Whether the task could be executed on the current thread.</returns>
        </member>
        <member name="M:Cassandra.Tasks.LimitedParallelismTaskScheduler.TryDequeue(System.Threading.Tasks.Task)">
            <summary>
            Attempts to remove a previously scheduled task from the scheduler.
            </summary>
            <param name="task">The task to be removed.</param>
            <returns>Whether the task could be found and removed.</returns>
        </member>
        <member name="M:Cassandra.Tasks.LimitedParallelismTaskScheduler.GetScheduledTasks">
            <summary>
            Gets an enumerable of the tasks currently scheduled on this scheduler.
            </summary>
            <returns>An enumerable of the tasks currently scheduled.</returns>
        </member>
        <member name="P:Cassandra.Tasks.LimitedParallelismTaskScheduler.MaximumConcurrencyLevel">
            <summary>
            Gets the maximum concurrency level supported by this scheduler.
            </summary>
        </member>
        <member name="T:Cassandra.TimeUuid">
            <summary>
            Represents a v1 uuid 
            </summary>
        </member>
        <member name="M:Cassandra.TimeUuid.Equals(Cassandra.TimeUuid)">
            <summary>
            Returns a value indicating whether this instance and a specified TimeUuid object represent the same value.
            </summary>
        </member>
        <member name="M:Cassandra.TimeUuid.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance and a specified TimeUuid object represent the same value.
            </summary>
        </member>
        <member name="M:Cassandra.TimeUuid.GetDate">
            <summary>
            Gets the DateTimeOffset representation of this instance
            </summary>
        </member>
        <member name="M:Cassandra.TimeUuid.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
        </member>
        <member name="M:Cassandra.TimeUuid.ToByteArray">
            <summary>
            Returns a 16-element byte array that contains the value of this instance.
            </summary>
        </member>
        <member name="M:Cassandra.TimeUuid.ToGuid">
            <summary>
            Gets the Guid representation of the Id
            </summary>
        </member>
        <member name="M:Cassandra.TimeUuid.CompareTo(Cassandra.TimeUuid)">
            <summary>
            Compares the current TimeUuid with another TimeUuid.
            </summary>
        </member>
        <member name="M:Cassandra.TimeUuid.ToString">
            <summary>
            Returns a string representation of the value of this instance in registry format.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cassandra.TimeUuid.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a string representation
            </summary>
        </member>
        <member name="M:Cassandra.TimeUuid.NewId">
            <summary>
            Initializes a new instance of the TimeUuid structure, using a random node id and clock sequence and the current date time
            </summary>
        </member>
        <member name="M:Cassandra.TimeUuid.NewId(System.DateTimeOffset)">
            <summary>
            Initializes a new instance of the TimeUuid structure, using a random node id and clock sequence
            </summary>
        </member>
        <member name="M:Cassandra.TimeUuid.NewId(System.Byte[],System.Byte[],System.DateTimeOffset)">
            <summary>
            Initializes a new instance of the TimeUuid structure
            </summary>
        </member>
        <member name="M:Cassandra.TimeUuid.op_Implicit(Cassandra.TimeUuid)~System.Guid">
            <summary>
            From TimeUuid to Guid
            </summary>
        </member>
        <member name="M:Cassandra.TimeUuid.op_Implicit(System.Guid)~Cassandra.TimeUuid">
            <summary>
            From Guid to TimeUuid
            </summary>
        </member>
        <member name="T:Cassandra.TypeCodec">
            <summary>
            Contains the methods handle serialization and deserialization from Cassandra types to CLR types
            </summary>
        </member>
        <member name="F:Cassandra.TypeCodec.UnsetBuffer">
            <summary>
            An instance of a buffer that represents the value Unset
            </summary>
        </member>
        <member name="F:Cassandra.TypeCodec.Encoders">
            <summary>
            Decoders by type code
            </summary>
        </member>
        <member name="F:Cassandra.TypeCodec.Decoders">
            <summary>
            Decoders by type code, taking the raw bytes and reconstructing the object model.
            </summary>
        </member>
        <member name="F:Cassandra.TypeCodec.DefaultTypes">
            <summary>
            Default CLR type by type code
            </summary>
        </member>
        <member name="F:Cassandra.TypeCodec.DefaultSingleCqlTypes">
            <summary>
            Default single (no collection types) cql type per CLR type
            </summary>
        </member>
        <member name="M:Cassandra.TypeCodec.Decode(System.Int32,System.Byte[],Cassandra.ColumnTypeCode,Cassandra.IColumnInfo,System.Type)">
            <summary>
            Takes the raw bytes to reconstruct a CLR object.
            </summary>
        </member>
        <member name="M:Cassandra.TypeCodec.GetDefaultTypeFromCqlType(Cassandra.ColumnTypeCode,Cassandra.IColumnInfo)">
            <summary>
            Gets the default CLR type for a given CQL type
            </summary>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="M:Cassandra.TypeCodec.Encode(System.Int32,System.Object)">
            <summary>
            Takes an object and serializes it into bytes using the protocol format
            </summary>
            <exception cref="T:Cassandra.InvalidTypeException"/>
        </member>
        <member name="M:Cassandra.TypeCodec.DecodeCollectionLength(System.Int32,System.Byte[],System.Int32@)">
            <summary>
            Decodes length for collection types depending on the protocol version
            </summary>
        </member>
        <member name="M:Cassandra.TypeCodec.EncodeCollection(System.Int32,System.Collections.IEnumerable)">
            <summary>
            Encodes a list or a set into a protocol encoded bytes
            </summary>
        </member>
        <member name="M:Cassandra.TypeCodec.EncodeCollectionLength(System.Int32,System.Int32)">
            <summary>
            Uses 2 or 4 bytes to represent the length in bytes
            </summary>
        </member>
        <member name="M:Cassandra.TypeCodec.GetDefaultTypeFromUdt(Cassandra.IColumnInfo)">
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="M:Cassandra.TypeCodec.GetDefaultTypeFromTuple(Cassandra.IColumnInfo)">
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="M:Cassandra.TypeCodec.ParseDataType(System.String,System.Int32,System.Int32)">
            <summary>
            Parses a given Cassandra type name to get the data type information
            </summary>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="M:Cassandra.TypeCodec.HexToUtf8(System.String)">
            <summary>
            Converts a hex string to utf8 string
            </summary>
        </member>
        <member name="M:Cassandra.TypeCodec.ParseParams(System.String,System.Int32,System.Int32)">
            <summary>
            Parses comma delimited type parameters
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cassandra.TypeCodec.SetUdtMap(System.String,Cassandra.UdtMap)">
            <summary>
            Sets a Udt map for a given Udt name
            </summary>
            <param name="name">Fully qualified udt name case sensitive (keyspace.udtName)</param>
            <param name="map"></param>
        </member>
        <member name="M:Cassandra.TypeCodec.GetUdtMap(System.String)">
            <summary>
            Gets a UdtMap by fully qualified name.
            </summary>
            <param name="name">keyspace.udtName</param>
            <returns>Null if not found</returns>
        </member>
        <member name="M:Cassandra.TypeCodec.GetUdtMap(System.Type)">
            <summary>
            Gets a UdtMap by fully qualified name.
            </summary>
            <returns>Null if not found</returns>
        </member>
        <member name="M:Cassandra.TypeCodec.IsAssignableFrom(Cassandra.CqlColumn,System.Object)">
            <summary>
            Performs a lightweight validation to determine if the source type and target type matches.
            It isn't more invasive to support crazy uses of the driver, like direct inputs of blobs and all that. (backward compatibility)
            </summary>
        </member>
        <member name="P:Cassandra.SchemaChangeEventArgs.Keyspace">
            <summary>
            The keyspace affected
            </summary>
        </member>
        <member name="P:Cassandra.SchemaChangeEventArgs.Table">
            <summary>
            The table affected
            </summary>
        </member>
        <member name="P:Cassandra.SchemaChangeEventArgs.What">
            <summary>
            The type of change in the schema object
            </summary>
        </member>
        <member name="P:Cassandra.SchemaChangeEventArgs.Type">
            <summary>
            The custom type affected
            </summary>
        </member>
        <member name="P:Cassandra.SchemaChangeEventArgs.FunctionName">
            <summary>
            Name of the Cql function affected
            </summary>
        </member>
        <member name="P:Cassandra.SchemaChangeEventArgs.AggregateName">
            <summary>
            Name of the aggregate affected
            </summary>
        </member>
        <member name="P:Cassandra.SchemaChangeEventArgs.Signature">
            <summary>
            Signature of the function or aggregate
            </summary>
        </member>
        <member name="T:Cassandra.Session">
            <summary>
            Implementation of <see cref="T:Cassandra.ISession"/>.
            </summary>
            <inheritdoc cref="T:Cassandra.ISession"/>
        </member>
        <member name="M:Cassandra.Session.BeginExecute(Cassandra.IStatement,System.AsyncCallback,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Cassandra.Session.BeginExecute(System.String,Cassandra.ConsistencyLevel,System.AsyncCallback,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Cassandra.Session.BeginPrepare(System.String,System.AsyncCallback,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Cassandra.Session.ChangeKeyspace(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Cassandra.Session.CreateKeyspace(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Cassandra.Session.CreateKeyspaceIfNotExists(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Cassandra.Session.DeleteKeyspace(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Cassandra.Session.DeleteKeyspaceIfExists(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Cassandra.Session.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Cassandra.Session.Init(System.Boolean)">
            <summary>
            Initialize the session
            </summary>
            <param name="createConnection">Determine if a connection must be created to test the host</param>
        </member>
        <member name="M:Cassandra.Session.EndExecute(System.IAsyncResult)">
            <inheritdoc />
        </member>
        <member name="M:Cassandra.Session.EndPrepare(System.IAsyncResult)">
            <inheritdoc />
        </member>
        <member name="M:Cassandra.Session.Execute(Cassandra.IStatement)">
            <inheritdoc />
        </member>
        <member name="M:Cassandra.Session.Execute(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Cassandra.Session.Execute(System.String,Cassandra.ConsistencyLevel)">
            <inheritdoc />
        </member>
        <member name="M:Cassandra.Session.Execute(System.String,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Cassandra.Session.ExecuteAsync(Cassandra.IStatement)">
            <inheritdoc />
        </member>
        <member name="M:Cassandra.Session.GetAllConnections">
            <summary>
            Gets a list of all opened connections to all hosts
            </summary>
        </member>
        <member name="M:Cassandra.Session.GetConnectionPool(Cassandra.Host,Cassandra.HostDistance)">
            <summary>
            Gets the connection pool for a given host
            </summary>
        </member>
        <member name="M:Cassandra.Session.GetRequest(Cassandra.IStatement)">
            <summary>
            Gets the Request to send to a cassandra node based on the statement type
            </summary>
        </member>
        <member name="M:Cassandra.Session.PrepareAsync(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Cassandra.Session.SetPrepareTableInfo(System.Threading.Tasks.Task{Cassandra.PreparedStatement})">
            <inheritdoc />
        </member>
        <member name="M:Cassandra.Session.WaitForAllPendingActions(System.Int32)">
            <summary>
            Waits for all pending responses to be received on all open connections or until a timeout is reached
            </summary>
        </member>
        <member name="P:Cassandra.Session.Configuration">
            <summary>
            Gets the cluster configuration
            </summary>
        </member>
        <member name="P:Cassandra.Session.UserDefinedTypes">
            <inheritdoc />
        </member>
        <member name="T:Cassandra.SimpleAuthInfoProvider">
            <summary>
             A simple <c>AuthInfoProvider</c> implementation. <p> This provider
             allows to programmatically define authentication information that will then
             apply to all hosts. </p><p> Note that it is <b>not</b> safe to add new info to
             this provider once a Cluster instance has been created using this provider.</p>
            </summary>
        </member>
        <member name="M:Cassandra.SimpleAuthInfoProvider.#ctor">
            <summary>
             Creates a new, empty, simple authentication info provider.
            </summary>
        </member>
        <member name="M:Cassandra.SimpleAuthInfoProvider.#ctor(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
             Creates a new simple authentication info provider with the informations
             contained in <c>properties</c>.
            </summary>
            <param name="properties"> a map of authentication information to use.</param>
        </member>
        <member name="M:Cassandra.SimpleAuthInfoProvider.Add(System.String,System.String)">
            <summary>
             Adds a new property to the authentication info returned by this provider.
            </summary>
            <param name="property"> the name of the property to add. For example "username","password" etc. </param>
            <param name="value"> the value to add for <c>property</c>. </param>
            
            <returns><c>this</c> object.</returns>
        </member>
        <member name="M:Cassandra.SimpleAuthInfoProvider.AddAll(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
             Adds all the key-value pair provided as new authentication information
             returned by this provider.
            </summary>
            <param name="properties"> a map of authentication information to add. </param>
            
            <returns><c>this</c> object.</returns>
        </member>
        <member name="T:Cassandra.SocketOptions">
            <summary>
             Options to configure low-level socket options for the connections kept to the
             Cassandra hosts.
            </summary>
        </member>
        <member name="M:Cassandra.SocketOptions.SetConnectTimeoutMillis(System.Int32)">
            <summary>
            Sets the number of milliseconds to wait for the socket to connect
            </summary>
        </member>
        <member name="M:Cassandra.SocketOptions.SetKeepAlive(System.Boolean)">
            <summary>
            Sets if TCP keep-alive must be used 
            </summary>
        </member>
        <member name="M:Cassandra.SocketOptions.SetSoLinger(System.Int32)">
            <summary>
            Sets the number of seconds to remain open after the Socket.Close() is called.
            </summary>
        </member>
        <member name="M:Cassandra.SocketOptions.SetTcpNoDelay(System.Boolean)">
            <summary>
            Set a Boolean value that specifies whether the stream Socket is using the Nagle algorithm.
            false if the Socket uses the Nagle algorithm; otherwise, true. The default is false.
            </summary>
        </member>
        <member name="M:Cassandra.SocketOptions.SetReceiveBufferSize(System.Int32)">
            <summary>
            Sets the size of the buffer used by the socket to receive
            </summary>
        </member>
        <member name="M:Cassandra.SocketOptions.SetSendBufferSize(System.Int32)">
            <summary>
            Sets the size of the buffer used by the socket to send
            </summary>
        </member>
        <member name="M:Cassandra.SocketOptions.SetStreamMode(System.Boolean)">
            <summary>
            Sets if the driver should use either .NET NetworkStream (true) interface or SocketEventArgs interface (false, default)
            to handle the reading and writing
            </summary>
        </member>
        <member name="P:Cassandra.SocketOptions.ConnectTimeoutMillis">
            <summary>
            Gets the number of milliseconds to wait for the socket to connect
            </summary>
        </member>
        <member name="P:Cassandra.SocketOptions.KeepAlive">
            <summary>
            Gets if TCP keep-alive must be used 
            </summary>
        </member>
        <member name="P:Cassandra.SocketOptions.SoLinger">
            <summary>
            Gets the number of seconds to remain open after the Socket.Close() is called.
            </summary>
        </member>
        <member name="P:Cassandra.SocketOptions.TcpNoDelay">
            <summary>
            Gets a Boolean value that specifies whether the stream Socket is using the Nagle algorithm.
            false if the Socket uses the Nagle algorithm; otherwise, true. The default is false.
            </summary>
        </member>
        <member name="P:Cassandra.SocketOptions.ReceiveBufferSize">
            <summary>
            Gets the size of the buffer used by the socket to receive
            </summary>
        </member>
        <member name="P:Cassandra.SocketOptions.SendBufferSize">
            <summary>
            Gets the size of the buffer used by the socket to send
            </summary>
        </member>
        <member name="P:Cassandra.SocketOptions.UseStreamMode">
            <summary>
            Determines if the driver should use either .NET NetworkStream interface (true) or SocketEventArgs interface (false, default)
            to handle the reading and writing
            </summary>
        </member>
        <member name="T:Cassandra.SSLOptions">
            <summary>
            Defines the SSL/TLS options to connect to a ssl enabled Cassandra host
            </summary>
        </member>
        <member name="M:Cassandra.SSLOptions.#ctor">
            <summary>
             Creates SSLOptions with default values.   
            </summary>
        </member>
        <member name="M:Cassandra.SSLOptions.#ctor(System.Security.Authentication.SslProtocols,System.Boolean,System.Net.Security.RemoteCertificateValidationCallback)">
            <summary>
            Creates SSL options used for SSL connections with Casandra hosts. 
            </summary>
            <param name="sslProtocol">type of SSL protocol, default set to Tls.</param>
            <param name="checkCertificateRevocation">specifies whether the certificate revocation list is checked during connection authentication.</param>
            <param name="remoteCertValidationCallback">verifies Cassandra host SSL certificate used for authentication.
                <remarks>
                    Default RemoteCertificateValidationCallback won't establish a connection if any error will occur.         
                </remarks> 
                </param>
        </member>
        <member name="M:Cassandra.SSLOptions.SetCertificateCollection(System.Security.Cryptography.X509Certificates.X509CertificateCollection)">
            <summary>
            Sets the collection that contains the client certificates
            </summary>
        </member>
        <member name="M:Cassandra.SSLOptions.SetHostNameResolver(System.Func{System.Net.IPAddress,System.String})">
            <summary>
            Sets the method to be use to determine the host name from the host IP address
            </summary>
        </member>
        <member name="M:Cassandra.SSLOptions.SetCertificateRevocationCheck(System.Boolean)">
            <summary>
            Determines whether the certificate revocation list is checked during connection authentication.
            </summary>
        </member>
        <member name="M:Cassandra.SSLOptions.SetRemoteCertValidationCallback(System.Net.Security.RemoteCertificateValidationCallback)">
            <summary>
            Determines whether the certificate revocation list is checked during connection authentication.
            </summary>
        </member>
        <member name="P:Cassandra.SSLOptions.RemoteCertValidationCallback">
            <summary>
            Verifies Cassandra host SSL certificate used for authentication.
            </summary>
        </member>
        <member name="P:Cassandra.SSLOptions.SslProtocol">
            <summary>
            Ssl Protocol used for communication with Cassandra hosts.
            </summary>
        </member>
        <member name="P:Cassandra.SSLOptions.CheckCertificateRevocation">
            <summary>
            Determines whether the certificate revocation list is checked during connection authentication.
            </summary>
        </member>
        <member name="P:Cassandra.SSLOptions.HostNameResolver">
            <summary>
            Gets the method to be use to determine the host name from the IP address
            </summary>
        </member>
        <member name="P:Cassandra.SSLOptions.CertificateCollection">
            <summary>
            Gets the collection that contains the client certificates
            </summary>
        </member>
        <member name="T:Cassandra.TableColumn">
            <summary>
            Represents a table column information
            </summary>
        </member>
        <member name="P:Cassandra.TableMetadata.Name">
            <summary>
            Gets the table name
            </summary>
        </member>
        <member name="P:Cassandra.TableMetadata.TableColumns">
            <summary>
            Gets the table columns
            </summary>
        </member>
        <member name="P:Cassandra.TableMetadata.PartitionKeys">
            <summary>
            Gets an array of columns that are part of the partition key in correct order
            </summary>
        </member>
        <member name="P:Cassandra.TableMetadata.Options">
            <summary>
            Gets the table options
            </summary>
        </member>
        <member name="P:Cassandra.TableOptions.IsCompactStorage">
            <summary>
             Whether the table uses the <c>COMPACT STORAGE</c> option.
            </summary>
            
            <returns>whether the table uses the <c>COMPACT STORAGE</c>
             option.</returns>
        </member>
        <member name="P:Cassandra.TableOptions.Comment">
            <summary>
             The commentary set for this table.
            </summary>
            
            <returns>the commentary set for this table, or <c>null</c> if noe has
             been set.</returns>
        </member>
        <member name="P:Cassandra.TableOptions.ReadRepairChance">
            <summary>
             The chance with which a read repair is triggered for this table.
            </summary>
            
            <returns>the read repair change set for table (in [0.0, 1.0]).</returns>
        </member>
        <member name="P:Cassandra.TableOptions.LocalReadRepairChance">
            <summary>
             The (cluster) local read repair chance set for this table.
            </summary>
            
            <returns>the local read repair change set for table (in [0.0, 1.0]).</returns>
        </member>
        <member name="P:Cassandra.TableOptions.ReplicateOnWrite">
            <summary>
             Whether replicateOnWrite is set for this table. This is only meaningful for
             tables holding counters.
            </summary>
            
            <returns>whether replicateOnWrite is set for this table.</returns>
        </member>
        <member name="P:Cassandra.TableOptions.GcGraceSeconds">
            <summary>
             The tombstone garbage collection grace time in seconds for this table.
            </summary>
            
            <returns>the tombstone garbage collection grace time in seconds for this
             table.</returns>
        </member>
        <member name="P:Cassandra.TableOptions.BloomFilterFpChance">
            <summary>
             The false positive chance for the bloom filter of this table.
            </summary>
            
            <returns>the bloom filter false positive chance for this table (in [0.0,
             1.0]).</returns>
        </member>
        <member name="P:Cassandra.TableOptions.Caching">
            <summary>
             The caching option for this table.
            </summary>
            
            <returns>the caching option for this table.</returns>
        </member>
        <member name="P:Cassandra.TableOptions.CompactionOptions">
            <summary>
             The compaction options for this table.
            </summary>
            
            <returns>a dictionary containing the compaction options for this table.</returns>
        </member>
        <member name="P:Cassandra.TableOptions.CompressionParams">
            <summary>
             The compression options for this table.
            </summary>
            
            <returns>a dictionary containing the compression options for this table.</returns>
        </member>
        <member name="M:Cassandra.Tasks.TaskHelper.ToApm``1(System.Threading.Tasks.Task{``0},System.AsyncCallback,System.Object)">
            <summary>
            Returns an AsyncResult according to the .net async programming model (Begin)
            </summary>
        </member>
        <member name="M:Cassandra.Tasks.TaskHelper.FromException``1(System.Exception)">
            <summary>
            Returns a faulted task with the provided exception
            </summary>
        </member>
        <member name="M:Cassandra.Tasks.TaskHelper.WaitToComplete``1(System.Threading.Tasks.Task{``0},System.Int32)">
            <summary>
            Waits the task to transition to RanToComplete and returns the Task.Result.
            It throws the inner exception of the AggregateException in case there is a single exception.
            It throws the Aggregate exception when there is more than 1 inner exception.
            It throws a TimeoutException when the task didn't complete in the expected time.
            </summary>
            <param name="task">the task to wait upon</param>
            <param name="timeout">timeout in milliseconds</param>
            <exception cref="T:System.TimeoutException"/>
            <exception cref="T:System.AggregateException"/>
        </member>
        <member name="M:Cassandra.Tasks.TaskHelper.WaitToComplete(System.Threading.Tasks.Task,System.Int32)">
            <summary>
            Waits the task to transition to RanToComplete.
            It throws the inner exception of the AggregateException in case there is a single exception.
            It throws the Aggregate exception when there is more than 1 inner exception.
            It throws a TimeoutException when the task didn't complete in the expected time.
            </summary>
            <param name="task">the task to wait upon</param>
            <param name="timeout">timeout in milliseconds</param>
            <exception cref="T:System.TimeoutException"/>
            <exception cref="T:System.AggregateException"/>
        </member>
        <member name="M:Cassandra.Tasks.TaskHelper.TrySet``1(System.Threading.Tasks.TaskCompletionSource{``0},System.Exception,``0)">
            <summary>
            Attempts to transition the underlying Task to RanToCompletion or Faulted state.
            </summary>
        </member>
        <member name="M:Cassandra.Tasks.TaskHelper.PreserveStackTrace(System.Exception)">
            <summary>
            Required when retrowing exceptions to maintain the stack trace of the original exception
            </summary>
        </member>
        <member name="M:Cassandra.Tasks.TaskHelper.Continue``2(System.Threading.Tasks.Task{``0},System.Func{System.Threading.Tasks.Task{``0},``1})">
            <summary>
            Smart ContinueWith
            </summary>
        </member>
        <member name="M:Cassandra.Tasks.TaskHelper.DoNext``2(System.Threading.Tasks.Task{``0},System.Func{System.Threading.Tasks.Task{``0},``1})">
            <summary>
            Invokes the next task immediately
            </summary>
        </member>
        <member name="T:Cassandra.TcpSocket">
            <summary>
            Represents a Tcp connection to a host.
            It emits Read and WriteCompleted events when data is received.
            Similar to Netty's Channel or Node.js's net.Socket
            It handles TLS validation and encryption when required.
            </summary>
        </member>
        <member name="M:Cassandra.TcpSocket.#ctor(System.Net.IPEndPoint,Cassandra.SocketOptions,Cassandra.SSLOptions)">
            <summary>
            Creates a new instance of TcpSocket using the endpoint and options provided.
            </summary>
        </member>
        <member name="M:Cassandra.TcpSocket.Init">
            <summary>
            Initializes the socket options
            </summary>
        </member>
        <member name="M:Cassandra.TcpSocket.Connect">
            <summary>
            Connects synchronously to the host and starts reading
            </summary>
            <exception cref="T:System.Net.Sockets.SocketException">Throws a SocketException when the connection could not be established with the host</exception>
        </member>
        <member name="M:Cassandra.TcpSocket.ReceiveAsync">
            <summary>
            Begins an asynchronous request to receive data from a connected Socket object.
            It handles the exceptions in case there is one.
            </summary>
        </member>
        <member name="M:Cassandra.TcpSocket.OnReceiveCompleted(System.Object,System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            Handles the receive completed event
            </summary>
        </member>
        <member name="M:Cassandra.TcpSocket.OnReceiveStreamCallback(System.IAsyncResult)">
            <summary>
            Handles the callback for BeginRead on Stream mode
            </summary>
        </member>
        <member name="M:Cassandra.TcpSocket.OnSendCompleted(System.Object,System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            Handles the send completed event
            </summary>
        </member>
        <member name="M:Cassandra.TcpSocket.OnSendStreamCallback(System.IAsyncResult)">
            <summary>
            Handles the callback for BeginWrite on Stream mode
            </summary>
        </member>
        <member name="M:Cassandra.TcpSocket.Write(System.IO.Stream)">
            <summary>
            Sends data asynchronously
            </summary>
        </member>
        <member name="E:Cassandra.TcpSocket.Read">
            <summary>
            Event that gets fired when new data is received.
            </summary>
        </member>
        <member name="E:Cassandra.TcpSocket.WriteCompleted">
            <summary>
            Event that gets fired when a write async request have been completed.
            </summary>
        </member>
        <member name="E:Cassandra.TcpSocket.Closing">
            <summary>
            Event that is fired when the host is closing the connection.
            </summary>
        </member>
        <member name="M:Cassandra.TokenMap.ComputeTokenToReplicaSimple(System.Int32,System.Int32,System.Collections.Generic.List{Cassandra.IToken},System.Collections.Generic.Dictionary{Cassandra.IToken,Cassandra.Host})">
            <summary>
            Converts token-primary to token-replicas
            </summary>
        </member>
        <member name="T:Cassandra.UdtMap`1">
            <summary>
            Represents a map between a UDT in Cassandra and a .NET Type, including data on how to map from UDT field names
            to Properties on the .NET Type.
            </summary>
            <typeparam name="T">The .NET Type to map the UDT to.</typeparam>
        </member>
        <member name="T:Cassandra.UdtMap">
            <summary>
            Represents a map between a user defined type in Cassandra and a .NET Type, with data on how
            to map field names in the UDT to .NET property names.
            </summary>
        </member>
        <member name="M:Cassandra.UdtMap.Automap">
            <summary>
            Maps properties and fields by name
            </summary>
        </member>
        <member name="M:Cassandra.UdtMap.Build(Cassandra.UdtColumnInfo)">
            <summary>
            Builds the mapping using the Udt definition.
            Sets the definition, validates the fields vs the mapped fields.
            In case there isn't any property mapped defined, it auto maps the properties by name
            </summary>
        </member>
        <member name="M:Cassandra.UdtMap.CreateInstance">
            <summary>
            Creates a new instance of the target .NET type
            </summary>
        </member>
        <member name="M:Cassandra.UdtMap.GetUdtFieldName(System.Reflection.PropertyInfo)">
            <summary>
            Gets the UDT field name for a given property.
            </summary>
        </member>
        <member name="M:Cassandra.UdtMap.GetPropertyForUdtField(System.String)">
            <summary>
            Gets the PropertyInfo that corresponds to the specified UDT field name.
            </summary>
        </member>
        <member name="M:Cassandra.UdtMap.For``1(System.String)">
            <summary>
            Creates a new UdtMap for the specified .NET type, optionally mapped to the specified UDT name.
            </summary>
        </member>
        <member name="M:Cassandra.UdtMap.ToObject(System.Collections.Generic.List{System.Object})">
            <summary>
            Creates a new instance of the mapped object and sets the values
            </summary>
        </member>
        <member name="M:Cassandra.UdtMap`1.Automap">
            <summary>
            Maps properties by name
            </summary>
        </member>
        <member name="M:Cassandra.UdtMap`1.Map``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)">
            <summary>
            Configures the driver to map the specified property on the .NET Type to the specified UDT field name.
            </summary>
        </member>
        <member name="T:Cassandra.UdtMappingDefinitions">
            <summary>
            Allows configuration of user defined types.
            </summary>
        </member>
        <member name="M:Cassandra.UdtMappingDefinitions.Define(Cassandra.UdtMap[])">
            <summary>
            Add mapping definition(s) for UDTs, specifying how UDTs should be mapped to .NET types and vice versa.
            </summary>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="M:Cassandra.UdtMappingDefinitions.GetDefinition(System.String,Cassandra.UdtMap)">
            <summary>
            Gets the definition and validates the fields
            </summary>
            <exception cref="T:Cassandra.InvalidTypeException"/>
        </member>
        <member name="T:Cassandra.Unset">
            <summary>
            The Unset class represents a unspecified value. 
            <para>
            In Cassandra 2.2 and above, when executing a UPDATE or INSERT query, a parameter can be unset.
            Designed to avoid tombstones, setting a parameter value to Unset will make Cassandra to ignore it.
            </para>
            <remarks>
            In some cases, we might be inserting rows using null for values that are not specified, and even though our intention is to leave the value empty, Cassandra will represent it as a tombstone causing an unnecessary overhead. 
            To avoid tombstones, in previous versions of Cassandra, you can use different query combinations only containing the fields that have a value.
            <para>
            The Unset type is a singleton class, which means only one Unset object exists. The Unset.Value member represents the sole Unset object.
            </para>
            </remarks>
            </summary>
        </member>
        <member name="F:Cassandra.Unset.Value">
            <summary>
            Represents the sole instance of the Unset class.
            </summary>
        </member>
        <member name="M:Cassandra.Utils.JoinBuffers(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Returns a new byte array that is the result of the sum of the 2 byte arrays: [1, 2] + [3, 4] = [1, 2, 3, 4]
            </summary>
        </member>
        <member name="M:Cassandra.Utils.SliceBuffer(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Returns a new buffer as a slice of the provided buffer
            </summary>
            <param name="value"></param>
            <param name="startIndex">zero-based index</param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Cassandra.Utils.CopyBuffer(System.Byte[])">
            <summary>
            Returns a new buffer with the bytes copied from the source buffer
            </summary>
        </member>
        <member name="M:Cassandra.Utils.ReadAllBytes(System.IO.Stream,System.Int32)">
            <summary>
            Reads all the bytes in the stream from a given position
            </summary>
        </member>
        <member name="M:Cassandra.Utils.IsAnonymousType(System.Object)">
            <summary>
            Detects if the object is an instance of an anonymous type
            </summary>
        </member>
        <member name="M:Cassandra.Utils.IsAnonymousType(System.Type)">
            <summary>
            Determines if the type is anonymous
            </summary>
        </member>
        <member name="M:Cassandra.Utils.GetValues(System.Collections.Generic.IEnumerable{System.String},System.Object)">
            <summary>
            Gets the values of a given object in order given by the property names
            </summary>
        </member>
        <member name="M:Cassandra.Utils.GetValues(System.Object)">
            <summary>
            Gets the properties and values of a given object
            </summary>
        </member>
        <member name="M:Cassandra.Utils.IsSerialConsistencyLevel(Cassandra.ConsistencyLevel)">
            <summary>
            Returns true if the ConsistencyLevel is either <see cref="F:Cassandra.ConsistencyLevel.Serial"/> or <see cref="F:Cassandra.ConsistencyLevel.LocalSerial"/>,
            otherwise false.
            </summary>
        </member>
        <member name="M:Cassandra.Utils.ToCollectionType(System.Type,System.Type,System.Array)">
            <summary>
            Creates a new instance of the collection type with the values provided
            </summary>
        </member>
        <member name="M:Cassandra.Utils.FillZeros(System.Int32,System.Int32)">
            <summary>
            Fill the zeros to the left
            </summary>
        </member>
    </members>
</doc>
