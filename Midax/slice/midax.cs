// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `midax.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


using _System = global::System;
using _Microsoft = global::Microsoft;

#pragma warning disable 1591

namespace IceCompactId
{
}

namespace Midax
{
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface MidaxIce : Ice.Object, MidaxIceOperations_, MidaxIceOperationsNC_
    {
    }
}

namespace Midax
{
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public delegate void Callback_MidaxIce_ping(string ret__);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public delegate void Callback_MidaxIce_startsignals();

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public delegate void Callback_MidaxIce_stopsignals();

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public delegate void Callback_MidaxIce_shutdown();

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public delegate void Callback_MidaxIce_getStatus(string ret__);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public delegate void Callback_MidaxIce_log();

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public delegate void Callback_MidaxIce_tick();
}

namespace Midax
{
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public interface MidaxIcePrx : Ice.ObjectPrx
    {
        string ping();
        string ping(_System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Midax.Callback_MidaxIce_ping> begin_ping();
        Ice.AsyncResult<Midax.Callback_MidaxIce_ping> begin_ping(_System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_ping(Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_ping(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        string end_ping(Ice.AsyncResult r__);

        void startsignals();
        void startsignals(_System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Midax.Callback_MidaxIce_startsignals> begin_startsignals();
        Ice.AsyncResult<Midax.Callback_MidaxIce_startsignals> begin_startsignals(_System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_startsignals(Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_startsignals(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        void end_startsignals(Ice.AsyncResult r__);

        void stopsignals();
        void stopsignals(_System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Midax.Callback_MidaxIce_stopsignals> begin_stopsignals();
        Ice.AsyncResult<Midax.Callback_MidaxIce_stopsignals> begin_stopsignals(_System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_stopsignals(Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_stopsignals(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        void end_stopsignals(Ice.AsyncResult r__);

        void shutdown();
        void shutdown(_System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Midax.Callback_MidaxIce_shutdown> begin_shutdown();
        Ice.AsyncResult<Midax.Callback_MidaxIce_shutdown> begin_shutdown(_System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_shutdown(Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_shutdown(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        void end_shutdown(Ice.AsyncResult r__);

        string getStatus();
        string getStatus(_System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Midax.Callback_MidaxIce_getStatus> begin_getStatus();
        Ice.AsyncResult<Midax.Callback_MidaxIce_getStatus> begin_getStatus(_System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_getStatus(Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_getStatus(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        string end_getStatus(Ice.AsyncResult r__);

        void log(string message, long logType);
        void log(string message, long logType, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Midax.Callback_MidaxIce_log> begin_log(string message, long logType);
        Ice.AsyncResult<Midax.Callback_MidaxIce_log> begin_log(string message, long logType, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_log(string message, long logType, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_log(string message, long logType, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        void end_log(Ice.AsyncResult r__);

        void tick(string mktDataId, long year, long month, long day, long hours, long minutes, long seconds, long milliseconds, double price, long volume);
        void tick(string mktDataId, long year, long month, long day, long hours, long minutes, long seconds, long milliseconds, double price, long volume, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Midax.Callback_MidaxIce_tick> begin_tick(string mktDataId, long year, long month, long day, long hours, long minutes, long seconds, long milliseconds, double price, long volume);
        Ice.AsyncResult<Midax.Callback_MidaxIce_tick> begin_tick(string mktDataId, long year, long month, long day, long hours, long minutes, long seconds, long milliseconds, double price, long volume, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_tick(string mktDataId, long year, long month, long day, long hours, long minutes, long seconds, long milliseconds, double price, long volume, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_tick(string mktDataId, long year, long month, long day, long hours, long minutes, long seconds, long milliseconds, double price, long volume, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        void end_tick(Ice.AsyncResult r__);
    }
}

namespace Midax
{
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public interface MidaxIceOperations_
    {
        string ping(Ice.Current current__);

        void startsignals(Ice.Current current__);

        void stopsignals(Ice.Current current__);

        void shutdown(Ice.Current current__);

        string getStatus(Ice.Current current__);

        void log(string message, long logType, Ice.Current current__);

        void tick(string mktDataId, long year, long month, long day, long hours, long minutes, long seconds, long milliseconds, double price, long volume, Ice.Current current__);
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public interface MidaxIceOperationsNC_
    {
        string ping();

        void startsignals();

        void stopsignals();

        void shutdown();

        string getStatus();

        void log(string message, long logType);

        void tick(string mktDataId, long year, long month, long day, long hours, long minutes, long seconds, long milliseconds, double price, long volume);
    }
}

namespace Midax
{
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public sealed class MidaxIcePrxHelper : Ice.ObjectPrxHelperBase, MidaxIcePrx
    {
        #region Synchronous operations

        public string getStatus()
        {
            return getStatus(null, false);
        }

        public string getStatus(_System.Collections.Generic.Dictionary<string, string> context__)
        {
            return getStatus(context__, true);
        }

        private string getStatus(_System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __getStatus_name, context__);
            int cnt__ = 0;
            try
            {
                while(true)
                {
                    Ice.ObjectDel_ delBase__ = null;
                    try
                    {
                        checkTwowayOnly__(__getStatus_name);
                        delBase__ = getDelegate__(false);
                        MidaxIceDel_ del__ = (MidaxIceDel_)delBase__;
                        return del__.getStatus(context__, observer__);
                    }
                    catch(IceInternal.LocalExceptionWrapper ex__)
                    {
                        handleExceptionWrapperRelaxed__(delBase__, ex__, true, ref cnt__, observer__);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        handleException__(delBase__, ex__, true, ref cnt__, observer__);
                    }
                }
            }
            finally
            {
                if(observer__ != null)
                {
                    observer__.detach();
                }
            }
        }

        public void log(string message, long logType)
        {
            log(message, logType, null, false);
        }

        public void log(string message, long logType, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            log(message, logType, context__, true);
        }

        private void log(string message, long logType, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __log_name, context__);
            int cnt__ = 0;
            try
            {
                while(true)
                {
                    Ice.ObjectDel_ delBase__ = null;
                    try
                    {
                        delBase__ = getDelegate__(false);
                        MidaxIceDel_ del__ = (MidaxIceDel_)delBase__;
                        del__.log(message, logType, context__, observer__);
                        return;
                    }
                    catch(IceInternal.LocalExceptionWrapper ex__)
                    {
                        handleExceptionWrapperRelaxed__(delBase__, ex__, true, ref cnt__, observer__);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        handleException__(delBase__, ex__, true, ref cnt__, observer__);
                    }
                }
            }
            finally
            {
                if(observer__ != null)
                {
                    observer__.detach();
                }
            }
        }

        public string ping()
        {
            return ping(null, false);
        }

        public string ping(_System.Collections.Generic.Dictionary<string, string> context__)
        {
            return ping(context__, true);
        }

        private string ping(_System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __ping_name, context__);
            int cnt__ = 0;
            try
            {
                while(true)
                {
                    Ice.ObjectDel_ delBase__ = null;
                    try
                    {
                        checkTwowayOnly__(__ping_name);
                        delBase__ = getDelegate__(false);
                        MidaxIceDel_ del__ = (MidaxIceDel_)delBase__;
                        return del__.ping(context__, observer__);
                    }
                    catch(IceInternal.LocalExceptionWrapper ex__)
                    {
                        handleExceptionWrapperRelaxed__(delBase__, ex__, true, ref cnt__, observer__);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        handleException__(delBase__, ex__, true, ref cnt__, observer__);
                    }
                }
            }
            finally
            {
                if(observer__ != null)
                {
                    observer__.detach();
                }
            }
        }

        public void shutdown()
        {
            shutdown(null, false);
        }

        public void shutdown(_System.Collections.Generic.Dictionary<string, string> context__)
        {
            shutdown(context__, true);
        }

        private void shutdown(_System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __shutdown_name, context__);
            int cnt__ = 0;
            try
            {
                while(true)
                {
                    Ice.ObjectDel_ delBase__ = null;
                    try
                    {
                        delBase__ = getDelegate__(false);
                        MidaxIceDel_ del__ = (MidaxIceDel_)delBase__;
                        del__.shutdown(context__, observer__);
                        return;
                    }
                    catch(IceInternal.LocalExceptionWrapper ex__)
                    {
                        handleExceptionWrapperRelaxed__(delBase__, ex__, true, ref cnt__, observer__);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        handleException__(delBase__, ex__, true, ref cnt__, observer__);
                    }
                }
            }
            finally
            {
                if(observer__ != null)
                {
                    observer__.detach();
                }
            }
        }

        public void startsignals()
        {
            startsignals(null, false);
        }

        public void startsignals(_System.Collections.Generic.Dictionary<string, string> context__)
        {
            startsignals(context__, true);
        }

        private void startsignals(_System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __startsignals_name, context__);
            int cnt__ = 0;
            try
            {
                while(true)
                {
                    Ice.ObjectDel_ delBase__ = null;
                    try
                    {
                        delBase__ = getDelegate__(false);
                        MidaxIceDel_ del__ = (MidaxIceDel_)delBase__;
                        del__.startsignals(context__, observer__);
                        return;
                    }
                    catch(IceInternal.LocalExceptionWrapper ex__)
                    {
                        handleExceptionWrapperRelaxed__(delBase__, ex__, true, ref cnt__, observer__);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        handleException__(delBase__, ex__, true, ref cnt__, observer__);
                    }
                }
            }
            finally
            {
                if(observer__ != null)
                {
                    observer__.detach();
                }
            }
        }

        public void stopsignals()
        {
            stopsignals(null, false);
        }

        public void stopsignals(_System.Collections.Generic.Dictionary<string, string> context__)
        {
            stopsignals(context__, true);
        }

        private void stopsignals(_System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __stopsignals_name, context__);
            int cnt__ = 0;
            try
            {
                while(true)
                {
                    Ice.ObjectDel_ delBase__ = null;
                    try
                    {
                        delBase__ = getDelegate__(false);
                        MidaxIceDel_ del__ = (MidaxIceDel_)delBase__;
                        del__.stopsignals(context__, observer__);
                        return;
                    }
                    catch(IceInternal.LocalExceptionWrapper ex__)
                    {
                        handleExceptionWrapperRelaxed__(delBase__, ex__, true, ref cnt__, observer__);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        handleException__(delBase__, ex__, true, ref cnt__, observer__);
                    }
                }
            }
            finally
            {
                if(observer__ != null)
                {
                    observer__.detach();
                }
            }
        }

        public void tick(string mktDataId, long year, long month, long day, long hours, long minutes, long seconds, long milliseconds, double price, long volume)
        {
            tick(mktDataId, year, month, day, hours, minutes, seconds, milliseconds, price, volume, null, false);
        }

        public void tick(string mktDataId, long year, long month, long day, long hours, long minutes, long seconds, long milliseconds, double price, long volume, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            tick(mktDataId, year, month, day, hours, minutes, seconds, milliseconds, price, volume, context__, true);
        }

        private void tick(string mktDataId, long year, long month, long day, long hours, long minutes, long seconds, long milliseconds, double price, long volume, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __tick_name, context__);
            int cnt__ = 0;
            try
            {
                while(true)
                {
                    Ice.ObjectDel_ delBase__ = null;
                    try
                    {
                        delBase__ = getDelegate__(false);
                        MidaxIceDel_ del__ = (MidaxIceDel_)delBase__;
                        del__.tick(mktDataId, year, month, day, hours, minutes, seconds, milliseconds, price, volume, context__, observer__);
                        return;
                    }
                    catch(IceInternal.LocalExceptionWrapper ex__)
                    {
                        handleExceptionWrapperRelaxed__(delBase__, ex__, true, ref cnt__, observer__);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        handleException__(delBase__, ex__, true, ref cnt__, observer__);
                    }
                }
            }
            finally
            {
                if(observer__ != null)
                {
                    observer__.detach();
                }
            }
        }

        #endregion

        #region Asynchronous operations

        public Ice.AsyncResult<Midax.Callback_MidaxIce_getStatus> begin_getStatus()
        {
            return begin_getStatus(null, false, null, null);
        }

        public Ice.AsyncResult<Midax.Callback_MidaxIce_getStatus> begin_getStatus(_System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_getStatus(ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_getStatus(Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_getStatus(null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_getStatus(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_getStatus(ctx__, true, cb__, cookie__);
        }

        private const string __getStatus_name = "getStatus";

        public string end_getStatus(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __getStatus_name);
            bool ok__ = outAsync__.wait__();
            try
            {
                if(!ok__)
                {
                    try
                    {
                        outAsync__.throwUserException__();
                    }
                    catch(Ice.UserException ex__)
                    {
                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                    }
                }
                string ret__;
                IceInternal.BasicStream is__ = outAsync__.startReadParams__();
                ret__ = is__.readString();
                outAsync__.endReadParams__();
                return ret__;
            }
            catch(Ice.LocalException ex)
            {
                Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                if(obsv__ != null)
                {
                    obsv__.failed(ex.ice_name());
                }
                throw ex;
            }
        }

        private Ice.AsyncResult<Midax.Callback_MidaxIce_getStatus> begin_getStatus(_System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__getStatus_name);
            IceInternal.TwowayOutgoingAsync<Midax.Callback_MidaxIce_getStatus> result__ =  new IceInternal.TwowayOutgoingAsync<Midax.Callback_MidaxIce_getStatus>(this, __getStatus_name, getStatus_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__getStatus_name, Ice.OperationMode.Idempotent, ctx__, explicitContext__);
                result__.writeEmptyParams__();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void getStatus_completed__(Ice.AsyncResult r__, Midax.Callback_MidaxIce_getStatus cb__, Ice.ExceptionCallback excb__)
        {
            string ret__;
            try
            {
                ret__ = end_getStatus(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__);
            }
        }

        public Ice.AsyncResult<Midax.Callback_MidaxIce_log> begin_log(string message, long logType)
        {
            return begin_log(message, logType, null, false, null, null);
        }

        public Ice.AsyncResult<Midax.Callback_MidaxIce_log> begin_log(string message, long logType, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_log(message, logType, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_log(string message, long logType, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_log(message, logType, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_log(string message, long logType, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_log(message, logType, ctx__, true, cb__, cookie__);
        }

        private const string __log_name = "log";

        public void end_log(Ice.AsyncResult r__)
        {
            end__(r__, __log_name);
        }

        private Ice.AsyncResult<Midax.Callback_MidaxIce_log> begin_log(string message, long logType, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            IceInternal.OnewayOutgoingAsync<Midax.Callback_MidaxIce_log> result__ = new IceInternal.OnewayOutgoingAsync<Midax.Callback_MidaxIce_log>(this, __log_name, log_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__log_name, Ice.OperationMode.Idempotent, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                os__.writeString(message);
                os__.writeLong(logType);
                result__.endWriteParams__();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void log_completed__(Midax.Callback_MidaxIce_log cb__)
        {
            if(cb__ != null)
            {
                cb__();
            }
        }

        public Ice.AsyncResult<Midax.Callback_MidaxIce_ping> begin_ping()
        {
            return begin_ping(null, false, null, null);
        }

        public Ice.AsyncResult<Midax.Callback_MidaxIce_ping> begin_ping(_System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_ping(ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_ping(Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_ping(null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_ping(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_ping(ctx__, true, cb__, cookie__);
        }

        private const string __ping_name = "ping";

        public string end_ping(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __ping_name);
            bool ok__ = outAsync__.wait__();
            try
            {
                if(!ok__)
                {
                    try
                    {
                        outAsync__.throwUserException__();
                    }
                    catch(Ice.UserException ex__)
                    {
                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                    }
                }
                string ret__;
                IceInternal.BasicStream is__ = outAsync__.startReadParams__();
                ret__ = is__.readString();
                outAsync__.endReadParams__();
                return ret__;
            }
            catch(Ice.LocalException ex)
            {
                Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                if(obsv__ != null)
                {
                    obsv__.failed(ex.ice_name());
                }
                throw ex;
            }
        }

        private Ice.AsyncResult<Midax.Callback_MidaxIce_ping> begin_ping(_System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__ping_name);
            IceInternal.TwowayOutgoingAsync<Midax.Callback_MidaxIce_ping> result__ =  new IceInternal.TwowayOutgoingAsync<Midax.Callback_MidaxIce_ping>(this, __ping_name, ping_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__ping_name, Ice.OperationMode.Idempotent, ctx__, explicitContext__);
                result__.writeEmptyParams__();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void ping_completed__(Ice.AsyncResult r__, Midax.Callback_MidaxIce_ping cb__, Ice.ExceptionCallback excb__)
        {
            string ret__;
            try
            {
                ret__ = end_ping(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__);
            }
        }

        public Ice.AsyncResult<Midax.Callback_MidaxIce_shutdown> begin_shutdown()
        {
            return begin_shutdown(null, false, null, null);
        }

        public Ice.AsyncResult<Midax.Callback_MidaxIce_shutdown> begin_shutdown(_System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_shutdown(ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_shutdown(Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_shutdown(null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_shutdown(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_shutdown(ctx__, true, cb__, cookie__);
        }

        private const string __shutdown_name = "shutdown";

        public void end_shutdown(Ice.AsyncResult r__)
        {
            end__(r__, __shutdown_name);
        }

        private Ice.AsyncResult<Midax.Callback_MidaxIce_shutdown> begin_shutdown(_System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            IceInternal.OnewayOutgoingAsync<Midax.Callback_MidaxIce_shutdown> result__ = new IceInternal.OnewayOutgoingAsync<Midax.Callback_MidaxIce_shutdown>(this, __shutdown_name, shutdown_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__shutdown_name, Ice.OperationMode.Idempotent, ctx__, explicitContext__);
                result__.writeEmptyParams__();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void shutdown_completed__(Midax.Callback_MidaxIce_shutdown cb__)
        {
            if(cb__ != null)
            {
                cb__();
            }
        }

        public Ice.AsyncResult<Midax.Callback_MidaxIce_startsignals> begin_startsignals()
        {
            return begin_startsignals(null, false, null, null);
        }

        public Ice.AsyncResult<Midax.Callback_MidaxIce_startsignals> begin_startsignals(_System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_startsignals(ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_startsignals(Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_startsignals(null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_startsignals(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_startsignals(ctx__, true, cb__, cookie__);
        }

        private const string __startsignals_name = "startsignals";

        public void end_startsignals(Ice.AsyncResult r__)
        {
            end__(r__, __startsignals_name);
        }

        private Ice.AsyncResult<Midax.Callback_MidaxIce_startsignals> begin_startsignals(_System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            IceInternal.OnewayOutgoingAsync<Midax.Callback_MidaxIce_startsignals> result__ = new IceInternal.OnewayOutgoingAsync<Midax.Callback_MidaxIce_startsignals>(this, __startsignals_name, startsignals_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__startsignals_name, Ice.OperationMode.Idempotent, ctx__, explicitContext__);
                result__.writeEmptyParams__();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void startsignals_completed__(Midax.Callback_MidaxIce_startsignals cb__)
        {
            if(cb__ != null)
            {
                cb__();
            }
        }

        public Ice.AsyncResult<Midax.Callback_MidaxIce_stopsignals> begin_stopsignals()
        {
            return begin_stopsignals(null, false, null, null);
        }

        public Ice.AsyncResult<Midax.Callback_MidaxIce_stopsignals> begin_stopsignals(_System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_stopsignals(ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_stopsignals(Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_stopsignals(null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_stopsignals(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_stopsignals(ctx__, true, cb__, cookie__);
        }

        private const string __stopsignals_name = "stopsignals";

        public void end_stopsignals(Ice.AsyncResult r__)
        {
            end__(r__, __stopsignals_name);
        }

        private Ice.AsyncResult<Midax.Callback_MidaxIce_stopsignals> begin_stopsignals(_System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            IceInternal.OnewayOutgoingAsync<Midax.Callback_MidaxIce_stopsignals> result__ = new IceInternal.OnewayOutgoingAsync<Midax.Callback_MidaxIce_stopsignals>(this, __stopsignals_name, stopsignals_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__stopsignals_name, Ice.OperationMode.Idempotent, ctx__, explicitContext__);
                result__.writeEmptyParams__();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void stopsignals_completed__(Midax.Callback_MidaxIce_stopsignals cb__)
        {
            if(cb__ != null)
            {
                cb__();
            }
        }

        public Ice.AsyncResult<Midax.Callback_MidaxIce_tick> begin_tick(string mktDataId, long year, long month, long day, long hours, long minutes, long seconds, long milliseconds, double price, long volume)
        {
            return begin_tick(mktDataId, year, month, day, hours, minutes, seconds, milliseconds, price, volume, null, false, null, null);
        }

        public Ice.AsyncResult<Midax.Callback_MidaxIce_tick> begin_tick(string mktDataId, long year, long month, long day, long hours, long minutes, long seconds, long milliseconds, double price, long volume, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_tick(mktDataId, year, month, day, hours, minutes, seconds, milliseconds, price, volume, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_tick(string mktDataId, long year, long month, long day, long hours, long minutes, long seconds, long milliseconds, double price, long volume, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_tick(mktDataId, year, month, day, hours, minutes, seconds, milliseconds, price, volume, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_tick(string mktDataId, long year, long month, long day, long hours, long minutes, long seconds, long milliseconds, double price, long volume, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_tick(mktDataId, year, month, day, hours, minutes, seconds, milliseconds, price, volume, ctx__, true, cb__, cookie__);
        }

        private const string __tick_name = "tick";

        public void end_tick(Ice.AsyncResult r__)
        {
            end__(r__, __tick_name);
        }

        private Ice.AsyncResult<Midax.Callback_MidaxIce_tick> begin_tick(string mktDataId, long year, long month, long day, long hours, long minutes, long seconds, long milliseconds, double price, long volume, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            IceInternal.OnewayOutgoingAsync<Midax.Callback_MidaxIce_tick> result__ = new IceInternal.OnewayOutgoingAsync<Midax.Callback_MidaxIce_tick>(this, __tick_name, tick_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__tick_name, Ice.OperationMode.Idempotent, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                os__.writeString(mktDataId);
                os__.writeLong(year);
                os__.writeLong(month);
                os__.writeLong(day);
                os__.writeLong(hours);
                os__.writeLong(minutes);
                os__.writeLong(seconds);
                os__.writeLong(milliseconds);
                os__.writeDouble(price);
                os__.writeLong(volume);
                result__.endWriteParams__();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void tick_completed__(Midax.Callback_MidaxIce_tick cb__)
        {
            if(cb__ != null)
            {
                cb__();
            }
        }

        #endregion

        #region Checked and unchecked cast operations

        public static MidaxIcePrx checkedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            MidaxIcePrx r = b as MidaxIcePrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                MidaxIcePrxHelper h = new MidaxIcePrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static MidaxIcePrx checkedCast(Ice.ObjectPrx b, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            MidaxIcePrx r = b as MidaxIcePrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                MidaxIcePrxHelper h = new MidaxIcePrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static MidaxIcePrx checkedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    MidaxIcePrxHelper h = new MidaxIcePrxHelper();
                    h.copyFrom__(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static MidaxIcePrx checkedCast(Ice.ObjectPrx b, string f, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    MidaxIcePrxHelper h = new MidaxIcePrxHelper();
                    h.copyFrom__(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static MidaxIcePrx uncheckedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            MidaxIcePrx r = b as MidaxIcePrx;
            if(r == null)
            {
                MidaxIcePrxHelper h = new MidaxIcePrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static MidaxIcePrx uncheckedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            MidaxIcePrxHelper h = new MidaxIcePrxHelper();
            h.copyFrom__(bb);
            return h;
        }

        public static readonly string[] ids__ =
        {
            "::Ice::Object",
            "::Midax::MidaxIce"
        };

        public static string ice_staticId()
        {
            return ids__[1];
        }

        #endregion

        #region Marshaling support

        protected override Ice.ObjectDelM_ createDelegateM__()
        {
            return new MidaxIceDelM_();
        }

        protected override Ice.ObjectDelD_ createDelegateD__()
        {
            return new MidaxIceDelD_();
        }

        public static void write__(IceInternal.BasicStream os__, MidaxIcePrx v__)
        {
            os__.writeProxy(v__);
        }

        public static MidaxIcePrx read__(IceInternal.BasicStream is__)
        {
            Ice.ObjectPrx proxy = is__.readProxy();
            if(proxy != null)
            {
                MidaxIcePrxHelper result = new MidaxIcePrxHelper();
                result.copyFrom__(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }
}

namespace Midax
{
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public interface MidaxIceDel_ : Ice.ObjectDel_
    {
        string ping(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

        void startsignals(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

        void stopsignals(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

        void shutdown(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

        string getStatus(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

        void log(string message, long logType, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

        void tick(string mktDataId, long year, long month, long day, long hours, long minutes, long seconds, long milliseconds, double price, long volume, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);
    }
}

namespace Midax
{
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public sealed class MidaxIceDelM_ : Ice.ObjectDelM_, MidaxIceDel_
    {
        public string getStatus(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("getStatus", Ice.OperationMode.Idempotent, context__, observer__);
            try
            {
                og__.writeEmptyParams();
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.startReadParams();
                    string ret__;
                    ret__ = is__.readString();
                    og__.endReadParams();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public void log(string message, long logType, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("log", Ice.OperationMode.Idempotent, context__, observer__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                    os__.writeString(message);
                    os__.writeLong(logType);
                    og__.endWriteParams();
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                if(og__.hasResponse())
                {
                    try
                    {
                        if(!ok__)
                        {
                            try
                            {
                                og__.throwUserException();
                            }
                            catch(Ice.UserException ex__)
                            {
                                throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                            }
                        }
                        og__.readEmptyParams();
                    }
                    catch(Ice.LocalException ex__)
                    {
                        throw new IceInternal.LocalExceptionWrapper(ex__, false);
                    }
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public string ping(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("ping", Ice.OperationMode.Idempotent, context__, observer__);
            try
            {
                og__.writeEmptyParams();
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.startReadParams();
                    string ret__;
                    ret__ = is__.readString();
                    og__.endReadParams();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public void shutdown(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("shutdown", Ice.OperationMode.Idempotent, context__, observer__);
            try
            {
                og__.writeEmptyParams();
                bool ok__ = og__.invoke();
                if(og__.hasResponse())
                {
                    try
                    {
                        if(!ok__)
                        {
                            try
                            {
                                og__.throwUserException();
                            }
                            catch(Ice.UserException ex__)
                            {
                                throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                            }
                        }
                        og__.readEmptyParams();
                    }
                    catch(Ice.LocalException ex__)
                    {
                        throw new IceInternal.LocalExceptionWrapper(ex__, false);
                    }
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public void startsignals(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("startsignals", Ice.OperationMode.Idempotent, context__, observer__);
            try
            {
                og__.writeEmptyParams();
                bool ok__ = og__.invoke();
                if(og__.hasResponse())
                {
                    try
                    {
                        if(!ok__)
                        {
                            try
                            {
                                og__.throwUserException();
                            }
                            catch(Ice.UserException ex__)
                            {
                                throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                            }
                        }
                        og__.readEmptyParams();
                    }
                    catch(Ice.LocalException ex__)
                    {
                        throw new IceInternal.LocalExceptionWrapper(ex__, false);
                    }
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public void stopsignals(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("stopsignals", Ice.OperationMode.Idempotent, context__, observer__);
            try
            {
                og__.writeEmptyParams();
                bool ok__ = og__.invoke();
                if(og__.hasResponse())
                {
                    try
                    {
                        if(!ok__)
                        {
                            try
                            {
                                og__.throwUserException();
                            }
                            catch(Ice.UserException ex__)
                            {
                                throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                            }
                        }
                        og__.readEmptyParams();
                    }
                    catch(Ice.LocalException ex__)
                    {
                        throw new IceInternal.LocalExceptionWrapper(ex__, false);
                    }
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public void tick(string mktDataId, long year, long month, long day, long hours, long minutes, long seconds, long milliseconds, double price, long volume, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("tick", Ice.OperationMode.Idempotent, context__, observer__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                    os__.writeString(mktDataId);
                    os__.writeLong(year);
                    os__.writeLong(month);
                    os__.writeLong(day);
                    os__.writeLong(hours);
                    os__.writeLong(minutes);
                    os__.writeLong(seconds);
                    os__.writeLong(milliseconds);
                    os__.writeDouble(price);
                    os__.writeLong(volume);
                    og__.endWriteParams();
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                if(og__.hasResponse())
                {
                    try
                    {
                        if(!ok__)
                        {
                            try
                            {
                                og__.throwUserException();
                            }
                            catch(Ice.UserException ex__)
                            {
                                throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                            }
                        }
                        og__.readEmptyParams();
                    }
                    catch(Ice.LocalException ex__)
                    {
                        throw new IceInternal.LocalExceptionWrapper(ex__, false);
                    }
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }
    }
}

namespace Midax
{
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public sealed class MidaxIceDelD_ : Ice.ObjectDelD_, MidaxIceDel_
    {
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public string getStatus(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "getStatus", Ice.OperationMode.Idempotent, context__);
            string result__ = null;
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                MidaxIce servant__ = null;
                try
                {
                    servant__ = (MidaxIce)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                result__ = servant__.getStatus(current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            return result__;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public void log(string message, long logType, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "log", Ice.OperationMode.Idempotent, context__);
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                MidaxIce servant__ = null;
                try
                {
                    servant__ = (MidaxIce)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                servant__.log(message, logType, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public string ping(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "ping", Ice.OperationMode.Idempotent, context__);
            string result__ = null;
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                MidaxIce servant__ = null;
                try
                {
                    servant__ = (MidaxIce)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                result__ = servant__.ping(current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            return result__;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public void shutdown(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "shutdown", Ice.OperationMode.Idempotent, context__);
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                MidaxIce servant__ = null;
                try
                {
                    servant__ = (MidaxIce)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                servant__.shutdown(current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public void startsignals(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "startsignals", Ice.OperationMode.Idempotent, context__);
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                MidaxIce servant__ = null;
                try
                {
                    servant__ = (MidaxIce)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                servant__.startsignals(current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public void stopsignals(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "stopsignals", Ice.OperationMode.Idempotent, context__);
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                MidaxIce servant__ = null;
                try
                {
                    servant__ = (MidaxIce)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                servant__.stopsignals(current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public void tick(string mktDataId, long year, long month, long day, long hours, long minutes, long seconds, long milliseconds, double price, long volume, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "tick", Ice.OperationMode.Idempotent, context__);
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                MidaxIce servant__ = null;
                try
                {
                    servant__ = (MidaxIce)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                servant__.tick(mktDataId, year, month, day, hours, minutes, seconds, milliseconds, price, volume, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
        }
    }
}

namespace Midax
{
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public abstract class MidaxIceDisp_ : Ice.ObjectImpl, MidaxIce
    {
        #region Slice operations

        public string ping()
        {
            return ping(Ice.ObjectImpl.defaultCurrent);
        }

        public abstract string ping(Ice.Current current__);

        public void startsignals()
        {
            startsignals(Ice.ObjectImpl.defaultCurrent);
        }

        public abstract void startsignals(Ice.Current current__);

        public void stopsignals()
        {
            stopsignals(Ice.ObjectImpl.defaultCurrent);
        }

        public abstract void stopsignals(Ice.Current current__);

        public void shutdown()
        {
            shutdown(Ice.ObjectImpl.defaultCurrent);
        }

        public abstract void shutdown(Ice.Current current__);

        public string getStatus()
        {
            return getStatus(Ice.ObjectImpl.defaultCurrent);
        }

        public abstract string getStatus(Ice.Current current__);

        public void log(string message, long logType)
        {
            log(message, logType, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract void log(string message, long logType, Ice.Current current__);

        public void tick(string mktDataId, long year, long month, long day, long hours, long minutes, long seconds, long milliseconds, double price, long volume)
        {
            tick(mktDataId, year, month, day, hours, minutes, seconds, milliseconds, price, volume, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract void tick(string mktDataId, long year, long month, long day, long hours, long minutes, long seconds, long milliseconds, double price, long volume, Ice.Current current__);

        #endregion

        #region Slice type-related members

        public static new readonly string[] ids__ = 
        {
            "::Ice::Object",
            "::Midax::MidaxIce"
        };

        public override bool ice_isA(string s)
        {
            return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override bool ice_isA(string s, Ice.Current current__)
        {
            return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids()
        {
            return ids__;
        }

        public override string[] ice_ids(Ice.Current current__)
        {
            return ids__;
        }

        public override string ice_id()
        {
            return ids__[1];
        }

        public override string ice_id(Ice.Current current__)
        {
            return ids__[1];
        }

        public static new string ice_staticId()
        {
            return ids__[1];
        }

        #endregion

        #region Operation dispatch

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus ping___(MidaxIce obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Idempotent, current__.mode);
            inS__.readEmptyParams();
            string ret__ = obj__.ping(current__);
            IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
            os__.writeString(ret__);
            inS__.endWriteParams__(true);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus startsignals___(MidaxIce obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Idempotent, current__.mode);
            inS__.readEmptyParams();
            obj__.startsignals(current__);
            inS__.writeEmptyParams__();
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus stopsignals___(MidaxIce obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Idempotent, current__.mode);
            inS__.readEmptyParams();
            obj__.stopsignals(current__);
            inS__.writeEmptyParams__();
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus shutdown___(MidaxIce obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Idempotent, current__.mode);
            inS__.readEmptyParams();
            obj__.shutdown(current__);
            inS__.writeEmptyParams__();
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus getStatus___(MidaxIce obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Idempotent, current__.mode);
            inS__.readEmptyParams();
            string ret__ = obj__.getStatus(current__);
            IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
            os__.writeString(ret__);
            inS__.endWriteParams__(true);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus log___(MidaxIce obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Idempotent, current__.mode);
            IceInternal.BasicStream is__ = inS__.startReadParams();
            string message;
            long logType;
            message = is__.readString();
            logType = is__.readLong();
            inS__.endReadParams();
            obj__.log(message, logType, current__);
            inS__.writeEmptyParams__();
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus tick___(MidaxIce obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Idempotent, current__.mode);
            IceInternal.BasicStream is__ = inS__.startReadParams();
            string mktDataId;
            long year;
            long month;
            long day;
            long hours;
            long minutes;
            long seconds;
            long milliseconds;
            double price;
            long volume;
            mktDataId = is__.readString();
            year = is__.readLong();
            month = is__.readLong();
            day = is__.readLong();
            hours = is__.readLong();
            minutes = is__.readLong();
            seconds = is__.readLong();
            milliseconds = is__.readLong();
            price = is__.readDouble();
            volume = is__.readLong();
            inS__.endReadParams();
            obj__.tick(mktDataId, year, month, day, hours, minutes, seconds, milliseconds, price, volume, current__);
            inS__.writeEmptyParams__();
            return Ice.DispatchStatus.DispatchOK;
        }

        private static string[] all__ =
        {
            "getStatus",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping",
            "log",
            "ping",
            "shutdown",
            "startsignals",
            "stopsignals",
            "tick"
        };

        public override Ice.DispatchStatus dispatch__(IceInternal.Incoming inS__, Ice.Current current__)
        {
            int pos = _System.Array.BinarySearch(all__, current__.operation, IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return getStatus___(this, inS__, current__);
                }
                case 1:
                {
                    return ice_id___(this, inS__, current__);
                }
                case 2:
                {
                    return ice_ids___(this, inS__, current__);
                }
                case 3:
                {
                    return ice_isA___(this, inS__, current__);
                }
                case 4:
                {
                    return ice_ping___(this, inS__, current__);
                }
                case 5:
                {
                    return log___(this, inS__, current__);
                }
                case 6:
                {
                    return ping___(this, inS__, current__);
                }
                case 7:
                {
                    return shutdown___(this, inS__, current__);
                }
                case 8:
                {
                    return startsignals___(this, inS__, current__);
                }
                case 9:
                {
                    return stopsignals___(this, inS__, current__);
                }
                case 10:
                {
                    return tick___(this, inS__, current__);
                }
            }

            _System.Diagnostics.Debug.Assert(false);
            throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
        }

        #endregion

        #region Marshaling support

        protected override void writeImpl__(IceInternal.BasicStream os__)
        {
            os__.startWriteSlice(ice_staticId(), -1, true);
            os__.endWriteSlice();
        }

        protected override void readImpl__(IceInternal.BasicStream is__)
        {
            is__.startReadSlice();
            is__.endReadSlice();
        }

        #endregion
    }
}
